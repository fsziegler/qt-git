#include "gitjsontext.h"

GitJsonText& GitJsonText::instance()
{
   static GitJsonText inst;
   return inst;
}

const TStrVect& GitJsonText::GetGitCmdVect(const string& gitCmdStr)
{
   TStrStrVectMapCItr itr = m_gitCmdMap.find(gitCmdStr);
   if(m_gitCmdMap.end() == itr)
   {
      return m_emptyVect;
   }
   return (*itr).second;
}

GitJsonText::GitJsonText()
{
#ifdef _WIN32
   LoadGitPull();
   LoadGitStash();
   LoadGitPush();
   LoadGitMerge();
   LoadGitBranch();
   LoadGitDiff();
   LoadGitFetch();
   LoadGitInit();
   LoadGitCheckout();
   LoadGitAdd();
   LoadGitClone();
   LoadGitRebase();
   LoadGitCommit();
   LoadGitStatus();
   LoadGitLog();
#endif
}

#ifdef _WIN32
void GitJsonText::LoadGitPull()
{
   TStrVect strVect =
   {
      "GIT-PULL(1)                       Git Manual                       GIT-PULL(1)",
      "",
      "",
      "",
      "NAME",
      "       git-pull - Fetch from and integrate with another repository or a local",
      "       branch",
      "",
      "SYNOPSIS",
      "       git pull [options] [<repository> [<refspec>...]]",
      "",
      "",
      "DESCRIPTION",
      "       Incorporates changes from a remote repository into the current branch.",
      "       In its default mode, git pull is shorthand for git fetch followed by",
      "       git merge FETCH_HEAD.",
      "",
      "       More precisely, git pull runs git fetch with the given parameters and",
      "       calls git merge to merge the retrieved branch heads into the current",
      "       branch. With --rebase, it runs git rebase instead of git merge.",
      "",
      "       <repository> should be the name of a remote repository as passed to",
      "       git-fetch(1). <refspec> can name an arbitrary remote ref (for example,",
      "       the name of a tag) or even a collection of refs with corresponding",
      "       remote-tracking branches (e.g., refs/heads/*:refs/remotes/origin/*),",
      "       but usually it is the name of a branch in the remote repository.",
      "",
      "       Default values for <repository> and <branch> are read from the \"remote\"",
      "       and \"merge\" configuration for the current branch as set by git-",
      "       branch(1) --track.",
      "",
      "       Assume the following history exists and the current branch is \"master\":",
      "",
      "                     A---B---C master on origin",
      "                    /",
      "               D---E---F---G master",
      "                   ^",
      "                   origin/master in your repository",
      "",
      "",
      "       Then \"git pull\" will fetch and replay the changes from the remote",
      "       master branch since it diverged from the local master (i.e., E) until",
      "       its current commit (C) on top of master and record the result in a new",
      "       commit along with the names of the two parent commits and a log message",
      "       from the user describing the changes.",
      "",
      "                     A---B---C origin/master",
      "                    /         \\",
      "               D---E---F---G---H master",
      "",
      "",
      "       See git-merge(1) for details, including how conflicts are presented and",
      "       handled.",
      "",
      "       In Git 1.7.0 or later, to cancel a conflicting merge, use git reset",
      "       --merge. Warning: In older versions of Git, running git pull with",
      "       uncommitted changes is discouraged: while possible, it leaves you in a",
      "       state that may be hard to back out of in the case of a conflict.",
      "",
      "       If any of the remote changes overlap with local uncommitted changes,",
      "       the merge will be automatically cancelled and the work tree untouched.",
      "       It is generally best to get any local changes in working order before",
      "       pulling or stash them away with git-stash(1).",
      "",
      "OPTIONS",
      "       Options meant for git pull itself and the underlying git merge must be",
      "       given before the options meant for git fetch.",
      "",
      "       -q, --quiet",
      "           This is passed to both underlying git-fetch to squelch reporting of",
      "           during transfer, and underlying git-merge to squelch output during",
      "           merging.",
      "",
      "       -v, --verbose",
      "           Pass --verbose to git-fetch and git-merge.",
      "",
      "       --[no-]recurse-submodules[=yes|on-demand|no]",
      "           This option controls if new commits of all populated submodules",
      "           should be fetched too (see git-config(1) and gitmodules(5)). That",
      "           might be necessary to get the data needed for merging submodule",
      "           commits, a feature Git learned in 1.7.3. Notice that the result of",
      "           a merge will not be checked out in the submodule, \"git submodule",
      "           update\" has to be called afterwards to bring the work tree up to",
      "           date with the merge result.",
      "",
      "   Options related to merging",
      "       --commit, --no-commit",
      "           Perform the merge and commit the result. This option can be used to",
      "           override --no-commit.",
      "",
      "           With --no-commit perform the merge but pretend the merge failed and",
      "           do not autocommit, to give the user a chance to inspect and further",
      "           tweak the merge result before committing.",
      "",
      "       --edit, -e, --no-edit",
      "           Invoke an editor before committing successful mechanical merge to",
      "           further edit the auto-generated merge message, so that the user can",
      "           explain and justify the merge. The --no-edit option can be used to",
      "           accept the auto-generated message (this is generally discouraged).",
      "",
      "           Older scripts may depend on the historical behaviour of not",
      "           allowing the user to edit the merge log message. They will see an",
      "           editor opened when they run git merge. To make it easier to adjust",
      "           such scripts to the updated behaviour, the environment variable",
      "           GIT_MERGE_AUTOEDIT can be set to no at the beginning of them.",
      "",
      "       --ff",
      "           When the merge resolves as a fast-forward, only update the branch",
      "           pointer, without creating a merge commit. This is the default",
      "           behavior.",
      "",
      "       --no-ff",
      "           Create a merge commit even when the merge resolves as a",
      "           fast-forward. This is the default behaviour when merging an",
      "           annotated (and possibly signed) tag.",
      "",
      "       --ff-only",
      "           Refuse to merge and exit with a non-zero status unless the current",
      "           HEAD is already up-to-date or the merge can be resolved as a",
      "           fast-forward.",
      "",
      "       --log[=<n>], --no-log",
      "           In addition to branch names, populate the log message with one-line",
      "           descriptions from at most <n> actual commits that are being merged.",
      "           See also git-fmt-merge-msg(1).",
      "",
      "           With --no-log do not list one-line descriptions from the actual",
      "           commits being merged.",
      "",
      "       --stat, -n, --no-stat",
      "           Show a diffstat at the end of the merge. The diffstat is also",
      "           controlled by the configuration option merge.stat.",
      "",
      "           With -n or --no-stat do not show a diffstat at the end of the",
      "           merge.",
      "",
      "       --squash, --no-squash",
      "           Produce the working tree and index state as if a real merge",
      "           happened (except for the merge information), but do not actually",
      "           make a commit or move the HEAD, nor record $GIT_DIR/MERGE_HEAD to",
      "           cause the next git commit command to create a merge commit. This",
      "           allows you to create a single commit on top of the current branch",
      "           whose effect is the same as merging another branch (or more in case",
      "           of an octopus).",
      "",
      "           With --no-squash perform the merge and commit the result. This",
      "           option can be used to override --squash.",
      "",
      "       -s <strategy>, --strategy=<strategy>",
      "           Use the given merge strategy; can be supplied more than once to",
      "           specify them in the order they should be tried. If there is no -s",
      "           option, a built-in list of strategies is used instead (git",
      "           merge-recursive when merging a single head, git merge-octopus",
      "           otherwise).",
      "",
      "       -X <option>, --strategy-option=<option>",
      "           Pass merge strategy specific option through to the merge strategy.",
      "",
      "       --verify-signatures, --no-verify-signatures",
      "           Verify that the commits being merged have good and trusted GPG",
      "           signatures and abort the merge in case they do not.",
      "",
      "       --summary, --no-summary",
      "           Synonyms to --stat and --no-stat; these are deprecated and will be",
      "           removed in the future.",
      "",
      "       -r, --rebase[=false|true|preserve]",
      "           When true, rebase the current branch on top of the upstream branch",
      "           after fetching. If there is a remote-tracking branch corresponding",
      "           to the upstream branch and the upstream branch was rebased since",
      "           last fetched, the rebase uses that information to avoid rebasing",
      "           non-local changes.",
      "",
      "           When preserve, also rebase the current branch on top of the",
      "           upstream branch, but pass --preserve-merges along to git rebase so",
      "           that locally created merge commits will not be flattened.",
      "",
      "           When false, merge the current branch into the upstream branch.",
      "",
      "           See pull.rebase, branch.<name>.rebase and branch.autosetuprebase in",
      "           git-config(1) if you want to make git pull always use --rebase",
      "           instead of merging.",
      "",
      "               Note",
      "               This is a potentially dangerous mode of operation. It rewrites",
      "               history, which does not bode well when you published that",
      "               history already. Do not use this option unless you have read",
      "               git-rebase(1) carefully.",
      "",
      "       --no-rebase",
      "           Override earlier --rebase.",
      "",
      "   Options related to fetching",
      "       --all",
      "           Fetch all remotes.",
      "",
      "       -a, --append",
      "           Append ref names and object names of fetched refs to the existing",
      "           contents of .git/FETCH_HEAD. Without this option old data in",
      "           .git/FETCH_HEAD will be overwritten.",
      "",
      "       --depth=<depth>",
      "           Deepen or shorten the history of a shallow repository created by",
      "           git clone with --depth=<depth> option (see git-clone(1)) to the",
      "           specified number of commits from the tip of each remote branch",
      "           history. Tags for the deepened commits are not fetched.",
      "",
      "       --unshallow",
      "           If the source repository is complete, convert a shallow repository",
      "           to a complete one, removing all the limitations imposed by shallow",
      "           repositories.",
      "",
      "           If the source repository is shallow, fetch as much as possible so",
      "           that the current repository has the same history as the source",
      "           repository.",
      "",
      "       --update-shallow",
      "           By default when fetching from a shallow repository, git fetch",
      "           refuses refs that require updating .git/shallow. This option",
      "           updates .git/shallow and accept such refs.",
      "",
      "       -f, --force",
      "           When git fetch is used with <rbranch>:<lbranch> refspec, it refuses",
      "           to update the local branch <lbranch> unless the remote branch",
      "           <rbranch> it fetches is a descendant of <lbranch>. This option",
      "           overrides that check.",
      "",
      "       -k, --keep",
      "           Keep downloaded pack.",
      "",
      "       --no-tags",
      "           By default, tags that point at objects that are downloaded from the",
      "           remote repository are fetched and stored locally. This option",
      "           disables this automatic tag following. The default behavior for a",
      "           remote may be specified with the remote.<name>.tagopt setting. See",
      "           git-config(1).",
      "",
      "       -u, --update-head-ok",
      "           By default git fetch refuses to update the head which corresponds",
      "           to the current branch. This flag disables the check. This is purely",
      "           for the internal use for git pull to communicate with git fetch,",
      "           and unless you are implementing your own Porcelain you are not",
      "           supposed to use it.",
      "",
      "       --upload-pack <upload-pack>",
      "           When given, and the repository to fetch from is handled by git",
      "           fetch-pack, --exec=<upload-pack> is passed to the command to",
      "           specify non-default path for the command run on the other end.",
      "",
      "       --progress",
      "           Progress status is reported on the standard error stream by default",
      "           when it is attached to a terminal, unless -q is specified. This",
      "           flag forces progress status even if the standard error stream is",
      "           not directed to a terminal.",
      "",
      "       <repository>",
      "           The \"remote\" repository that is the source of a fetch or pull",
      "           operation. This parameter can be either a URL (see the section GIT",
      "           URLS below) or the name of a remote (see the section REMOTES",
      "           below).",
      "",
      "       <refspec>",
      "           The format of a <refspec> parameter is an optional plus +, followed",
      "           by the source ref <src>, followed by a colon :, followed by the",
      "           destination ref <dst>.",
      "",
      "           The remote ref that matches <src> is fetched, and if <dst> is not",
      "           empty string, the local ref that matches it is fast-forwarded using",
      "           <src>. If the optional plus + is used, the local ref is updated",
      "           even if it does not result in a fast-forward update.",
      "",
      "               Note",
      "               If the remote branch from which you want to pull is modified in",
      "               non-linear ways such as being rewound and rebased frequently,",
      "               then a pull will attempt a merge with an older version of",
      "               itself, likely conflict, and fail. It is under these conditions",
      "               that you would want to use the + sign to indicate",
      "               non-fast-forward updates will be needed. There is currently no",
      "               easy way to determine or declare that a branch will be made",
      "               available in a repository with this behavior; the pulling user",
      "               simply must know this is the expected usage pattern for a",
      "               branch.",
      "",
      "               Note",
      "               You never do your own development on branches that appear on",
      "               the right hand side of a <refspec> colon on Pull: lines; they",
      "               are to be updated by git fetch. If you intend to do development",
      "               derived from a remote branch B, have a Pull: line to track it",
      "               (i.e.  Pull: B:remote-B), and have a separate branch my-B to do",
      "               your development on top of it. The latter is created by git",
      "               branch my-B remote-B (or its equivalent git checkout -b my-B",
      "               remote-B). Run git fetch to keep track of the progress of the",
      "               remote side, and when you see something new on the remote",
      "               branch, merge it into your development branch with git pull .",
      "               remote-B, while you are on my-B branch.",
      "",
      "               Note",
      "               There is a difference between listing multiple <refspec>",
      "               directly on git pull command line and having multiple Pull:",
      "               <refspec> lines for a <repository> and running git pull command",
      "               without any explicit <refspec> parameters. <refspec> listed",
      "               explicitly on the command line are always merged into the",
      "               current branch after fetching. In other words, if you list more",
      "               than one remote refs, you would be making an Octopus. While git",
      "               pull run without any explicit <refspec> parameter takes default",
      "               <refspec>s from Pull: lines, it merges only the first <refspec>",
      "               found into the current branch, after fetching all the remote",
      "               refs. This is because making an Octopus from remote refs is",
      "               rarely done, while keeping track of multiple remote heads in",
      "               one-go by fetching more than one is often useful.",
      "           Some short-cut notations are also supported.",
      "",
      "           ·   tag <tag> means the same as refs/tags/<tag>:refs/tags/<tag>; it",
      "               requests fetching everything up to the given tag.",
      "",
      "           ·   A parameter <ref> without a colon merges <ref> into the current",
      "               branch, and updates the remote-tracking branches (if any).",
      "",
      "GIT URLS",
      "       In general, URLs contain information about the transport protocol, the",
      "       address of the remote server, and the path to the repository. Depending",
      "       on the transport protocol, some of this information may be absent.",
      "",
      "       Git supports ssh, git, http, and https protocols (in addition, ftp, and",
      "       ftps can be used for fetching and rsync can be used for fetching and",
      "       pushing, but these are inefficient and deprecated; do not use them).",
      "",
      "       The native transport (i.e. git:// URL) does no authentication and",
      "       should be used with caution on unsecured networks.",
      "",
      "       The following syntaxes may be used with them:",
      "",
      "       ·   ssh://[user@]host.xz[:port]/path/to/repo.git/",
      "",
      "       ·   git://host.xz[:port]/path/to/repo.git/",
      "",
      "       ·   http[s]://host.xz[:port]/path/to/repo.git/",
      "",
      "       ·   ftp[s]://host.xz[:port]/path/to/repo.git/",
      "",
      "       ·   rsync://host.xz/path/to/repo.git/",
      "",
      "       An alternative scp-like syntax may also be used with the ssh protocol:",
      "",
      "       ·   [user@]host.xz:path/to/repo.git/",
      "",
      "       This syntax is only recognized if there are no slashes before the first",
      "       colon. This helps differentiate a local path that contains a colon. For",
      "       example the local path foo:bar could be specified as an absolute path",
      "       or ./foo:bar to avoid being misinterpreted as an ssh url.",
      "",
      "       The ssh and git protocols additionally support ~username expansion:",
      "",
      "       ·   ssh://[user@]host.xz[:port]/~[user]/path/to/repo.git/",
      "",
      "       ·   git://host.xz[:port]/~[user]/path/to/repo.git/",
      "",
      "       ·   [user@]host.xz:/~[user]/path/to/repo.git/",
      "",
      "       For local repositories, also supported by Git natively, the following",
      "       syntaxes may be used:",
      "",
      "       ·   /path/to/repo.git/",
      "",
      "       ·   file:///path/to/repo.git/",
      "",
      "       These two syntaxes are mostly equivalent, except when cloning, when the",
      "       former implies --local option. See git-clone(1) for details.",
      "",
      "       When Git doesn’t know how to handle a certain transport protocol, it",
      "       attempts to use the remote-<transport> remote helper, if one exists. To",
      "       explicitly request a remote helper, the following syntax may be used:",
      "",
      "       ·   <transport>::<address>",
      "",
      "       where <address> may be a path, a server and path, or an arbitrary",
      "       URL-like string recognized by the specific remote helper being invoked.",
      "       See gitremote-helpers(1) for details.",
      "",
      "       If there are a large number of similarly-named remote repositories and",
      "       you want to use a different format for them (such that the URLs you use",
      "       will be rewritten into URLs that work), you can create a configuration",
      "       section of the form:",
      "",
      "                   [url \"<actual url base>\"]",
      "                           insteadOf = <other url base>",
      "",
      "",
      "       For example, with this:",
      "",
      "                   [url \"git://git.host.xz/\"]",
      "                           insteadOf = host.xz:/path/to/",
      "                           insteadOf = work:",
      "",
      "",
      "       a URL like \"work:repo.git\" or like \"host.xz:/path/to/repo.git\" will be",
      "       rewritten in any context that takes a URL to be",
      "       \"git://git.host.xz/repo.git\".",
      "",
      "       If you want to rewrite URLs for push only, you can create a",
      "       configuration section of the form:",
      "",
      "                   [url \"<actual url base>\"]",
      "                           pushInsteadOf = <other url base>",
      "",
      "",
      "       For example, with this:",
      "",
      "                   [url \"ssh://example.org/\"]",
      "                           pushInsteadOf = git://example.org/",
      "",
      "",
      "       a URL like \"git://example.org/path/to/repo.git\" will be rewritten to",
      "       \"ssh://example.org/path/to/repo.git\" for pushes, but pulls will still",
      "       use the original URL.",
      "",
      "REMOTES",
      "       The name of one of the following can be used instead of a URL as",
      "       <repository> argument:",
      "",
      "       ·   a remote in the Git configuration file: $GIT_DIR/config,",
      "",
      "       ·   a file in the $GIT_DIR/remotes directory, or",
      "",
      "       ·   a file in the $GIT_DIR/branches directory.",
      "",
      "       All of these also allow you to omit the refspec from the command line",
      "       because they each contain a refspec which git will use by default.",
      "",
      "   Named remote in configuration file",
      "       You can choose to provide the name of a remote which you had previously",
      "       configured using git-remote(1), git-config(1) or even by a manual edit",
      "       to the $GIT_DIR/config file. The URL of this remote will be used to",
      "       access the repository. The refspec of this remote will be used by",
      "       default when you do not provide a refspec on the command line. The",
      "       entry in the config file would appear like this:",
      "",
      "                   [remote \"<name>\"]",
      "                           url = <url>",
      "                           pushurl = <pushurl>",
      "                           push = <refspec>",
      "                           fetch = <refspec>",
      "",
      "",
      "       The <pushurl> is used for pushes only. It is optional and defaults to",
      "       <url>.",
      "",
      "   Named file in $GIT_DIR/remotes",
      "       You can choose to provide the name of a file in $GIT_DIR/remotes. The",
      "       URL in this file will be used to access the repository. The refspec in",
      "       this file will be used as default when you do not provide a refspec on",
      "       the command line. This file should have the following format:",
      "",
      "                   URL: one of the above URL format",
      "                   Push: <refspec>",
      "                   Pull: <refspec>",
      "",
      "",
      "       Push: lines are used by git push and Pull: lines are used by git pull",
      "       and git fetch. Multiple Push: and Pull: lines may be specified for",
      "       additional branch mappings.",
      "",
      "   Named file in $GIT_DIR/branches",
      "       You can choose to provide the name of a file in $GIT_DIR/branches. The",
      "       URL in this file will be used to access the repository. This file",
      "       should have the following format:",
      "",
      "                   <url>#<head>",
      "",
      "",
      "       <url> is required; #<head> is optional.",
      "",
      "       Depending on the operation, git will use one of the following refspecs,",
      "       if you don’t provide one on the command line. <branch> is the name of",
      "       this file in $GIT_DIR/branches and <head> defaults to master.",
      "",
      "       git fetch uses:",
      "",
      "                   refs/heads/<head>:refs/heads/<branch>",
      "",
      "",
      "       git push uses:",
      "",
      "                   HEAD:refs/heads/<head>",
      "",
      "",
      "MERGE STRATEGIES",
      "       The merge mechanism (git-merge and git-pull commands) allows the",
      "       backend merge strategies to be chosen with -s option. Some strategies",
      "       can also take their own options, which can be passed by giving",
      "       -X<option> arguments to git-merge and/or git-pull.",
      "",
      "       resolve",
      "           This can only resolve two heads (i.e. the current branch and",
      "           another branch you pulled from) using a 3-way merge algorithm. It",
      "           tries to carefully detect criss-cross merge ambiguities and is",
      "           considered generally safe and fast.",
      "",
      "       recursive",
      "           This can only resolve two heads using a 3-way merge algorithm. When",
      "           there is more than one common ancestor that can be used for 3-way",
      "           merge, it creates a merged tree of the common ancestors and uses",
      "           that as the reference tree for the 3-way merge. This has been",
      "           reported to result in fewer merge conflicts without causing",
      "           mis-merges by tests done on actual merge commits taken from Linux",
      "           2.6 kernel development history. Additionally this can detect and",
      "           handle merges involving renames. This is the default merge strategy",
      "           when pulling or merging one branch.",
      "",
      "           The recursive strategy can take the following options:",
      "",
      "           ours",
      "               This option forces conflicting hunks to be auto-resolved",
      "               cleanly by favoring our version. Changes from the other tree",
      "               that do not conflict with our side are reflected to the merge",
      "               result. For a binary file, the entire contents are taken from",
      "               our side.",
      "",
      "               This should not be confused with the ours merge strategy, which",
      "               does not even look at what the other tree contains at all. It",
      "               discards everything the other tree did, declaring our history",
      "               contains all that happened in it.",
      "",
      "           theirs",
      "               This is the opposite of ours.",
      "",
      "           patience",
      "               With this option, merge-recursive spends a little extra time to",
      "               avoid mismerges that sometimes occur due to unimportant",
      "               matching lines (e.g., braces from distinct functions). Use this",
      "               when the branches to be merged have diverged wildly. See also",
      "               git-diff(1)--patience.",
      "",
      "           diff-algorithm=[patience|minimal|histogram|myers]",
      "               Tells merge-recursive to use a different diff algorithm, which",
      "               can help avoid mismerges that occur due to unimportant matching",
      "               lines (such as braces from distinct functions). See also git-",
      "               diff(1)--diff-algorithm.",
      "",
      "           ignore-space-change, ignore-all-space, ignore-space-at-eol",
      "               Treats lines with the indicated type of whitespace change as",
      "               unchanged for the sake of a three-way merge. Whitespace changes",
      "               mixed with other changes to a line are not ignored. See also",
      "               git-diff(1)-b, -w, and --ignore-space-at-eol.",
      "",
      "               ·   If their version only introduces whitespace changes to a",
      "                   line, our version is used;",
      "",
      "               ·   If our version introduces whitespace changes but their",
      "                   version includes a substantial change, their version is",
      "                   used;",
      "",
      "               ·   Otherwise, the merge proceeds in the usual way.",
      "",
      "           renormalize",
      "               This runs a virtual check-out and check-in of all three stages",
      "               of a file when resolving a three-way merge. This option is",
      "               meant to be used when merging branches with different clean",
      "               filters or end-of-line normalization rules. See \"Merging",
      "               branches with differing checkin/checkout attributes\" in",
      "               gitattributes(5) for details.",
      "",
      "           no-renormalize",
      "               Disables the renormalize option. This overrides the",
      "               merge.renormalize configuration variable.",
      "",
      "           rename-threshold=<n>",
      "               Controls the similarity threshold used for rename detection.",
      "               See also git-diff(1)-M.",
      "",
      "           subtree[=<path>]",
      "               This option is a more advanced form of subtree strategy, where",
      "               the strategy makes a guess on how two trees must be shifted to",
      "               match with each other when merging. Instead, the specified path",
      "               is prefixed (or stripped from the beginning) to make the shape",
      "               of two trees to match.",
      "",
      "       octopus",
      "           This resolves cases with more than two heads, but refuses to do a",
      "           complex merge that needs manual resolution. It is primarily meant",
      "           to be used for bundling topic branch heads together. This is the",
      "           default merge strategy when pulling or merging more than one",
      "           branch.",
      "",
      "       ours",
      "           This resolves any number of heads, but the resulting tree of the",
      "           merge is always that of the current branch head, effectively",
      "           ignoring all changes from all other branches. It is meant to be",
      "           used to supersede old development history of side branches. Note",
      "           that this is different from the -Xours option to the recursive",
      "           merge strategy.",
      "",
      "       subtree",
      "           This is a modified recursive strategy. When merging trees A and B,",
      "           if B corresponds to a subtree of A, B is first adjusted to match",
      "           the tree structure of A, instead of reading the trees at the same",
      "           level. This adjustment is also done to the common ancestor tree.",
      "",
      "       With the strategies that use 3-way merge (including the default,",
      "       recursive), if a change is made on both branches, but later reverted on",
      "       one of the branches, that change will be present in the merged result;",
      "       some people find this behavior confusing. It occurs because only the",
      "       heads and the merge base are considered when performing a merge, not",
      "       the individual commits. The merge algorithm therefore considers the",
      "       reverted change as no change at all, and substitutes the changed",
      "       version instead.",
      "",
      "DEFAULT BEHAVIOUR",
      "       Often people use git pull without giving any parameter. Traditionally,",
      "       this has been equivalent to saying git pull origin. However, when",
      "       configuration branch.<name>.remote is present while on branch <name>,",
      "       that value is used instead of origin.",
      "",
      "       In order to determine what URL to use to fetch from, the value of the",
      "       configuration remote.<origin>.url is consulted and if there is not any",
      "       such variable, the value on URL: ` line in `$GIT_DIR/remotes/<origin>",
      "       file is used.",
      "",
      "       In order to determine what remote branches to fetch (and optionally",
      "       store in the remote-tracking branches) when the command is run without",
      "       any refspec parameters on the command line, values of the configuration",
      "       variable remote.<origin>.fetch are consulted, and if there aren’t any,",
      "       $GIT_DIR/remotes/<origin> file is consulted and its `Pull: ` lines are",
      "       used. In addition to the refspec formats described in the OPTIONS",
      "       section, you can have a globbing refspec that looks like this:",
      "",
      "           refs/heads/*:refs/remotes/origin/*",
      "",
      "",
      "       A globbing refspec must have a non-empty RHS (i.e. must store what were",
      "       fetched in remote-tracking branches), and its LHS and RHS must end with",
      "       /*. The above specifies that all remote branches are tracked using",
      "       remote-tracking branches in refs/remotes/origin/ hierarchy under the",
      "       same name.",
      "",
      "       The rule to determine which remote branch to merge after fetching is a",
      "       bit involved, in order not to break backward compatibility.",
      "",
      "       If explicit refspecs were given on the command line of git pull, they",
      "       are all merged.",
      "",
      "       When no refspec was given on the command line, then git pull uses the",
      "       refspec from the configuration or $GIT_DIR/remotes/<origin>. In such",
      "       cases, the following rules apply:",
      "",
      "        1. If branch.<name>.merge configuration for the current branch <name>",
      "           exists, that is the name of the branch at the remote site that is",
      "           merged.",
      "",
      "        2. If the refspec is a globbing one, nothing is merged.",
      "",
      "        3. Otherwise the remote branch of the first refspec is merged.",
      "",
      "EXAMPLES",
      "       ·   Update the remote-tracking branches for the repository you cloned",
      "           from, then merge one of them into your current branch:",
      "",
      "               $ git pull, git pull origin",
      "",
      "           Normally the branch merged in is the HEAD of the remote repository,",
      "           but the choice is determined by the branch.<name>.remote and",
      "           branch.<name>.merge options; see git-config(1) for details.",
      "",
      "       ·   Merge into the current branch the remote branch next:",
      "",
      "               $ git pull origin next",
      "",
      "           This leaves a copy of next temporarily in FETCH_HEAD, but does not",
      "           update any remote-tracking branches. Using remote-tracking",
      "           branches, the same can be done by invoking fetch and merge:",
      "",
      "               $ git fetch origin",
      "               $ git merge origin/next",
      "",
      "",
      "       If you tried a pull which resulted in complex conflicts and would want",
      "       to start over, you can recover with git reset.",
      "",
      "BUGS",
      "       Using --recurse-submodules can only fetch new commits in already",
      "       checked out submodules right now. When e.g. upstream added a new",
      "       submodule in the just fetched commits of the superproject the submodule",
      "       itself can not be fetched, making it impossible to check out that",
      "       submodule later without having to do a fetch again. This is expected to",
      "       be fixed in a future Git version.",
      "",
      "SEE ALSO",
      "       git-fetch(1), git-merge(1), git-config(1)",
      "",
      "GIT",
      "       Part of the git(1) suite",
      "",
      "",
      "",
      "Git 1.9.1                         03/21/2016                       GIT-PULL(1)"
   };
   TStrStrVectPair gitPair("git-pull", strVect);
   m_gitCmdMap.insert(gitPair);
}

void GitJsonText::LoadGitStash()
{
   TStrVect strVect =
   {
      "GIT-STASH(1)                      Git Manual                      GIT-STASH(1)",
      "",
      "",
      "",
      "NAME",
      "       git-stash - Stash the changes in a dirty working directory away",
      "",
      "SYNOPSIS",
      "       git stash list [<options>]",
      "       git stash show [<stash>]",
      "       git stash drop [-q|--quiet] [<stash>]",
      "       git stash ( pop | apply ) [--index] [-q|--quiet] [<stash>]",
      "       git stash branch <branchname> [<stash>]",
      "       git stash [save [-p|--patch] [-k|--[no-]keep-index] [-q|--quiet]",
      "                    [-u|--include-untracked] [-a|--all] [<message>]]",
      "       git stash clear",
      "       git stash create [<message>]",
      "       git stash store [-m|--message <message>] [-q|--quiet] <commit>",
      "",
      "",
      "DESCRIPTION",
      "       Use git stash when you want to record the current state of the working",
      "       directory and the index, but want to go back to a clean working",
      "       directory. The command saves your local modifications away and reverts",
      "       the working directory to match the HEAD commit.",
      "",
      "       The modifications stashed away by this command can be listed with git",
      "       stash list, inspected with git stash show, and restored (potentially on",
      "       top of a different commit) with git stash apply. Calling git stash",
      "       without any arguments is equivalent to git stash save. A stash is by",
      "       default listed as \"WIP on branchname ...\", but you can give a more",
      "       descriptive message on the command line when you create one.",
      "",
      "       The latest stash you created is stored in refs/stash; older stashes are",
      "       found in the reflog of this reference and can be named using the usual",
      "       reflog syntax (e.g. stash@{0} is the most recently created stash,",
      "       stash@{1} is the one before it, stash@{2.hours.ago} is also possible).",
      "",
      "OPTIONS",
      "       save [-p|--patch] [--[no-]keep-index] [-u|--include-untracked]",
      "       [-a|--all] [-q|--quiet] [<message>]",
      "           Save your local modifications to a new stash, and run git reset",
      "           --hard to revert them. The <message> part is optional and gives the",
      "           description along with the stashed state. For quickly making a",
      "           snapshot, you can omit both \"save\" and <message>, but giving only",
      "           <message> does not trigger this action to prevent a misspelled",
      "           subcommand from making an unwanted stash.",
      "",
      "           If the --keep-index option is used, all changes already added to",
      "           the index are left intact.",
      "",
      "           If the --include-untracked option is used, all untracked files are",
      "           also stashed and then cleaned up with git clean, leaving the",
      "           working directory in a very clean state. If the --all option is",
      "           used instead then the ignored files are stashed and cleaned in",
      "           addition to the untracked files.",
      "",
      "           With --patch, you can interactively select hunks from the diff",
      "           between HEAD and the working tree to be stashed. The stash entry is",
      "           constructed such that its index state is the same as the index",
      "           state of your repository, and its worktree contains only the",
      "           changes you selected interactively. The selected changes are then",
      "           rolled back from your worktree. See the “Interactive Mode” section",
      "           of git-add(1) to learn how to operate the --patch mode.",
      "",
      "           The --patch option implies --keep-index. You can use",
      "           --no-keep-index to override this.",
      "",
      "       list [<options>]",
      "           List the stashes that you currently have. Each stash is listed with",
      "           its name (e.g.  stash@{0} is the latest stash, stash@{1} is the one",
      "           before, etc.), the name of the branch that was current when the",
      "           stash was made, and a short description of the commit the stash was",
      "           based on.",
      "",
      "               stash@{0}: WIP on submit: 6ebd0e2... Update git-stash documentation",
      "               stash@{1}: On master: 9cc0589... Add git-stash",
      "",
      "           The command takes options applicable to the git log command to",
      "           control what is shown and how. See git-log(1).",
      "",
      "       show [<stash>]",
      "           Show the changes recorded in the stash as a diff between the",
      "           stashed state and its original parent. When no <stash> is given,",
      "           shows the latest one. By default, the command shows the diffstat,",
      "           but it will accept any format known to git diff (e.g., git stash",
      "           show -p stash@{1} to view the second most recent stash in patch",
      "           form).",
      "",
      "       pop [--index] [-q|--quiet] [<stash>]",
      "           Remove a single stashed state from the stash list and apply it on",
      "           top of the current working tree state, i.e., do the inverse",
      "           operation of git stash save. The working directory must match the",
      "           index.",
      "",
      "           Applying the state can fail with conflicts; in this case, it is not",
      "           removed from the stash list. You need to resolve the conflicts by",
      "           hand and call git stash drop manually afterwards.",
      "",
      "           If the --index option is used, then tries to reinstate not only the",
      "           working tree’s changes, but also the index’s ones. However, this",
      "           can fail, when you have conflicts (which are stored in the index,",
      "           where you therefore can no longer apply the changes as they were",
      "           originally).",
      "",
      "           When no <stash> is given, stash@{0} is assumed, otherwise <stash>",
      "           must be a reference of the form stash@{<revision>}.",
      "",
      "       apply [--index] [-q|--quiet] [<stash>]",
      "           Like pop, but do not remove the state from the stash list. Unlike",
      "           pop, <stash> may be any commit that looks like a commit created by",
      "           stash save or stash create.",
      "",
      "       branch <branchname> [<stash>]",
      "           Creates and checks out a new branch named <branchname> starting",
      "           from the commit at which the <stash> was originally created,",
      "           applies the changes recorded in <stash> to the new working tree and",
      "           index. If that succeeds, and <stash> is a reference of the form",
      "           stash@{<revision>}, it then drops the <stash>. When no <stash> is",
      "           given, applies the latest one.",
      "",
      "           This is useful if the branch on which you ran git stash save has",
      "           changed enough that git stash apply fails due to conflicts. Since",
      "           the stash is applied on top of the commit that was HEAD at the time",
      "           git stash was run, it restores the originally stashed state with no",
      "           conflicts.",
      "",
      "       clear",
      "           Remove all the stashed states. Note that those states will then be",
      "           subject to pruning, and may be impossible to recover (see Examples",
      "           below for a possible strategy).",
      "",
      "       drop [-q|--quiet] [<stash>]",
      "           Remove a single stashed state from the stash list. When no <stash>",
      "           is given, it removes the latest one. i.e.  stash@{0}, otherwise",
      "           <stash> must be a valid stash log reference of the form",
      "           stash@{<revision>}.",
      "",
      "       create",
      "           Create a stash (which is a regular commit object) and return its",
      "           object name, without storing it anywhere in the ref namespace. This",
      "           is intended to be useful for scripts. It is probably not the",
      "           command you want to use; see \"save\" above.",
      "",
      "       store",
      "           Store a given stash created via git stash create (which is a",
      "           dangling merge commit) in the stash ref, updating the stash reflog.",
      "           This is intended to be useful for scripts. It is probably not the",
      "           command you want to use; see \"save\" above.",
      "",
      "DISCUSSION",
      "       A stash is represented as a commit whose tree records the state of the",
      "       working directory, and its first parent is the commit at HEAD when the",
      "       stash was created. The tree of the second parent records the state of",
      "       the index when the stash is made, and it is made a child of the HEAD",
      "       commit. The ancestry graph looks like this:",
      "",
      "                  .----W",
      "                 /    /",
      "           -----H----I",
      "",
      "       where H is the HEAD commit, I is a commit that records the state of the",
      "       index, and W is a commit that records the state of the working tree.",
      "",
      "EXAMPLES",
      "       Pulling into a dirty tree",
      "           When you are in the middle of something, you learn that there are",
      "           upstream changes that are possibly relevant to what you are doing.",
      "           When your local changes do not conflict with the changes in the",
      "           upstream, a simple git pull will let you move forward.",
      "",
      "           However, there are cases in which your local changes do conflict",
      "           with the upstream changes, and git pull refuses to overwrite your",
      "           changes. In such a case, you can stash your changes away, perform a",
      "           pull, and then unstash, like this:",
      "",
      "               $ git pull",
      "                ...",
      "               file foobar not up to date, cannot merge.",
      "               $ git stash",
      "               $ git pull",
      "               $ git stash pop",
      "",
      "",
      "       Interrupted workflow",
      "           When you are in the middle of something, your boss comes in and",
      "           demands that you fix something immediately. Traditionally, you",
      "           would make a commit to a temporary branch to store your changes",
      "           away, and return to your original branch to make the emergency fix,",
      "           like this:",
      "",
      "               # ... hack hack hack ...",
      "               $ git checkout -b my_wip",
      "               $ git commit -a -m \"WIP\"",
      "               $ git checkout master",
      "               $ edit emergency fix",
      "               $ git commit -a -m \"Fix in a hurry\"",
      "               $ git checkout my_wip",
      "               $ git reset --soft HEAD^",
      "               # ... continue hacking ...",
      "",
      "           You can use git stash to simplify the above, like this:",
      "",
      "               # ... hack hack hack ...",
      "               $ git stash",
      "               $ edit emergency fix",
      "               $ git commit -a -m \"Fix in a hurry\"",
      "               $ git stash pop",
      "               # ... continue hacking ...",
      "",
      "",
      "       Testing partial commits",
      "           You can use git stash save --keep-index when you want to make two",
      "           or more commits out of the changes in the work tree, and you want",
      "           to test each change before committing:",
      "",
      "               # ... hack hack hack ...",
      "               $ git add --patch foo            # add just first part to the index",
      "               $ git stash save --keep-index    # save all other changes to the stash",
      "               $ edit/build/test first part",
      "               $ git commit -m 'First part'     # commit fully tested change",
      "               $ git stash pop                  # prepare to work on all other changes",
      "               # ... repeat above five steps until one commit remains ...",
      "               $ edit/build/test remaining parts",
      "               $ git commit foo -m 'Remaining parts'",
      "",
      "",
      "       Recovering stashes that were cleared/dropped erroneously",
      "           If you mistakenly drop or clear stashes, they cannot be recovered",
      "           through the normal safety mechanisms. However, you can try the",
      "           following incantation to get a list of stashes that are still in",
      "           your repository, but not reachable any more:",
      "",
      "               git fsck --unreachable |",
      "               grep commit | cut -d\\  -f3 |",
      "               xargs git log --merges --no-walk --grep=WIP",
      "",
      "",
      "SEE ALSO",
      "       git-checkout(1), git-commit(1), git-reflog(1), git-reset(1)",
      "",
      "GIT",
      "       Part of the git(1) suite",
      "",
      "",
      "",
      "Git 1.9.1                         03/21/2016                      GIT-STASH(1)"
   };
   TStrStrVectPair gitPair("git-stash", strVect);
   m_gitCmdMap.insert(gitPair);
}

void GitJsonText::LoadGitPush()
{
   TStrVect strVect =
   {
      "GIT-PUSH(1)                       Git Manual                       GIT-PUSH(1)",
      "",
      "",
      "",
      "NAME",
      "       git-push - Update remote refs along with associated objects",
      "",
      "SYNOPSIS",
      "       git push [--all | --mirror | --tags] [--follow-tags] [-n | --dry-run] [--receive-pack=<git-receive-pack>]",
      "                  [--repo=<repository>] [-f | --force] [--prune] [-v | --verbose] [-u | --set-upstream]",
      "                  [--force-with-lease[=<refname>[:<expect>]]]",
      "                  [--no-verify] [<repository> [<refspec>...]]",
      "",
      "",
      "DESCRIPTION",
      "       Updates remote refs using local refs, while sending objects necessary",
      "       to complete the given refs.",
      "",
      "       You can make interesting things happen to a repository every time you",
      "       push into it, by setting up hooks there. See documentation for git-",
      "       receive-pack(1).",
      "",
      "       When the command line does not specify where to push with the",
      "       <repository> argument, branch.*.remote configuration for the current",
      "       branch is consulted to determine where to push. If the configuration is",
      "       missing, it defaults to origin.",
      "",
      "       When the command line does not specify what to push with <refspec>...",
      "       arguments or --all, --mirror, --tags options, the command finds the",
      "       default <refspec> by consulting remote.*.push configuration, and if it",
      "       is not found, honors push.default configuration to decide what to push",
      "       (See gitlink:git-config[1] for the meaning of push.default).",
      "",
      "OPTIONS",
      "       <repository>",
      "           The \"remote\" repository that is destination of a push operation.",
      "           This parameter can be either a URL (see the section GIT URLS below)",
      "           or the name of a remote (see the section REMOTES below).",
      "",
      "       <refspec>...",
      "           Specify what destination ref to update with what source object. The",
      "           format of a <refspec> parameter is an optional plus +, followed by",
      "           the source object <src>, followed by a colon :, followed by the",
      "           destination ref <dst>.",
      "",
      "           The <src> is often the name of the branch you would want to push,",
      "           but it can be any arbitrary \"SHA-1 expression\", such as master~4 or",
      "           HEAD (see gitrevisions(7)).",
      "",
      "           The <dst> tells which ref on the remote side is updated with this",
      "           push. Arbitrary expressions cannot be used here, an actual ref must",
      "           be named. If git push [<repository>] without any <refspec> argument",
      "           is set to update some ref at the destination with <src> with",
      "           remote.<repository>.push configuration variable, :<dst> part can be",
      "           omitted---such a push will update a ref that <src> normally updates",
      "           without any <refspec> on the command line. Otherwise, missing",
      "           :<dst> means to update the same ref as the <src>.",
      "",
      "           The object referenced by <src> is used to update the <dst>",
      "           reference on the remote side. By default this is only allowed if",
      "           <dst> is not a tag (annotated or lightweight), and then only if it",
      "           can fast-forward <dst>. By having the optional leading +, you can",
      "           tell Git to update the <dst> ref even if it is not allowed by",
      "           default (e.g., it is not a fast-forward.) This does not attempt to",
      "           merge <src> into <dst>. See EXAMPLES below for details.",
      "",
      "           tag <tag> means the same as refs/tags/<tag>:refs/tags/<tag>.",
      "",
      "           Pushing an empty <src> allows you to delete the <dst> ref from the",
      "           remote repository.",
      "",
      "           The special refspec : (or +: to allow non-fast-forward updates)",
      "           directs Git to push \"matching\" branches: for every branch that",
      "           exists on the local side, the remote side is updated if a branch of",
      "           the same name already exists on the remote side.",
      "",
      "       --all",
      "           Instead of naming each ref to push, specifies that all refs under",
      "           refs/heads/ be pushed.",
      "",
      "       --prune",
      "           Remove remote branches that don’t have a local counterpart. For",
      "           example a remote branch tmp will be removed if a local branch with",
      "           the same name doesn’t exist any more. This also respects refspecs,",
      "           e.g.  git push --prune remote refs/heads/*:refs/tmp/* would make",
      "           sure that remote refs/tmp/foo will be removed if refs/heads/foo",
      "           doesn’t exist.",
      "",
      "       --mirror",
      "           Instead of naming each ref to push, specifies that all refs under",
      "           refs/ (which includes but is not limited to refs/heads/,",
      "           refs/remotes/, and refs/tags/) be mirrored to the remote",
      "           repository. Newly created local refs will be pushed to the remote",
      "           end, locally updated refs will be force updated on the remote end,",
      "           and deleted refs will be removed from the remote end. This is the",
      "           default if the configuration option remote.<remote>.mirror is set.",
      "",
      "       -n, --dry-run",
      "           Do everything except actually send the updates.",
      "",
      "       --porcelain",
      "           Produce machine-readable output. The output status line for each",
      "           ref will be tab-separated and sent to stdout instead of stderr. The",
      "           full symbolic names of the refs will be given.",
      "",
      "       --delete",
      "           All listed refs are deleted from the remote repository. This is the",
      "           same as prefixing all refs with a colon.",
      "",
      "       --tags",
      "           All refs under refs/tags are pushed, in addition to refspecs",
      "           explicitly listed on the command line.",
      "",
      "       --follow-tags",
      "           Push all the refs that would be pushed without this option, and",
      "           also push annotated tags in refs/tags that are missing from the",
      "           remote but are pointing at commit-ish that are reachable from the",
      "           refs being pushed.",
      "",
      "       --receive-pack=<git-receive-pack>, --exec=<git-receive-pack>",
      "           Path to the git-receive-pack program on the remote end. Sometimes",
      "           useful when pushing to a remote repository over ssh, and you do not",
      "           have the program in a directory on the default $PATH.",
      "",
      "       --[no-]force-with-lease, --force-with-lease=<refname>,",
      "       --force-with-lease=<refname>:<expect>",
      "           Usually, \"git push\" refuses to update a remote ref that is not an",
      "           ancestor of the local ref used to overwrite it.",
      "",
      "           This option bypasses the check, but instead requires that the",
      "           current value of the ref to be the expected value. \"git push\" fails",
      "           otherwise.",
      "",
      "           Imagine that you have to rebase what you have already published.",
      "           You will have to bypass the \"must fast-forward\" rule in order to",
      "           replace the history you originally published with the rebased",
      "           history. If somebody else built on top of your original history",
      "           while you are rebasing, the tip of the branch at the remote may",
      "           advance with her commit, and blindly pushing with --force will lose",
      "           her work.",
      "",
      "           This option allows you to say that you expect the history you are",
      "           updating is what you rebased and want to replace. If the remote ref",
      "           still points at the commit you specified, you can be sure that no",
      "           other people did anything to the ref (it is like taking a \"lease\"",
      "           on the ref without explicitly locking it, and you update the ref",
      "           while making sure that your earlier \"lease\" is still valid).",
      "",
      "           --force-with-lease alone, without specifying the details, will",
      "           protect all remote refs that are going to be updated by requiring",
      "           their current value to be the same as the remote-tracking branch we",
      "           have for them, unless specified with a",
      "           --force-with-lease=<refname>:<expect> option that explicitly states",
      "           what the expected value is.",
      "",
      "           --force-with-lease=<refname>, without specifying the expected",
      "           value, will protect the named ref (alone), if it is going to be",
      "           updated, by requiring its current value to be the same as the",
      "           remote-tracking branch we have for it.",
      "",
      "           --force-with-lease=<refname>:<expect> will protect the named ref",
      "           (alone), if it is going to be updated, by requiring its current",
      "           value to be the same as the specified value <expect> (which is",
      "           allowed to be different from the remote-tracking branch we have for",
      "           the refname, or we do not even have to have such a remote-tracking",
      "           branch when this form is used).",
      "",
      "           Note that all forms other than",
      "           --force-with-lease=<refname>:<expect> that specifies the expected",
      "           current value of the ref explicitly are still experimental and",
      "           their semantics may change as we gain experience with this feature.",
      "",
      "           \"--no-force-with-lease\" will cancel all the previous",
      "           --force-with-lease on the command line.",
      "",
      "       -f, --force",
      "           Usually, the command refuses to update a remote ref that is not an",
      "           ancestor of the local ref used to overwrite it. Also, when",
      "           --force-with-lease option is used, the command refuses to update a",
      "           remote ref whose current value does not match what is expected.",
      "",
      "           This flag disables these checks, and can cause the remote",
      "           repository to lose commits; use it with care.",
      "",
      "           Note that --force applies to all the refs that are pushed, hence",
      "           using it with push.default set to matching or with multiple push",
      "           destinations configured with remote.*.push may overwrite refs other",
      "           than the current branch (including local refs that are strictly",
      "           behind their remote counterpart). To force a push to only one",
      "           branch, use a + in front of the refspec to push (e.g git push",
      "           origin +master to force a push to the master branch). See the",
      "           <refspec>...  section above for details.",
      "",
      "       --repo=<repository>",
      "           This option is only relevant if no <repository> argument is passed",
      "           in the invocation. In this case, git push derives the remote name",
      "           from the current branch: If it tracks a remote branch, then that",
      "           remote repository is pushed to. Otherwise, the name \"origin\" is",
      "           used. For this latter case, this option can be used to override the",
      "           name \"origin\". In other words, the difference between these two",
      "           commands",
      "",
      "               git push public         #1",
      "               git push --repo=public  #2",
      "",
      "           is that #1 always pushes to \"public\" whereas #2 pushes to \"public\"",
      "           only if the current branch does not track a remote branch. This is",
      "           useful if you write an alias or script around git push.",
      "",
      "       -u, --set-upstream",
      "           For every branch that is up to date or successfully pushed, add",
      "           upstream (tracking) reference, used by argument-less git-pull(1)",
      "           and other commands. For more information, see branch.<name>.merge",
      "           in git-config(1).",
      "",
      "       --[no-]thin",
      "           These options are passed to git-send-pack(1). A thin transfer",
      "           significantly reduces the amount of sent data when the sender and",
      "           receiver share many of the same objects in common. The default is",
      "           --thin.",
      "",
      "       -q, --quiet",
      "           Suppress all output, including the listing of updated refs, unless",
      "           an error occurs. Progress is not reported to the standard error",
      "           stream.",
      "",
      "       -v, --verbose",
      "           Run verbosely.",
      "",
      "       --progress",
      "           Progress status is reported on the standard error stream by default",
      "           when it is attached to a terminal, unless -q is specified. This",
      "           flag forces progress status even if the standard error stream is",
      "           not directed to a terminal.",
      "",
      "       --recurse-submodules=check|on-demand",
      "           Make sure all submodule commits used by the revisions to be pushed",
      "           are available on a remote-tracking branch. If check is used Git",
      "           will verify that all submodule commits that changed in the",
      "           revisions to be pushed are available on at least one remote of the",
      "           submodule. If any commits are missing the push will be aborted and",
      "           exit with non-zero status. If on-demand is used all submodules that",
      "           changed in the revisions to be pushed will be pushed. If on-demand",
      "           was not able to push all necessary revisions it will also be",
      "           aborted and exit with non-zero status.",
      "",
      "       --[no-]verify",
      "           Toggle the pre-push hook (see githooks(5)). The default is",
      "           --verify, giving the hook a chance to prevent the push. With",
      "           --no-verify, the hook is bypassed completely.",
      "",
      "GIT URLS",
      "       In general, URLs contain information about the transport protocol, the",
      "       address of the remote server, and the path to the repository. Depending",
      "       on the transport protocol, some of this information may be absent.",
      "",
      "       Git supports ssh, git, http, and https protocols (in addition, ftp, and",
      "       ftps can be used for fetching and rsync can be used for fetching and",
      "       pushing, but these are inefficient and deprecated; do not use them).",
      "",
      "       The native transport (i.e. git:// URL) does no authentication and",
      "       should be used with caution on unsecured networks.",
      "",
      "       The following syntaxes may be used with them:",
      "",
      "       ·   ssh://[user@]host.xz[:port]/path/to/repo.git/",
      "",
      "       ·   git://host.xz[:port]/path/to/repo.git/",
      "",
      "       ·   http[s]://host.xz[:port]/path/to/repo.git/",
      "",
      "       ·   ftp[s]://host.xz[:port]/path/to/repo.git/",
      "",
      "       ·   rsync://host.xz/path/to/repo.git/",
      "",
      "       An alternative scp-like syntax may also be used with the ssh protocol:",
      "",
      "       ·   [user@]host.xz:path/to/repo.git/",
      "",
      "       This syntax is only recognized if there are no slashes before the first",
      "       colon. This helps differentiate a local path that contains a colon. For",
      "       example the local path foo:bar could be specified as an absolute path",
      "       or ./foo:bar to avoid being misinterpreted as an ssh url.",
      "",
      "       The ssh and git protocols additionally support ~username expansion:",
      "",
      "       ·   ssh://[user@]host.xz[:port]/~[user]/path/to/repo.git/",
      "",
      "       ·   git://host.xz[:port]/~[user]/path/to/repo.git/",
      "",
      "       ·   [user@]host.xz:/~[user]/path/to/repo.git/",
      "",
      "       For local repositories, also supported by Git natively, the following",
      "       syntaxes may be used:",
      "",
      "       ·   /path/to/repo.git/",
      "",
      "       ·   file:///path/to/repo.git/",
      "",
      "       These two syntaxes are mostly equivalent, except when cloning, when the",
      "       former implies --local option. See git-clone(1) for details.",
      "",
      "       When Git doesn’t know how to handle a certain transport protocol, it",
      "       attempts to use the remote-<transport> remote helper, if one exists. To",
      "       explicitly request a remote helper, the following syntax may be used:",
      "",
      "       ·   <transport>::<address>",
      "",
      "       where <address> may be a path, a server and path, or an arbitrary",
      "       URL-like string recognized by the specific remote helper being invoked.",
      "       See gitremote-helpers(1) for details.",
      "",
      "       If there are a large number of similarly-named remote repositories and",
      "       you want to use a different format for them (such that the URLs you use",
      "       will be rewritten into URLs that work), you can create a configuration",
      "       section of the form:",
      "",
      "                   [url \"<actual url base>\"]",
      "                           insteadOf = <other url base>",
      "",
      "",
      "       For example, with this:",
      "",
      "                   [url \"git://git.host.xz/\"]",
      "                           insteadOf = host.xz:/path/to/",
      "                           insteadOf = work:",
      "",
      "",
      "       a URL like \"work:repo.git\" or like \"host.xz:/path/to/repo.git\" will be",
      "       rewritten in any context that takes a URL to be",
      "       \"git://git.host.xz/repo.git\".",
      "",
      "       If you want to rewrite URLs for push only, you can create a",
      "       configuration section of the form:",
      "",
      "                   [url \"<actual url base>\"]",
      "                           pushInsteadOf = <other url base>",
      "",
      "",
      "       For example, with this:",
      "",
      "                   [url \"ssh://example.org/\"]",
      "                           pushInsteadOf = git://example.org/",
      "",
      "",
      "       a URL like \"git://example.org/path/to/repo.git\" will be rewritten to",
      "       \"ssh://example.org/path/to/repo.git\" for pushes, but pulls will still",
      "       use the original URL.",
      "",
      "REMOTES",
      "       The name of one of the following can be used instead of a URL as",
      "       <repository> argument:",
      "",
      "       ·   a remote in the Git configuration file: $GIT_DIR/config,",
      "",
      "       ·   a file in the $GIT_DIR/remotes directory, or",
      "",
      "       ·   a file in the $GIT_DIR/branches directory.",
      "",
      "       All of these also allow you to omit the refspec from the command line",
      "       because they each contain a refspec which git will use by default.",
      "",
      "   Named remote in configuration file",
      "       You can choose to provide the name of a remote which you had previously",
      "       configured using git-remote(1), git-config(1) or even by a manual edit",
      "       to the $GIT_DIR/config file. The URL of this remote will be used to",
      "       access the repository. The refspec of this remote will be used by",
      "       default when you do not provide a refspec on the command line. The",
      "       entry in the config file would appear like this:",
      "",
      "                   [remote \"<name>\"]",
      "                           url = <url>",
      "                           pushurl = <pushurl>",
      "                           push = <refspec>",
      "                           fetch = <refspec>",
      "",
      "",
      "       The <pushurl> is used for pushes only. It is optional and defaults to",
      "       <url>.",
      "",
      "   Named file in $GIT_DIR/remotes",
      "       You can choose to provide the name of a file in $GIT_DIR/remotes. The",
      "       URL in this file will be used to access the repository. The refspec in",
      "       this file will be used as default when you do not provide a refspec on",
      "       the command line. This file should have the following format:",
      "",
      "                   URL: one of the above URL format",
      "                   Push: <refspec>",
      "                   Pull: <refspec>",
      "",
      "",
      "       Push: lines are used by git push and Pull: lines are used by git pull",
      "       and git fetch. Multiple Push: and Pull: lines may be specified for",
      "       additional branch mappings.",
      "",
      "   Named file in $GIT_DIR/branches",
      "       You can choose to provide the name of a file in $GIT_DIR/branches. The",
      "       URL in this file will be used to access the repository. This file",
      "       should have the following format:",
      "",
      "                   <url>#<head>",
      "",
      "",
      "       <url> is required; #<head> is optional.",
      "",
      "       Depending on the operation, git will use one of the following refspecs,",
      "       if you don’t provide one on the command line. <branch> is the name of",
      "       this file in $GIT_DIR/branches and <head> defaults to master.",
      "",
      "       git fetch uses:",
      "",
      "                   refs/heads/<head>:refs/heads/<branch>",
      "",
      "",
      "       git push uses:",
      "",
      "                   HEAD:refs/heads/<head>",
      "",
      "",
      "OUTPUT",
      "       The output of \"git push\" depends on the transport method used; this",
      "       section describes the output when pushing over the Git protocol (either",
      "       locally or via ssh).",
      "",
      "       The status of the push is output in tabular form, with each line",
      "       representing the status of a single ref. Each line is of the form:",
      "",
      "            <flag> <summary> <from> -> <to> (<reason>)",
      "",
      "",
      "       If --porcelain is used, then each line of the output is of the form:",
      "",
      "            <flag> \\t <from>:<to> \\t <summary> (<reason>)",
      "",
      "",
      "       The status of up-to-date refs is shown only if --porcelain or --verbose",
      "       option is used.",
      "",
      "       flag",
      "           A single character indicating the status of the ref:",
      "",
      "           (space)",
      "               for a successfully pushed fast-forward;",
      "",
      "           +",
      "               for a successful forced update;",
      "",
      "           -",
      "               for a successfully deleted ref;",
      "",
      "           *",
      "               for a successfully pushed new ref;",
      "",
      "           !",
      "               for a ref that was rejected or failed to push; and",
      "",
      "           =",
      "               for a ref that was up to date and did not need pushing.",
      "",
      "       summary",
      "           For a successfully pushed ref, the summary shows the old and new",
      "           values of the ref in a form suitable for using as an argument to",
      "           git log (this is <old>..<new> in most cases, and <old>...<new> for",
      "           forced non-fast-forward updates).",
      "",
      "           For a failed update, more details are given:",
      "",
      "           rejected",
      "               Git did not try to send the ref at all, typically because it is",
      "               not a fast-forward and you did not force the update.",
      "",
      "           remote rejected",
      "               The remote end refused the update. Usually caused by a hook on",
      "               the remote side, or because the remote repository has one of",
      "               the following safety options in effect:",
      "               receive.denyCurrentBranch (for pushes to the checked out",
      "               branch), receive.denyNonFastForwards (for forced",
      "               non-fast-forward updates), receive.denyDeletes or",
      "               receive.denyDeleteCurrent. See git-config(1).",
      "",
      "           remote failure",
      "               The remote end did not report the successful update of the ref,",
      "               perhaps because of a temporary error on the remote side, a",
      "               break in the network connection, or other transient error.",
      "",
      "       from",
      "           The name of the local ref being pushed, minus its refs/<type>/",
      "           prefix. In the case of deletion, the name of the local ref is",
      "           omitted.",
      "",
      "       to",
      "           The name of the remote ref being updated, minus its refs/<type>/",
      "           prefix.",
      "",
      "       reason",
      "           A human-readable explanation. In the case of successfully pushed",
      "           refs, no explanation is needed. For a failed ref, the reason for",
      "           failure is described.",
      "",
      "NOTE ABOUT FAST-FORWARDS",
      "       When an update changes a branch (or more in general, a ref) that used",
      "       to point at commit A to point at another commit B, it is called a",
      "       fast-forward update if and only if B is a descendant of A.",
      "",
      "       In a fast-forward update from A to B, the set of commits that the",
      "       original commit A built on top of is a subset of the commits the new",
      "       commit B builds on top of. Hence, it does not lose any history.",
      "",
      "       In contrast, a non-fast-forward update will lose history. For example,",
      "       suppose you and somebody else started at the same commit X, and you",
      "       built a history leading to commit B while the other person built a",
      "       history leading to commit A. The history looks like this:",
      "",
      "                 B",
      "                /",
      "            ---X---A",
      "",
      "",
      "       Further suppose that the other person already pushed changes leading to",
      "       A back to the original repository from which you two obtained the",
      "       original commit X.",
      "",
      "       The push done by the other person updated the branch that used to point",
      "       at commit X to point at commit A. It is a fast-forward.",
      "",
      "       But if you try to push, you will attempt to update the branch (that now",
      "       points at A) with commit B. This does not fast-forward. If you did so,",
      "       the changes introduced by commit A will be lost, because everybody will",
      "       now start building on top of B.",
      "",
      "       The command by default does not allow an update that is not a",
      "       fast-forward to prevent such loss of history.",
      "",
      "       If you do not want to lose your work (history from X to B) nor the work",
      "       by the other person (history from X to A), you would need to first",
      "       fetch the history from the repository, create a history that contains",
      "       changes done by both parties, and push the result back.",
      "",
      "       You can perform \"git pull\", resolve potential conflicts, and \"git push\"",
      "       the result. A \"git pull\" will create a merge commit C between commits A",
      "       and B.",
      "",
      "                 B---C",
      "                /   /",
      "            ---X---A",
      "",
      "",
      "       Updating A with the resulting merge commit will fast-forward and your",
      "       push will be accepted.",
      "",
      "       Alternatively, you can rebase your change between X and B on top of A,",
      "       with \"git pull --rebase\", and push the result back. The rebase will",
      "       create a new commit D that builds the change between X and B on top of",
      "       A.",
      "",
      "                 B   D",
      "                /   /",
      "            ---X---A",
      "",
      "",
      "       Again, updating A with this commit will fast-forward and your push will",
      "       be accepted.",
      "",
      "       There is another common situation where you may encounter",
      "       non-fast-forward rejection when you try to push, and it is possible",
      "       even when you are pushing into a repository nobody else pushes into.",
      "       After you push commit A yourself (in the first picture in this",
      "       section), replace it with \"git commit --amend\" to produce commit B, and",
      "       you try to push it out, because forgot that you have pushed A out",
      "       already. In such a case, and only if you are certain that nobody in the",
      "       meantime fetched your earlier commit A (and started building on top of",
      "       it), you can run \"git push --force\" to overwrite it. In other words,",
      "       \"git push --force\" is a method reserved for a case where you do mean to",
      "       lose history.",
      "",
      "EXAMPLES",
      "       git push",
      "           Works like git push <remote>, where <remote> is the current",
      "           branch’s remote (or origin, if no remote is configured for the",
      "           current branch).",
      "",
      "       git push origin",
      "           Without additional configuration, works like git push origin :.",
      "",
      "           The default behavior of this command when no <refspec> is given can",
      "           be configured by setting the push option of the remote, or the",
      "           push.default configuration variable.",
      "",
      "           For example, to default to pushing only the current branch to",
      "           origin use git config remote.origin.push HEAD. Any valid <refspec>",
      "           (like the ones in the examples below) can be configured as the",
      "           default for git push origin.",
      "",
      "       git push origin :",
      "           Push \"matching\" branches to origin. See <refspec> in the OPTIONS",
      "           section above for a description of \"matching\" branches.",
      "",
      "       git push origin master",
      "           Find a ref that matches master in the source repository (most",
      "           likely, it would find refs/heads/master), and update the same ref",
      "           (e.g.  refs/heads/master) in origin repository with it. If master",
      "           did not exist remotely, it would be created.",
      "",
      "       git push origin HEAD",
      "           A handy way to push the current branch to the same name on the",
      "           remote.",
      "",
      "       git push mothership master:satellite/master dev:satellite/dev",
      "           Use the source ref that matches master (e.g.  refs/heads/master) to",
      "           update the ref that matches satellite/master (most probably",
      "           refs/remotes/satellite/master) in the mothership repository; do the",
      "           same for dev and satellite/dev.",
      "",
      "           This is to emulate git fetch run on the mothership using git push",
      "           that is run in the opposite direction in order to integrate the",
      "           work done on satellite, and is often necessary when you can only",
      "           make connection in one way (i.e. satellite can ssh into mothership",
      "           but mothership cannot initiate connection to satellite because the",
      "           latter is behind a firewall or does not run sshd).",
      "",
      "           After running this git push on the satellite machine, you would ssh",
      "           into the mothership and run git merge there to complete the",
      "           emulation of git pull that were run on mothership to pull changes",
      "           made on satellite.",
      "",
      "       git push origin HEAD:master",
      "           Push the current branch to the remote ref matching master in the",
      "           origin repository. This form is convenient to push the current",
      "           branch without thinking about its local name.",
      "",
      "       git push origin master:refs/heads/experimental",
      "           Create the branch experimental in the origin repository by copying",
      "           the current master branch. This form is only needed to create a new",
      "           branch or tag in the remote repository when the local name and the",
      "           remote name are different; otherwise, the ref name on its own will",
      "           work.",
      "",
      "       git push origin :experimental",
      "           Find a ref that matches experimental in the origin repository (e.g.",
      "           refs/heads/experimental), and delete it.",
      "",
      "       git push origin +dev:master",
      "           Update the origin repository’s master branch with the dev branch,",
      "           allowing non-fast-forward updates.  This can leave unreferenced",
      "           commits dangling in the origin repository.  Consider the following",
      "           situation, where a fast-forward is not possible:",
      "",
      "                           o---o---o---A---B  origin/master",
      "                                    \\",
      "                                     X---Y---Z  dev",
      "",
      "           The above command would change the origin repository to",
      "",
      "                                     A---B  (unnamed branch)",
      "                                    /",
      "                           o---o---o---X---Y---Z  master",
      "",
      "           Commits A and B would no longer belong to a branch with a symbolic",
      "           name, and so would be unreachable. As such, these commits would be",
      "           removed by a git gc command on the origin repository.",
      "",
      "GIT",
      "       Part of the git(1) suite",
      "",
      "",
      "",
      "Git 1.9.1                         03/21/2016                       GIT-PUSH(1)"
   };
   TStrStrVectPair gitPair("git-push", strVect);
   m_gitCmdMap.insert(gitPair);
}

void GitJsonText::LoadGitMerge()
{
   TStrVect strVect =
   {
      "GIT-MERGE(1)                      Git Manual                      GIT-MERGE(1)",
      "",
      "",
      "",
      "NAME",
      "       git-merge - Join two or more development histories together",
      "",
      "SYNOPSIS",
      "       git merge [-n] [--stat] [--no-commit] [--squash] [--[no-]edit]",
      "               [-s <strategy>] [-X <strategy-option>] [-S[<keyid>]]",
      "               [--[no-]rerere-autoupdate] [-m <msg>] [<commit>...]",
      "       git merge <msg> HEAD <commit>...",
      "       git merge --abort",
      "",
      "",
      "DESCRIPTION",
      "       Incorporates changes from the named commits (since the time their",
      "       histories diverged from the current branch) into the current branch.",
      "       This command is used by git pull to incorporate changes from another",
      "       repository and can be used by hand to merge changes from one branch",
      "       into another.",
      "",
      "       Assume the following history exists and the current branch is \"master\":",
      "",
      "                     A---B---C topic",
      "                    /",
      "               D---E---F---G master",
      "",
      "",
      "       Then \"git merge topic\" will replay the changes made on the topic branch",
      "       since it diverged from master (i.e., E) until its current commit (C) on",
      "       top of master, and record the result in a new commit along with the",
      "       names of the two parent commits and a log message from the user",
      "       describing the changes.",
      "",
      "                     A---B---C topic",
      "                    /         \\",
      "               D---E---F---G---H master",
      "",
      "",
      "       The second syntax (<msg> HEAD <commit>...) is supported for historical",
      "       reasons. Do not use it from the command line or in new scripts. It is",
      "       the same as git merge -m <msg> <commit>....",
      "",
      "       The third syntax (\"git merge --abort\") can only be run after the merge",
      "       has resulted in conflicts. git merge --abort will abort the merge",
      "       process and try to reconstruct the pre-merge state. However, if there",
      "       were uncommitted changes when the merge started (and especially if",
      "       those changes were further modified after the merge was started), git",
      "       merge --abort will in some cases be unable to reconstruct the original",
      "       (pre-merge) changes. Therefore:",
      "",
      "       Warning: Running git merge with non-trivial uncommitted changes is",
      "       discouraged: while possible, it may leave you in a state that is hard",
      "       to back out of in the case of a conflict.",
      "",
      "OPTIONS",
      "       --commit, --no-commit",
      "           Perform the merge and commit the result. This option can be used to",
      "           override --no-commit.",
      "",
      "           With --no-commit perform the merge but pretend the merge failed and",
      "           do not autocommit, to give the user a chance to inspect and further",
      "           tweak the merge result before committing.",
      "",
      "       --edit, -e, --no-edit",
      "           Invoke an editor before committing successful mechanical merge to",
      "           further edit the auto-generated merge message, so that the user can",
      "           explain and justify the merge. The --no-edit option can be used to",
      "           accept the auto-generated message (this is generally discouraged).",
      "           The --edit (or -e) option is still useful if you are giving a draft",
      "           message with the -m option from the command line and want to edit",
      "           it in the editor.",
      "",
      "           Older scripts may depend on the historical behaviour of not",
      "           allowing the user to edit the merge log message. They will see an",
      "           editor opened when they run git merge. To make it easier to adjust",
      "           such scripts to the updated behaviour, the environment variable",
      "           GIT_MERGE_AUTOEDIT can be set to no at the beginning of them.",
      "",
      "       --ff",
      "           When the merge resolves as a fast-forward, only update the branch",
      "           pointer, without creating a merge commit. This is the default",
      "           behavior.",
      "",
      "       --no-ff",
      "           Create a merge commit even when the merge resolves as a",
      "           fast-forward. This is the default behaviour when merging an",
      "           annotated (and possibly signed) tag.",
      "",
      "       --ff-only",
      "           Refuse to merge and exit with a non-zero status unless the current",
      "           HEAD is already up-to-date or the merge can be resolved as a",
      "           fast-forward.",
      "",
      "       --log[=<n>], --no-log",
      "           In addition to branch names, populate the log message with one-line",
      "           descriptions from at most <n> actual commits that are being merged.",
      "           See also git-fmt-merge-msg(1).",
      "",
      "           With --no-log do not list one-line descriptions from the actual",
      "           commits being merged.",
      "",
      "       --stat, -n, --no-stat",
      "           Show a diffstat at the end of the merge. The diffstat is also",
      "           controlled by the configuration option merge.stat.",
      "",
      "           With -n or --no-stat do not show a diffstat at the end of the",
      "           merge.",
      "",
      "       --squash, --no-squash",
      "           Produce the working tree and index state as if a real merge",
      "           happened (except for the merge information), but do not actually",
      "           make a commit or move the HEAD, nor record $GIT_DIR/MERGE_HEAD to",
      "           cause the next git commit command to create a merge commit. This",
      "           allows you to create a single commit on top of the current branch",
      "           whose effect is the same as merging another branch (or more in case",
      "           of an octopus).",
      "",
      "           With --no-squash perform the merge and commit the result. This",
      "           option can be used to override --squash.",
      "",
      "       -s <strategy>, --strategy=<strategy>",
      "           Use the given merge strategy; can be supplied more than once to",
      "           specify them in the order they should be tried. If there is no -s",
      "           option, a built-in list of strategies is used instead (git",
      "           merge-recursive when merging a single head, git merge-octopus",
      "           otherwise).",
      "",
      "       -X <option>, --strategy-option=<option>",
      "           Pass merge strategy specific option through to the merge strategy.",
      "",
      "       --verify-signatures, --no-verify-signatures",
      "           Verify that the commits being merged have good and trusted GPG",
      "           signatures and abort the merge in case they do not.",
      "",
      "       --summary, --no-summary",
      "           Synonyms to --stat and --no-stat; these are deprecated and will be",
      "           removed in the future.",
      "",
      "       -q, --quiet",
      "           Operate quietly. Implies --no-progress.",
      "",
      "       -v, --verbose",
      "           Be verbose.",
      "",
      "       --progress, --no-progress",
      "           Turn progress on/off explicitly. If neither is specified, progress",
      "           is shown if standard error is connected to a terminal. Note that",
      "           not all merge strategies may support progress reporting.",
      "",
      "       -S[<keyid>], --gpg-sign[=<keyid>]",
      "           GPG-sign the resulting merge commit.",
      "",
      "       -m <msg>",
      "           Set the commit message to be used for the merge commit (in case one",
      "           is created).",
      "",
      "           If --log is specified, a shortlog of the commits being merged will",
      "           be appended to the specified message.",
      "",
      "           The git fmt-merge-msg command can be used to give a good default",
      "           for automated git merge invocations.",
      "",
      "       --[no-]rerere-autoupdate",
      "           Allow the rerere mechanism to update the index with the result of",
      "           auto-conflict resolution if possible.",
      "",
      "       --abort",
      "           Abort the current conflict resolution process, and try to",
      "           reconstruct the pre-merge state.",
      "",
      "           If there were uncommitted worktree changes present when the merge",
      "           started, git merge --abort will in some cases be unable to",
      "           reconstruct these changes. It is therefore recommended to always",
      "           commit or stash your changes before running git merge.",
      "",
      "           git merge --abort is equivalent to git reset --merge when",
      "           MERGE_HEAD is present.",
      "",
      "       <commit>...",
      "           Commits, usually other branch heads, to merge into our branch.",
      "           Specifying more than one commit will create a merge with more than",
      "           two parents (affectionately called an Octopus merge).",
      "",
      "           If no commit is given from the command line, and if",
      "           merge.defaultToUpstream configuration variable is set, merge the",
      "           remote-tracking branches that the current branch is configured to",
      "           use as its upstream. See also the configuration section of this",
      "           manual page.",
      "",
      "PRE-MERGE CHECKS",
      "       Before applying outside changes, you should get your own work in good",
      "       shape and committed locally, so it will not be clobbered if there are",
      "       conflicts. See also git-stash(1). git pull and git merge will stop",
      "       without doing anything when local uncommitted changes overlap with",
      "       files that git pull/git merge may need to update.",
      "",
      "       To avoid recording unrelated changes in the merge commit, git pull and",
      "       git merge will also abort if there are any changes registered in the",
      "       index relative to the HEAD commit. (One exception is when the changed",
      "       index entries are in the state that would result from the merge",
      "       already.)",
      "",
      "       If all named commits are already ancestors of HEAD, git merge will exit",
      "       early with the message \"Already up-to-date.\"",
      "",
      "FAST-FORWARD MERGE",
      "       Often the current branch head is an ancestor of the named commit. This",
      "       is the most common case especially when invoked from git pull: you are",
      "       tracking an upstream repository, you have committed no local changes,",
      "       and now you want to update to a newer upstream revision. In this case,",
      "       a new commit is not needed to store the combined history; instead, the",
      "       HEAD (along with the index) is updated to point at the named commit,",
      "       without creating an extra merge commit.",
      "",
      "       This behavior can be suppressed with the --no-ff option.",
      "",
      "TRUE MERGE",
      "       Except in a fast-forward merge (see above), the branches to be merged",
      "       must be tied together by a merge commit that has both of them as its",
      "       parents.",
      "",
      "       A merged version reconciling the changes from all branches to be merged",
      "       is committed, and your HEAD, index, and working tree are updated to it.",
      "       It is possible to have modifications in the working tree as long as",
      "       they do not overlap; the update will preserve them.",
      "",
      "       When it is not obvious how to reconcile the changes, the following",
      "       happens:",
      "",
      "        1. The HEAD pointer stays the same.",
      "",
      "        2. The MERGE_HEAD ref is set to point to the other branch head.",
      "",
      "        3. Paths that merged cleanly are updated both in the index file and in",
      "           your working tree.",
      "",
      "        4. For conflicting paths, the index file records up to three versions:",
      "           stage 1 stores the version from the common ancestor, stage 2 from",
      "           HEAD, and stage 3 from MERGE_HEAD (you can inspect the stages with",
      "           git ls-files -u). The working tree files contain the result of the",
      "           \"merge\" program; i.e. 3-way merge results with familiar conflict",
      "           markers <<<===>>>.",
      "",
      "        5. No other changes are made. In particular, the local modifications",
      "           you had before you started merge will stay the same and the index",
      "           entries for them stay as they were, i.e. matching HEAD.",
      "",
      "       If you tried a merge which resulted in complex conflicts and want to",
      "       start over, you can recover with git merge --abort.",
      "",
      "MERGING TAG",
      "       When merging an annotated (and possibly signed) tag, Git always creates",
      "       a merge commit even if a fast-forward merge is possible, and the commit",
      "       message template is prepared with the tag message. Additionally, if the",
      "       tag is signed, the signature check is reported as a comment in the",
      "       message template. See also git-tag(1).",
      "",
      "       When you want to just integrate with the work leading to the commit",
      "       that happens to be tagged, e.g. synchronizing with an upstream release",
      "       point, you may not want to make an unnecessary merge commit.",
      "",
      "       In such a case, you can \"unwrap\" the tag yourself before feeding it to",
      "       git merge, or pass --ff-only when you do not have any work on your own.",
      "       e.g.",
      "",
      "           git fetch origin",
      "           git merge v1.2.3^0",
      "           git merge --ff-only v1.2.3",
      "",
      "",
      "HOW CONFLICTS ARE PRESENTED",
      "       During a merge, the working tree files are updated to reflect the",
      "       result of the merge. Among the changes made to the common ancestor’s",
      "       version, non-overlapping ones (that is, you changed an area of the file",
      "       while the other side left that area intact, or vice versa) are",
      "       incorporated in the final result verbatim. When both sides made changes",
      "       to the same area, however, Git cannot randomly pick one side over the",
      "       other, and asks you to resolve it by leaving what both sides did to",
      "       that area.",
      "",
      "       By default, Git uses the same style as the one used by the \"merge\"",
      "       program from the RCS suite to present such a conflicted hunk, like",
      "       this:",
      "",
      "           Here are lines that are either unchanged from the common",
      "           ancestor, or cleanly resolved because only one side changed.",
      "           <<<<<<< yours:sample.txt",
      "           Conflict resolution is hard;",
      "           let's go shopping.",
      "           =======",
      "           Git makes conflict resolution easy.",
      "           >>>>>>> theirs:sample.txt",
      "           And here is another line that is cleanly resolved or unmodified.",
      "",
      "",
      "       The area where a pair of conflicting changes happened is marked with",
      "       markers <<<<<<<, =======, and >>>>>>>. The part before the ======= is",
      "       typically your side, and the part afterwards is typically their side.",
      "",
      "       The default format does not show what the original said in the",
      "       conflicting area. You cannot tell how many lines are deleted and",
      "       replaced with Barbie’s remark on your side. The only thing you can tell",
      "       is that your side wants to say it is hard and you’d prefer to go",
      "       shopping, while the other side wants to claim it is easy.",
      "",
      "       An alternative style can be used by setting the \"merge.conflictstyle\"",
      "       configuration variable to \"diff3\". In \"diff3\" style, the above conflict",
      "       may look like this:",
      "",
      "           Here are lines that are either unchanged from the common",
      "           ancestor, or cleanly resolved because only one side changed.",
      "           <<<<<<< yours:sample.txt",
      "           Conflict resolution is hard;",
      "           let's go shopping.",
      "           |||||||",
      "           Conflict resolution is hard.",
      "           =======",
      "           Git makes conflict resolution easy.",
      "           >>>>>>> theirs:sample.txt",
      "           And here is another line that is cleanly resolved or unmodified.",
      "",
      "",
      "       In addition to the <<<<<<<, =======, and >>>>>>> markers, it uses",
      "       another ||||||| marker that is followed by the original text. You can",
      "       tell that the original just stated a fact, and your side simply gave in",
      "       to that statement and gave up, while the other side tried to have a",
      "       more positive attitude. You can sometimes come up with a better",
      "       resolution by viewing the original.",
      "",
      "HOW TO RESOLVE CONFLICTS",
      "       After seeing a conflict, you can do two things:",
      "",
      "       ·   Decide not to merge. The only clean-ups you need are to reset the",
      "           index file to the HEAD commit to reverse 2. and to clean up working",
      "           tree changes made by 2. and 3.; git merge --abort can be used for",
      "           this.",
      "",
      "       ·   Resolve the conflicts. Git will mark the conflicts in the working",
      "           tree. Edit the files into shape and git add them to the index. Use",
      "           git commit to seal the deal.",
      "",
      "       You can work through the conflict with a number of tools:",
      "",
      "       ·   Use a mergetool.  git mergetool to launch a graphical mergetool",
      "           which will work you through the merge.",
      "",
      "       ·   Look at the diffs.  git diff will show a three-way diff,",
      "           highlighting changes from both the HEAD and MERGE_HEAD versions.",
      "",
      "       ·   Look at the diffs from each branch.  git log --merge -p <path> will",
      "           show diffs first for the HEAD version and then the MERGE_HEAD",
      "           version.",
      "",
      "       ·   Look at the originals.  git show :1:filename shows the common",
      "           ancestor, git show :2:filename shows the HEAD version, and git show",
      "           :3:filename shows the MERGE_HEAD version.",
      "",
      "EXAMPLES",
      "       ·   Merge branches fixes and enhancements on top of the current branch,",
      "           making an octopus merge:",
      "",
      "               $ git merge fixes enhancements",
      "",
      "",
      "       ·   Merge branch obsolete into the current branch, using ours merge",
      "           strategy:",
      "",
      "               $ git merge -s ours obsolete",
      "",
      "",
      "       ·   Merge branch maint into the current branch, but do not make a new",
      "           commit automatically:",
      "",
      "               $ git merge --no-commit maint",
      "",
      "           This can be used when you want to include further changes to the",
      "           merge, or want to write your own merge commit message.",
      "",
      "           You should refrain from abusing this option to sneak substantial",
      "           changes into a merge commit. Small fixups like bumping",
      "           release/version name would be acceptable.",
      "",
      "MERGE STRATEGIES",
      "       The merge mechanism (git-merge and git-pull commands) allows the",
      "       backend merge strategies to be chosen with -s option. Some strategies",
      "       can also take their own options, which can be passed by giving",
      "       -X<option> arguments to git-merge and/or git-pull.",
      "",
      "       resolve",
      "           This can only resolve two heads (i.e. the current branch and",
      "           another branch you pulled from) using a 3-way merge algorithm. It",
      "           tries to carefully detect criss-cross merge ambiguities and is",
      "           considered generally safe and fast.",
      "",
      "       recursive",
      "           This can only resolve two heads using a 3-way merge algorithm. When",
      "           there is more than one common ancestor that can be used for 3-way",
      "           merge, it creates a merged tree of the common ancestors and uses",
      "           that as the reference tree for the 3-way merge. This has been",
      "           reported to result in fewer merge conflicts without causing",
      "           mis-merges by tests done on actual merge commits taken from Linux",
      "           2.6 kernel development history. Additionally this can detect and",
      "           handle merges involving renames. This is the default merge strategy",
      "           when pulling or merging one branch.",
      "",
      "           The recursive strategy can take the following options:",
      "",
      "           ours",
      "               This option forces conflicting hunks to be auto-resolved",
      "               cleanly by favoring our version. Changes from the other tree",
      "               that do not conflict with our side are reflected to the merge",
      "               result. For a binary file, the entire contents are taken from",
      "               our side.",
      "",
      "               This should not be confused with the ours merge strategy, which",
      "               does not even look at what the other tree contains at all. It",
      "               discards everything the other tree did, declaring our history",
      "               contains all that happened in it.",
      "",
      "           theirs",
      "               This is the opposite of ours.",
      "",
      "           patience",
      "               With this option, merge-recursive spends a little extra time to",
      "               avoid mismerges that sometimes occur due to unimportant",
      "               matching lines (e.g., braces from distinct functions). Use this",
      "               when the branches to be merged have diverged wildly. See also",
      "               git-diff(1)--patience.",
      "",
      "           diff-algorithm=[patience|minimal|histogram|myers]",
      "               Tells merge-recursive to use a different diff algorithm, which",
      "               can help avoid mismerges that occur due to unimportant matching",
      "               lines (such as braces from distinct functions). See also git-",
      "               diff(1)--diff-algorithm.",
      "",
      "           ignore-space-change, ignore-all-space, ignore-space-at-eol",
      "               Treats lines with the indicated type of whitespace change as",
      "               unchanged for the sake of a three-way merge. Whitespace changes",
      "               mixed with other changes to a line are not ignored. See also",
      "               git-diff(1)-b, -w, and --ignore-space-at-eol.",
      "",
      "               ·   If their version only introduces whitespace changes to a",
      "                   line, our version is used;",
      "",
      "               ·   If our version introduces whitespace changes but their",
      "                   version includes a substantial change, their version is",
      "                   used;",
      "",
      "               ·   Otherwise, the merge proceeds in the usual way.",
      "",
      "           renormalize",
      "               This runs a virtual check-out and check-in of all three stages",
      "               of a file when resolving a three-way merge. This option is",
      "               meant to be used when merging branches with different clean",
      "               filters or end-of-line normalization rules. See \"Merging",
      "               branches with differing checkin/checkout attributes\" in",
      "               gitattributes(5) for details.",
      "",
      "           no-renormalize",
      "               Disables the renormalize option. This overrides the",
      "               merge.renormalize configuration variable.",
      "",
      "           rename-threshold=<n>",
      "               Controls the similarity threshold used for rename detection.",
      "               See also git-diff(1)-M.",
      "",
      "           subtree[=<path>]",
      "               This option is a more advanced form of subtree strategy, where",
      "               the strategy makes a guess on how two trees must be shifted to",
      "               match with each other when merging. Instead, the specified path",
      "               is prefixed (or stripped from the beginning) to make the shape",
      "               of two trees to match.",
      "",
      "       octopus",
      "           This resolves cases with more than two heads, but refuses to do a",
      "           complex merge that needs manual resolution. It is primarily meant",
      "           to be used for bundling topic branch heads together. This is the",
      "           default merge strategy when pulling or merging more than one",
      "           branch.",
      "",
      "       ours",
      "           This resolves any number of heads, but the resulting tree of the",
      "           merge is always that of the current branch head, effectively",
      "           ignoring all changes from all other branches. It is meant to be",
      "           used to supersede old development history of side branches. Note",
      "           that this is different from the -Xours option to the recursive",
      "           merge strategy.",
      "",
      "       subtree",
      "           This is a modified recursive strategy. When merging trees A and B,",
      "           if B corresponds to a subtree of A, B is first adjusted to match",
      "           the tree structure of A, instead of reading the trees at the same",
      "           level. This adjustment is also done to the common ancestor tree.",
      "",
      "       With the strategies that use 3-way merge (including the default,",
      "       recursive), if a change is made on both branches, but later reverted on",
      "       one of the branches, that change will be present in the merged result;",
      "       some people find this behavior confusing. It occurs because only the",
      "       heads and the merge base are considered when performing a merge, not",
      "       the individual commits. The merge algorithm therefore considers the",
      "       reverted change as no change at all, and substitutes the changed",
      "       version instead.",
      "",
      "CONFIGURATION",
      "       merge.conflictstyle",
      "           Specify the style in which conflicted hunks are written out to",
      "           working tree files upon merge. The default is \"merge\", which shows",
      "           a <<<<<<< conflict marker, changes made by one side, a =======",
      "           marker, changes made by the other side, and then a >>>>>>> marker.",
      "           An alternate style, \"diff3\", adds a ||||||| marker and the original",
      "           text before the ======= marker.",
      "",
      "       merge.defaultToUpstream",
      "           If merge is called without any commit argument, merge the upstream",
      "           branches configured for the current branch by using their last",
      "           observed values stored in their remote-tracking branches. The",
      "           values of the branch.<current branch>.merge that name the branches",
      "           at the remote named by branch.<current branch>.remote are",
      "           consulted, and then they are mapped via remote.<remote>.fetch to",
      "           their corresponding remote-tracking branches, and the tips of these",
      "           tracking branches are merged.",
      "",
      "       merge.ff",
      "           By default, Git does not create an extra merge commit when merging",
      "           a commit that is a descendant of the current commit. Instead, the",
      "           tip of the current branch is fast-forwarded. When set to false,",
      "           this variable tells Git to create an extra merge commit in such a",
      "           case (equivalent to giving the --no-ff option from the command",
      "           line). When set to only, only such fast-forward merges are allowed",
      "           (equivalent to giving the --ff-only option from the command line).",
      "",
      "       merge.log",
      "           In addition to branch names, populate the log message with at most",
      "           the specified number of one-line descriptions from the actual",
      "           commits that are being merged. Defaults to false, and true is a",
      "           synonym for 20.",
      "",
      "       merge.renameLimit",
      "           The number of files to consider when performing rename detection",
      "           during a merge; if not specified, defaults to the value of",
      "           diff.renameLimit.",
      "",
      "       merge.renormalize",
      "           Tell Git that canonical representation of files in the repository",
      "           has changed over time (e.g. earlier commits record text files with",
      "           CRLF line endings, but recent ones use LF line endings). In such a",
      "           repository, Git can convert the data recorded in commits to a",
      "           canonical form before performing a merge to reduce unnecessary",
      "           conflicts. For more information, see section \"Merging branches with",
      "           differing checkin/checkout attributes\" in gitattributes(5).",
      "",
      "       merge.stat",
      "           Whether to print the diffstat between ORIG_HEAD and the merge",
      "           result at the end of the merge. True by default.",
      "",
      "       merge.tool",
      "           Controls which merge tool is used by git-mergetool(1). The list",
      "           below shows the valid built-in values. Any other value is treated",
      "           as a custom merge tool and requires that a corresponding",
      "           mergetool.<tool>.cmd variable is defined.",
      "",
      "           ·   araxis",
      "",
      "           ·   bc3",
      "",
      "           ·   codecompare",
      "",
      "           ·   deltawalker",
      "",
      "           ·   diffmerge",
      "",
      "           ·   diffuse",
      "",
      "           ·   ecmerge",
      "",
      "           ·   emerge",
      "",
      "           ·   gvimdiff",
      "",
      "           ·   gvimdiff2",
      "",
      "           ·   kdiff3",
      "",
      "           ·   meld",
      "",
      "           ·   opendiff",
      "",
      "           ·   p4merge",
      "",
      "           ·   tkdiff",
      "",
      "           ·   tortoisemerge",
      "",
      "           ·   vimdiff",
      "",
      "           ·   vimdiff2",
      "",
      "           ·   xxdiff",
      "",
      "       merge.verbosity",
      "           Controls the amount of output shown by the recursive merge",
      "           strategy. Level 0 outputs nothing except a final error message if",
      "           conflicts were detected. Level 1 outputs only conflicts, 2 outputs",
      "           conflicts and file changes. Level 5 and above outputs debugging",
      "           information. The default is level 2. Can be overridden by the",
      "           GIT_MERGE_VERBOSITY environment variable.",
      "",
      "       merge.<driver>.name",
      "           Defines a human-readable name for a custom low-level merge driver.",
      "           See gitattributes(5) for details.",
      "",
      "       merge.<driver>.driver",
      "           Defines the command that implements a custom low-level merge",
      "           driver. See gitattributes(5) for details.",
      "",
      "       merge.<driver>.recursive",
      "           Names a low-level merge driver to be used when performing an",
      "           internal merge between common ancestors. See gitattributes(5) for",
      "           details.",
      "",
      "       branch.<name>.mergeoptions",
      "           Sets default options for merging into branch <name>. The syntax and",
      "           supported options are the same as those of git merge, but option",
      "           values containing whitespace characters are currently not",
      "           supported.",
      "",
      "SEE ALSO",
      "       git-fmt-merge-msg(1), git-pull(1), gitattributes(5), git-reset(1), git-",
      "       diff(1), git-ls-files(1), git-add(1), git-rm(1), git-mergetool(1)",
      "",
      "GIT",
      "       Part of the git(1) suite",
      "",
      "",
      "",
      "Git 1.9.1                         03/21/2016                      GIT-MERGE(1)"
   };
   TStrStrVectPair gitPair("git-merge", strVect);
   m_gitCmdMap.insert(gitPair);
}

void GitJsonText::LoadGitBranch()
{
   TStrVect strVect =
   {
      "GIT-BRANCH(1)                     Git Manual                     GIT-BRANCH(1)",
      "",
      "",
      "",
      "NAME",
      "       git-branch - List, create, or delete branches",
      "",
      "SYNOPSIS",
      "       git branch [--color[=<when>] | --no-color] [-r | -a]",
      "               [--list] [-v [--abbrev=<length> | --no-abbrev]]",
      "               [--column[=<options>] | --no-column]",
      "               [(--merged | --no-merged | --contains) [<commit>]] [<pattern>...]",
      "       git branch [--set-upstream | --track | --no-track] [-l] [-f] <branchname> [<start-point>]",
      "       git branch (--set-upstream-to=<upstream> | -u <upstream>) [<branchname>]",
      "       git branch --unset-upstream [<branchname>]",
      "       git branch (-m | -M) [<oldbranch>] <newbranch>",
      "       git branch (-d | -D) [-r] <branchname>...",
      "       git branch --edit-description [<branchname>]",
      "",
      "",
      "DESCRIPTION",
      "       If --list is given, or if there are no non-option arguments, existing",
      "       branches are listed; the current branch will be highlighted with an",
      "       asterisk. Option -r causes the remote-tracking branches to be listed,",
      "       and option -a shows both local and remote branches. If a <pattern> is",
      "       given, it is used as a shell wildcard to restrict the output to",
      "       matching branches. If multiple patterns are given, a branch is shown if",
      "       it matches any of the patterns. Note that when providing a <pattern>,",
      "       you must use --list; otherwise the command is interpreted as branch",
      "       creation.",
      "",
      "       With --contains, shows only the branches that contain the named commit",
      "       (in other words, the branches whose tip commits are descendants of the",
      "       named commit). With --merged, only branches merged into the named",
      "       commit (i.e. the branches whose tip commits are reachable from the",
      "       named commit) will be listed. With --no-merged only branches not merged",
      "       into the named commit will be listed. If the <commit> argument is",
      "       missing it defaults to HEAD (i.e. the tip of the current branch).",
      "",
      "       The command’s second form creates a new branch head named <branchname>",
      "       which points to the current HEAD, or <start-point> if given.",
      "",
      "       Note that this will create the new branch, but it will not switch the",
      "       working tree to it; use \"git checkout <newbranch>\" to switch to the new",
      "       branch.",
      "",
      "       When a local branch is started off a remote-tracking branch, Git sets",
      "       up the branch (specifically the branch.<name>.remote and",
      "       branch.<name>.merge configuration entries) so that git pull will",
      "       appropriately merge from the remote-tracking branch. This behavior may",
      "       be changed via the global branch.autosetupmerge configuration flag.",
      "       That setting can be overridden by using the --track and --no-track",
      "       options, and changed later using git branch --set-upstream-to.",
      "",
      "       With a -m or -M option, <oldbranch> will be renamed to <newbranch>. If",
      "       <oldbranch> had a corresponding reflog, it is renamed to match",
      "       <newbranch>, and a reflog entry is created to remember the branch",
      "       renaming. If <newbranch> exists, -M must be used to force the rename to",
      "       happen.",
      "",
      "       With a -d or -D option, <branchname> will be deleted. You may specify",
      "       more than one branch for deletion. If the branch currently has a reflog",
      "       then the reflog will also be deleted.",
      "",
      "       Use -r together with -d to delete remote-tracking branches. Note, that",
      "       it only makes sense to delete remote-tracking branches if they no",
      "       longer exist in the remote repository or if git fetch was configured",
      "       not to fetch them again. See also the prune subcommand of git-remote(1)",
      "       for a way to clean up all obsolete remote-tracking branches.",
      "",
      "OPTIONS",
      "       -d, --delete",
      "           Delete a branch. The branch must be fully merged in its upstream",
      "           branch, or in HEAD if no upstream was set with --track or",
      "           --set-upstream.",
      "",
      "       -D",
      "           Delete a branch irrespective of its merged status.",
      "",
      "       -l, --create-reflog",
      "           Create the branch’s reflog. This activates recording of all changes",
      "           made to the branch ref, enabling use of date based sha1 expressions",
      "           such as \"<branchname>@{yesterday}\". Note that in non-bare",
      "           repositories, reflogs are usually enabled by default by the",
      "           core.logallrefupdates config option.",
      "",
      "       -f, --force",
      "           Reset <branchname> to <startpoint> if <branchname> exists already.",
      "           Without -fgit branch refuses to change an existing branch.",
      "",
      "       -m, --move",
      "           Move/rename a branch and the corresponding reflog.",
      "",
      "       -M",
      "           Move/rename a branch even if the new branch name already exists.",
      "",
      "       --color[=<when>]",
      "           Color branches to highlight current, local, and remote-tracking",
      "           branches. The value must be always (the default), never, or auto.",
      "",
      "       --no-color",
      "           Turn off branch colors, even when the configuration file gives the",
      "           default to color output. Same as --color=never.",
      "",
      "       --column[=<options>], --no-column",
      "           Display branch listing in columns. See configuration variable",
      "           column.branch for option syntax.--column and --no-column without",
      "           options are equivalent to always and never respectively.",
      "",
      "           This option is only applicable in non-verbose mode.",
      "",
      "       -r, --remotes",
      "           List or delete (if used with -d) the remote-tracking branches.",
      "",
      "       -a, --all",
      "           List both remote-tracking branches and local branches.",
      "",
      "       --list",
      "           Activate the list mode.  git branch <pattern> would try to create a",
      "           branch, use git branch --list <pattern> to list matching branches.",
      "",
      "       -v, -vv, --verbose",
      "           When in list mode, show sha1 and commit subject line for each head,",
      "           along with relationship to upstream branch (if any). If given",
      "           twice, print the name of the upstream branch, as well (see also git",
      "           remote show <remote>).",
      "",
      "       -q, --quiet",
      "           Be more quiet when creating or deleting a branch, suppressing",
      "           non-error messages.",
      "",
      "       --abbrev=<length>",
      "           Alter the sha1’s minimum display length in the output listing. The",
      "           default value is 7 and can be overridden by the core.abbrev config",
      "           option.",
      "",
      "       --no-abbrev",
      "           Display the full sha1s in the output listing rather than",
      "           abbreviating them.",
      "",
      "       -t, --track",
      "           When creating a new branch, set up branch.<name>.remote and",
      "           branch.<name>.merge configuration entries to mark the start-point",
      "           branch as \"upstream\" from the new branch. This configuration will",
      "           tell git to show the relationship between the two branches in git",
      "           status and git branch -v. Furthermore, it directs git pull without",
      "           arguments to pull from the upstream when the new branch is checked",
      "           out.",
      "",
      "           This behavior is the default when the start point is a",
      "           remote-tracking branch. Set the branch.autosetupmerge configuration",
      "           variable to false if you want git checkout and git branch to always",
      "           behave as if --no-track were given. Set it to always if you want",
      "           this behavior when the start-point is either a local or",
      "           remote-tracking branch.",
      "",
      "       --no-track",
      "           Do not set up \"upstream\" configuration, even if the",
      "           branch.autosetupmerge configuration variable is true.",
      "",
      "       --set-upstream",
      "           If specified branch does not exist yet or if --force has been",
      "           given, acts exactly like --track. Otherwise sets up configuration",
      "           like --track would when creating the branch, except that where",
      "           branch points to is not changed.",
      "",
      "       -u <upstream>, --set-upstream-to=<upstream>",
      "           Set up <branchname>'s tracking information so <upstream> is",
      "           considered <branchname>'s upstream branch. If no <branchname> is",
      "           specified, then it defaults to the current branch.",
      "",
      "       --unset-upstream",
      "           Remove the upstream information for <branchname>. If no branch is",
      "           specified it defaults to the current branch.",
      "",
      "       --edit-description",
      "           Open an editor and edit the text to explain what the branch is for,",
      "           to be used by various other commands (e.g.  request-pull).",
      "",
      "       --contains [<commit>]",
      "           Only list branches which contain the specified commit (HEAD if not",
      "           specified). Implies --list.",
      "",
      "       --merged [<commit>]",
      "           Only list branches whose tips are reachable from the specified",
      "           commit (HEAD if not specified). Implies --list.",
      "",
      "       --no-merged [<commit>]",
      "           Only list branches whose tips are not reachable from the specified",
      "           commit (HEAD if not specified). Implies --list.",
      "",
      "       <branchname>",
      "           The name of the branch to create or delete. The new branch name",
      "           must pass all checks defined by git-check-ref-format(1). Some of",
      "           these checks may restrict the characters allowed in a branch name.",
      "",
      "       <start-point>",
      "           The new branch head will point to this commit. It may be given as a",
      "           branch name, a commit-id, or a tag. If this option is omitted, the",
      "           current HEAD will be used instead.",
      "",
      "       <oldbranch>",
      "           The name of an existing branch to rename.",
      "",
      "       <newbranch>",
      "           The new name for an existing branch. The same restrictions as for",
      "           <branchname> apply.",
      "",
      "EXAMPLES",
      "       Start development from a known tag",
      "",
      "               $ git clone git://git.kernel.org/pub/scm/.../linux-2.6 my2.6",
      "               $ cd my2.6",
      "               $ git branch my2.6.14 v2.6.14   (1)",
      "               $ git checkout my2.6.14",
      "",
      "           1. This step and the next one could be combined into a single step",
      "           with \"checkout -b my2.6.14 v2.6.14\".",
      "",
      "       Delete an unneeded branch",
      "",
      "               $ git clone git://git.kernel.org/.../git.git my.git",
      "               $ cd my.git",
      "               $ git branch -d -r origin/todo origin/html origin/man   (1)",
      "               $ git branch -D test                                    (2)",
      "",
      "           1. Delete the remote-tracking branches \"todo\", \"html\" and \"man\".",
      "           The next fetch or pull will create them again unless you configure",
      "           them not to. See git-fetch(1).",
      "           2. Delete the \"test\" branch even if the \"master\" branch (or",
      "           whichever branch is currently checked out) does not have all",
      "           commits from the test branch.",
      "",
      "NOTES",
      "       If you are creating a branch that you want to checkout immediately, it",
      "       is easier to use the git checkout command with its -b option to create",
      "       a branch and check it out with a single command.",
      "",
      "       The options --contains, --merged and --no-merged serve three related",
      "       but different purposes:",
      "",
      "       ·   --contains <commit> is used to find all branches which will need",
      "           special attention if <commit> were to be rebased or amended, since",
      "           those branches contain the specified <commit>.",
      "",
      "       ·   --merged is used to find all branches which can be safely deleted,",
      "           since those branches are fully contained by HEAD.",
      "",
      "       ·   --no-merged is used to find branches which are candidates for",
      "           merging into HEAD, since those branches are not fully contained by",
      "           HEAD.",
      "",
      "SEE ALSO",
      "       git-check-ref-format(1), git-fetch(1), git-remote(1), “Understanding",
      "       history: What is a branch?”[1] in the Git User’s Manual.",
      "",
      "GIT",
      "       Part of the git(1) suite",
      "",
      "NOTES",
      "        1. “Understanding history: What is a branch?”",
      "           file:///usr/share/doc/git/html/user-manual.html#what-is-a-branch",
      "",
      "",
      "",
      "Git 1.9.1                         03/21/2016                     GIT-BRANCH(1)"
   };
   TStrStrVectPair gitPair("git-branch", strVect);
   m_gitCmdMap.insert(gitPair);
}

void GitJsonText::LoadGitDiff()
{
   TStrVect strVect =
   {
      "GIT-DIFF(1)                       Git Manual                       GIT-DIFF(1)",
      "",
      "",
      "",
      "NAME",
      "       git-diff - Show changes between commits, commit and working tree, etc",
      "",
      "SYNOPSIS",
      "       git diff [options] [<commit>] [--] [<path>...]",
      "       git diff [options] --cached [<commit>] [--] [<path>...]",
      "       git diff [options] <commit> <commit> [--] [<path>...]",
      "       git diff [options] <blob> <blob>",
      "       git diff [options] [--no-index] [--] <path> <path>",
      "",
      "",
      "DESCRIPTION",
      "       Show changes between the working tree and the index or a tree, changes",
      "       between the index and a tree, changes between two trees, changes",
      "       between two blob objects, or changes between two files on disk.",
      "",
      "       git diff [--options] [--] [<path>...]",
      "           This form is to view the changes you made relative to the index",
      "           (staging area for the next commit). In other words, the differences",
      "           are what you could tell Git to further add to the index but you",
      "           still haven’t. You can stage these changes by using git-add(1).",
      "",
      "       git diff --no-index [--options] [--] [<path>...]",
      "           This form is to compare the given two paths on the filesystem. You",
      "           can omit the --no-index option when running the command in a",
      "           working tree controlled by Git and at least one of the paths points",
      "           outside the working tree, or when running the command outside a",
      "           working tree controlled by Git.",
      "",
      "       git diff [--options] --cached [<commit>] [--] [<path>...]",
      "           This form is to view the changes you staged for the next commit",
      "           relative to the named <commit>. Typically you would want comparison",
      "           with the latest commit, so if you do not give <commit>, it defaults",
      "           to HEAD. If HEAD does not exist (e.g. unborn branches) and <commit>",
      "           is not given, it shows all staged changes. --staged is a synonym of",
      "           --cached.",
      "",
      "       git diff [--options] <commit> [--] [<path>...]",
      "           This form is to view the changes you have in your working tree",
      "           relative to the named <commit>. You can use HEAD to compare it with",
      "           the latest commit, or a branch name to compare with the tip of a",
      "           different branch.",
      "",
      "       git diff [--options] <commit> <commit> [--] [<path>...]",
      "           This is to view the changes between two arbitrary <commit>.",
      "",
      "       git diff [--options] <commit>..<commit> [--] [<path>...]",
      "           This is synonymous to the previous form. If <commit> on one side is",
      "           omitted, it will have the same effect as using HEAD instead.",
      "",
      "       git diff [--options] <commit>...<commit> [--] [<path>...]",
      "           This form is to view the changes on the branch containing and up to",
      "           the second <commit>, starting at a common ancestor of both",
      "           <commit>. \"git diff A...B\" is equivalent to \"git diff",
      "           $(git-merge-base A B) B\". You can omit any one of <commit>, which",
      "           has the same effect as using HEAD instead.",
      "",
      "       Just in case if you are doing something exotic, it should be noted that",
      "       all of the <commit> in the above description, except in the last two",
      "       forms that use \"..\" notations, can be any <tree>.",
      "",
      "       For a more complete list of ways to spell <commit>, see \"SPECIFYING",
      "       REVISIONS\" section in gitrevisions(7). However, \"diff\" is about",
      "       comparing two endpoints, not ranges, and the range notations",
      "       (\"<commit>..<commit>\" and \"<commit>...<commit>\") do not mean a range as",
      "       defined in the \"SPECIFYING RANGES\" section in gitrevisions(7).",
      "",
      "       git diff [options] <blob> <blob>",
      "           This form is to view the differences between the raw contents of",
      "           two blob objects.",
      "",
      "OPTIONS",
      "       -p, -u, --patch",
      "           Generate patch (see section on generating patches). This is the",
      "           default.",
      "",
      "       -s, --no-patch",
      "           Suppress diff output. Useful for commands like git show that show",
      "           the patch by default, or to cancel the effect of --patch.",
      "",
      "       -U<n>, --unified=<n>",
      "           Generate diffs with <n> lines of context instead of the usual",
      "           three. Implies -p.",
      "",
      "       --raw",
      "           Generate the raw format.",
      "",
      "       --patch-with-raw",
      "           Synonym for -p --raw.",
      "",
      "       --minimal",
      "           Spend extra time to make sure the smallest possible diff is",
      "           produced.",
      "",
      "       --patience",
      "           Generate a diff using the \"patience diff\" algorithm.",
      "",
      "       --histogram",
      "           Generate a diff using the \"histogram diff\" algorithm.",
      "",
      "       --diff-algorithm={patience|minimal|histogram|myers}",
      "           Choose a diff algorithm. The variants are as follows:",
      "",
      "           default, myers",
      "               The basic greedy diff algorithm. Currently, this is the",
      "               default.",
      "",
      "           minimal",
      "               Spend extra time to make sure the smallest possible diff is",
      "               produced.",
      "",
      "           patience",
      "               Use \"patience diff\" algorithm when generating patches.",
      "",
      "           histogram",
      "               This algorithm extends the patience algorithm to \"support",
      "               low-occurrence common elements\".",
      "",
      "           For instance, if you configured diff.algorithm variable to a",
      "           non-default value and want to use the default one, then you have to",
      "           use --diff-algorithm=default option.",
      "",
      "       --stat[=<width>[,<name-width>[,<count>]]]",
      "           Generate a diffstat. By default, as much space as necessary will be",
      "           used for the filename part, and the rest for the graph part.",
      "           Maximum width defaults to terminal width, or 80 columns if not",
      "           connected to a terminal, and can be overridden by <width>. The",
      "           width of the filename part can be limited by giving another width",
      "           <name-width> after a comma. The width of the graph part can be",
      "           limited by using --stat-graph-width=<width> (affects all commands",
      "           generating a stat graph) or by setting diff.statGraphWidth=<width>",
      "           (does not affect git format-patch). By giving a third parameter",
      "           <count>, you can limit the output to the first <count> lines,",
      "           followed by ...  if there are more.",
      "",
      "           These parameters can also be set individually with",
      "           --stat-width=<width>, --stat-name-width=<name-width> and",
      "           --stat-count=<count>.",
      "",
      "       --numstat",
      "           Similar to --stat, but shows number of added and deleted lines in",
      "           decimal notation and pathname without abbreviation, to make it more",
      "           machine friendly. For binary files, outputs two - instead of saying",
      "           0 0.",
      "",
      "       --shortstat",
      "           Output only the last line of the --stat format containing total",
      "           number of modified files, as well as number of added and deleted",
      "           lines.",
      "",
      "       --dirstat[=<param1,param2,...>]",
      "           Output the distribution of relative amount of changes for each",
      "           sub-directory. The behavior of --dirstat can be customized by",
      "           passing it a comma separated list of parameters. The defaults are",
      "           controlled by the diff.dirstat configuration variable (see git-",
      "           config(1)). The following parameters are available:",
      "",
      "           changes",
      "               Compute the dirstat numbers by counting the lines that have",
      "               been removed from the source, or added to the destination. This",
      "               ignores the amount of pure code movements within a file. In",
      "               other words, rearranging lines in a file is not counted as much",
      "               as other changes. This is the default behavior when no",
      "               parameter is given.",
      "",
      "           lines",
      "               Compute the dirstat numbers by doing the regular line-based",
      "               diff analysis, and summing the removed/added line counts. (For",
      "               binary files, count 64-byte chunks instead, since binary files",
      "               have no natural concept of lines). This is a more expensive",
      "               --dirstat behavior than the changes behavior, but it does count",
      "               rearranged lines within a file as much as other changes. The",
      "               resulting output is consistent with what you get from the other",
      "               --*stat options.",
      "",
      "           files",
      "               Compute the dirstat numbers by counting the number of files",
      "               changed. Each changed file counts equally in the dirstat",
      "               analysis. This is the computationally cheapest --dirstat",
      "               behavior, since it does not have to look at the file contents",
      "               at all.",
      "",
      "           cumulative",
      "               Count changes in a child directory for the parent directory as",
      "               well. Note that when using cumulative, the sum of the",
      "               percentages reported may exceed 100%. The default",
      "               (non-cumulative) behavior can be specified with the",
      "               noncumulative parameter.",
      "",
      "           <limit>",
      "               An integer parameter specifies a cut-off percent (3% by",
      "               default). Directories contributing less than this percentage of",
      "               the changes are not shown in the output.",
      "",
      "           Example: The following will count changed files, while ignoring",
      "           directories with less than 10% of the total amount of changed",
      "           files, and accumulating child directory counts in the parent",
      "           directories: --dirstat=files,10,cumulative.",
      "",
      "       --summary",
      "           Output a condensed summary of extended header information such as",
      "           creations, renames and mode changes.",
      "",
      "       --patch-with-stat",
      "           Synonym for -p --stat.",
      "",
      "       -z",
      "           When --raw, --numstat, --name-only or --name-status has been given,",
      "           do not munge pathnames and use NULs as output field terminators.",
      "",
      "           Without this option, each pathname output will have TAB, LF, double",
      "           quotes, and backslash characters replaced with \\t, \\n, \\\", and \\\\,",
      "           respectively, and the pathname will be enclosed in double quotes if",
      "           any of those replacements occurred.",
      "",
      "       --name-only",
      "           Show only names of changed files.",
      "",
      "       --name-status",
      "           Show only names and status of changed files. See the description of",
      "           the --diff-filter option on what the status letters mean.",
      "",
      "       --submodule[=<format>]",
      "           Specify how differences in submodules are shown. When --submodule",
      "           or --submodule=log is given, the log format is used. This format",
      "           lists the commits in the range like git-submodule(1)summary does.",
      "           Omitting the --submodule option or specifying --submodule=short,",
      "           uses the short format. This format just shows the names of the",
      "           commits at the beginning and end of the range. Can be tweaked via",
      "           the diff.submodule configuration variable.",
      "",
      "       --color[=<when>]",
      "           Show colored diff.  --color (i.e. without =<when>) is the same as",
      "           --color=always.  <when> can be one of always, never, or auto. It",
      "           can be changed by the color.ui and color.diff configuration",
      "           settings.",
      "",
      "       --no-color",
      "           Turn off colored diff. This can be used to override configuration",
      "           settings. It is the same as --color=never.",
      "",
      "       --word-diff[=<mode>]",
      "           Show a word diff, using the <mode> to delimit changed words. By",
      "           default, words are delimited by whitespace; see --word-diff-regex",
      "           below. The <mode> defaults to plain, and must be one of:",
      "",
      "           color",
      "               Highlight changed words using only colors. Implies --color.",
      "",
      "           plain",
      "               Show words as [-removed-] and {+added+}. Makes no attempts to",
      "               escape the delimiters if they appear in the input, so the",
      "               output may be ambiguous.",
      "",
      "           porcelain",
      "               Use a special line-based format intended for script",
      "               consumption. Added/removed/unchanged runs are printed in the",
      "               usual unified diff format, starting with a +/-/` ` character at",
      "               the beginning of the line and extending to the end of the line.",
      "               Newlines in the input are represented by a tilde ~ on a line of",
      "               its own.",
      "",
      "           none",
      "               Disable word diff again.",
      "",
      "           Note that despite the name of the first mode, color is used to",
      "           highlight the changed parts in all modes if enabled.",
      "",
      "       --word-diff-regex=<regex>",
      "           Use <regex> to decide what a word is, instead of considering runs",
      "           of non-whitespace to be a word. Also implies --word-diff unless it",
      "           was already enabled.",
      "",
      "           Every non-overlapping match of the <regex> is considered a word.",
      "           Anything between these matches is considered whitespace and",
      "           ignored(!) for the purposes of finding differences. You may want to",
      "           append |[^[:space:]] to your regular expression to make sure that",
      "           it matches all non-whitespace characters. A match that contains a",
      "           newline is silently truncated(!) at the newline.",
      "",
      "           The regex can also be set via a diff driver or configuration",
      "           option, see gitattributes(1) or git-config(1). Giving it explicitly",
      "           overrides any diff driver or configuration setting. Diff drivers",
      "           override configuration settings.",
      "",
      "       --color-words[=<regex>]",
      "           Equivalent to --word-diff=color plus (if a regex was specified)",
      "           --word-diff-regex=<regex>.",
      "",
      "       --no-renames",
      "           Turn off rename detection, even when the configuration file gives",
      "           the default to do so.",
      "",
      "       --check",
      "           Warn if changes introduce whitespace errors. What are considered",
      "           whitespace errors is controlled by core.whitespace configuration.",
      "           By default, trailing whitespaces (including lines that solely",
      "           consist of whitespaces) and a space character that is immediately",
      "           followed by a tab character inside the initial indent of the line",
      "           are considered whitespace errors. Exits with non-zero status if",
      "           problems are found. Not compatible with --exit-code.",
      "",
      "       --full-index",
      "           Instead of the first handful of characters, show the full pre- and",
      "           post-image blob object names on the \"index\" line when generating",
      "           patch format output.",
      "",
      "       --binary",
      "           In addition to --full-index, output a binary diff that can be",
      "           applied with git-apply.",
      "",
      "       --abbrev[=<n>]",
      "           Instead of showing the full 40-byte hexadecimal object name in",
      "           diff-raw format output and diff-tree header lines, show only a",
      "           partial prefix. This is independent of the --full-index option",
      "           above, which controls the diff-patch output format. Non default",
      "           number of digits can be specified with --abbrev=<n>.",
      "",
      "       -B[<n>][/<m>], --break-rewrites[=[<n>][/<m>]]",
      "           Break complete rewrite changes into pairs of delete and create.",
      "           This serves two purposes:",
      "",
      "           It affects the way a change that amounts to a total rewrite of a",
      "           file not as a series of deletion and insertion mixed together with",
      "           a very few lines that happen to match textually as the context, but",
      "           as a single deletion of everything old followed by a single",
      "           insertion of everything new, and the number m controls this aspect",
      "           of the -B option (defaults to 60%).  -B/70% specifies that less",
      "           than 30% of the original should remain in the result for Git to",
      "           consider it a total rewrite (i.e. otherwise the resulting patch",
      "           will be a series of deletion and insertion mixed together with",
      "           context lines).",
      "",
      "           When used with -M, a totally-rewritten file is also considered as",
      "           the source of a rename (usually -M only considers a file that",
      "           disappeared as the source of a rename), and the number n controls",
      "           this aspect of the -B option (defaults to 50%).  -B20% specifies",
      "           that a change with addition and deletion compared to 20% or more of",
      "           the file’s size are eligible for being picked up as a possible",
      "           source of a rename to another file.",
      "",
      "       -M[<n>], --find-renames[=<n>]",
      "           Detect renames. If n is specified, it is a threshold on the",
      "           similarity index (i.e. amount of addition/deletions compared to the",
      "           file’s size). For example, -M90% means Git should consider a",
      "           delete/add pair to be a rename if more than 90% of the file hasn’t",
      "           changed. Without a % sign, the number is to be read as a fraction,",
      "           with a decimal point before it. I.e., -M5 becomes 0.5, and is thus",
      "           the same as -M50%. Similarly, -M05 is the same as -M5%. To limit",
      "           detection to exact renames, use -M100%. The default similarity",
      "           index is 50%.",
      "",
      "       -C[<n>], --find-copies[=<n>]",
      "           Detect copies as well as renames. See also --find-copies-harder. If",
      "           n is specified, it has the same meaning as for -M<n>.",
      "",
      "       --find-copies-harder",
      "           For performance reasons, by default, -C option finds copies only if",
      "           the original file of the copy was modified in the same changeset.",
      "           This flag makes the command inspect unmodified files as candidates",
      "           for the source of copy. This is a very expensive operation for",
      "           large projects, so use it with caution. Giving more than one -C",
      "           option has the same effect.",
      "",
      "       -D, --irreversible-delete",
      "           Omit the preimage for deletes, i.e. print only the header but not",
      "           the diff between the preimage and /dev/null. The resulting patch is",
      "           not meant to be applied with patch nor git apply; this is solely",
      "           for people who want to just concentrate on reviewing the text after",
      "           the change. In addition, the output obviously lack enough",
      "           information to apply such a patch in reverse, even manually, hence",
      "           the name of the option.",
      "",
      "           When used together with -B, omit also the preimage in the deletion",
      "           part of a delete/create pair.",
      "",
      "       -l<num>",
      "           The -M and -C options require O(n^2) processing time where n is the",
      "           number of potential rename/copy targets. This option prevents",
      "           rename/copy detection from running if the number of rename/copy",
      "           targets exceeds the specified number.",
      "",
      "       --diff-filter=[(A|C|D|M|R|T|U|X|B)...[*]]",
      "           Select only files that are Added (A), Copied (C), Deleted (D),",
      "           Modified (M), Renamed (R), have their type (i.e. regular file,",
      "           symlink, submodule, ...) changed (T), are Unmerged (U), are Unknown",
      "           (X), or have had their pairing Broken (B). Any combination of the",
      "           filter characters (including none) can be used. When *",
      "           (All-or-none) is added to the combination, all paths are selected",
      "           if there is any file that matches other criteria in the comparison;",
      "           if there is no file that matches other criteria, nothing is",
      "           selected.",
      "",
      "       -S<string>",
      "           Look for differences that change the number of occurrences of the",
      "           specified string (i.e. addition/deletion) in a file. Intended for",
      "           the scripter’s use.",
      "",
      "           It is useful when you’re looking for an exact block of code (like a",
      "           struct), and want to know the history of that block since it first",
      "           came into being: use the feature iteratively to feed the",
      "           interesting block in the preimage back into -S, and keep going",
      "           until you get the very first version of the block.",
      "",
      "       -G<regex>",
      "           Look for differences whose patch text contains added/removed lines",
      "           that match <regex>.",
      "",
      "           To illustrate the difference between -S<regex> --pickaxe-regex and",
      "           -G<regex>, consider a commit with the following diff in the same",
      "           file:",
      "",
      "               +    return !regexec(regexp, two->ptr, 1, &regmatch, 0);",
      "               ...",
      "               -    hit = !regexec(regexp, mf2.ptr, 1, &regmatch, 0);",
      "",
      "           While git log -G\"regexec\\(regexp\" will show this commit, git log",
      "           -S\"regexec\\(regexp\" --pickaxe-regex will not (because the number of",
      "           occurrences of that string did not change).",
      "",
      "           See the pickaxe entry in gitdiffcore(7) for more information.",
      "",
      "       --pickaxe-all",
      "           When -S or -G finds a change, show all the changes in that",
      "           changeset, not just the files that contain the change in <string>.",
      "",
      "       --pickaxe-regex",
      "           Treat the <string> given to -S as an extended POSIX regular",
      "           expression to match.",
      "",
      "       -O<orderfile>",
      "           Output the patch in the order specified in the <orderfile>, which",
      "           has one shell glob pattern per line. This overrides the",
      "           diff.orderfile configuration variable (see git-config(1)). To",
      "           cancel diff.orderfile, use -O/dev/null.",
      "",
      "       -R",
      "           Swap two inputs; that is, show differences from index or on-disk",
      "           file to tree contents.",
      "",
      "       --relative[=<path>]",
      "           When run from a subdirectory of the project, it can be told to",
      "           exclude changes outside the directory and show pathnames relative",
      "           to it with this option. When you are not in a subdirectory (e.g. in",
      "           a bare repository), you can name which subdirectory to make the",
      "           output relative to by giving a <path> as an argument.",
      "",
      "       -a, --text",
      "           Treat all files as text.",
      "",
      "       --ignore-space-at-eol",
      "           Ignore changes in whitespace at EOL.",
      "",
      "       -b, --ignore-space-change",
      "           Ignore changes in amount of whitespace. This ignores whitespace at",
      "           line end, and considers all other sequences of one or more",
      "           whitespace characters to be equivalent.",
      "",
      "       -w, --ignore-all-space",
      "           Ignore whitespace when comparing lines. This ignores differences",
      "           even if one line has whitespace where the other line has none.",
      "",
      "       --ignore-blank-lines",
      "           Ignore changes whose lines are all blank.",
      "",
      "       --inter-hunk-context=<lines>",
      "           Show the context between diff hunks, up to the specified number of",
      "           lines, thereby fusing hunks that are close to each other.",
      "",
      "       -W, --function-context",
      "           Show whole surrounding functions of changes.",
      "",
      "       --exit-code",
      "           Make the program exit with codes similar to diff(1). That is, it",
      "           exits with 1 if there were differences and 0 means no differences.",
      "",
      "       --quiet",
      "           Disable all output of the program. Implies --exit-code.",
      "",
      "       --ext-diff",
      "           Allow an external diff helper to be executed. If you set an",
      "           external diff driver with gitattributes(5), you need to use this",
      "           option with git-log(1) and friends.",
      "",
      "       --no-ext-diff",
      "           Disallow external diff drivers.",
      "",
      "       --textconv, --no-textconv",
      "           Allow (or disallow) external text conversion filters to be run when",
      "           comparing binary files. See gitattributes(5) for details. Because",
      "           textconv filters are typically a one-way conversion, the resulting",
      "           diff is suitable for human consumption, but cannot be applied. For",
      "           this reason, textconv filters are enabled by default only for git-",
      "           diff(1) and git-log(1), but not for git-format-patch(1) or diff",
      "           plumbing commands.",
      "",
      "       --ignore-submodules[=<when>]",
      "           Ignore changes to submodules in the diff generation. <when> can be",
      "           either \"none\", \"untracked\", \"dirty\" or \"all\", which is the default.",
      "           Using \"none\" will consider the submodule modified when it either",
      "           contains untracked or modified files or its HEAD differs from the",
      "           commit recorded in the superproject and can be used to override any",
      "           settings of the ignore option in git-config(1) or gitmodules(5).",
      "           When \"untracked\" is used submodules are not considered dirty when",
      "           they only contain untracked content (but they are still scanned for",
      "           modified content). Using \"dirty\" ignores all changes to the work",
      "           tree of submodules, only changes to the commits stored in the",
      "           superproject are shown (this was the behavior until 1.7.0). Using",
      "           \"all\" hides all changes to submodules.",
      "",
      "       --src-prefix=<prefix>",
      "           Show the given source prefix instead of \"a/\".",
      "",
      "       --dst-prefix=<prefix>",
      "           Show the given destination prefix instead of \"b/\".",
      "",
      "       --no-prefix",
      "           Do not show any source or destination prefix.",
      "",
      "       For more detailed explanation on these common options, see also",
      "       gitdiffcore(7).",
      "",
      "       <path>...",
      "           The <paths> parameters, when given, are used to limit the diff to",
      "           the named paths (you can give directory names and get diff for all",
      "           files under them).",
      "",
      "RAW OUTPUT FORMAT",
      "       The raw output format from \"git-diff-index\", \"git-diff-tree\",",
      "       \"git-diff-files\" and \"git diff --raw\" are very similar.",
      "",
      "       These commands all compare two sets of things; what is compared",
      "       differs:",
      "",
      "       git-diff-index <tree-ish>",
      "           compares the <tree-ish> and the files on the filesystem.",
      "",
      "       git-diff-index --cached <tree-ish>",
      "           compares the <tree-ish> and the index.",
      "",
      "       git-diff-tree [-r] <tree-ish-1> <tree-ish-2> [<pattern>...]",
      "           compares the trees named by the two arguments.",
      "",
      "       git-diff-files [<pattern>...]",
      "           compares the index and the files on the filesystem.",
      "",
      "       The \"git-diff-tree\" command begins its output by printing the hash of",
      "       what is being compared. After that, all the commands print one output",
      "       line per changed file.",
      "",
      "       An output line is formatted this way:",
      "",
      "           in-place edit  :100644 100644 bcd1234... 0123456... M file0",
      "           copy-edit      :100644 100644 abcd123... 1234567... C68 file1 file2",
      "           rename-edit    :100644 100644 abcd123... 1234567... R86 file1 file3",
      "           create         :000000 100644 0000000... 1234567... A file4",
      "           delete         :100644 000000 1234567... 0000000... D file5",
      "           unmerged       :000000 000000 0000000... 0000000... U file6",
      "",
      "",
      "       That is, from the left to the right:",
      "",
      "        1. a colon.",
      "",
      "        2. mode for \"src\"; 000000 if creation or unmerged.",
      "",
      "        3. a space.",
      "",
      "        4. mode for \"dst\"; 000000 if deletion or unmerged.",
      "",
      "        5. a space.",
      "",
      "        6. sha1 for \"src\"; 0{40} if creation or unmerged.",
      "",
      "        7. a space.",
      "",
      "        8. sha1 for \"dst\"; 0{40} if creation, unmerged or \"look at work tree\".",
      "",
      "        9. a space.",
      "",
      "       10. status, followed by optional \"score\" number.",
      "",
      "       11. a tab or a NUL when -z option is used.",
      "",
      "       12. path for \"src\"",
      "",
      "       13. a tab or a NUL when -z option is used; only exists for C or R.",
      "",
      "       14. path for \"dst\"; only exists for C or R.",
      "",
      "       15. an LF or a NUL when -z option is used, to terminate the record.",
      "",
      "       Possible status letters are:",
      "",
      "       ·   A: addition of a file",
      "",
      "       ·   C: copy of a file into a new one",
      "",
      "       ·   D: deletion of a file",
      "",
      "       ·   M: modification of the contents or mode of a file",
      "",
      "       ·   R: renaming of a file",
      "",
      "       ·   T: change in the type of the file",
      "",
      "       ·   U: file is unmerged (you must complete the merge before it can be",
      "           committed)",
      "",
      "       ·   X: \"unknown\" change type (most probably a bug, please report it)",
      "",
      "       Status letters C and R are always followed by a score (denoting the",
      "       percentage of similarity between the source and target of the move or",
      "       copy), and are the only ones to be so.",
      "",
      "       <sha1> is shown as all 0’s if a file is new on the filesystem and it is",
      "       out of sync with the index.",
      "",
      "       Example:",
      "",
      "           :100644 100644 5be4a4...... 000000...... M file.c",
      "",
      "",
      "       When -z option is not used, TAB, LF, and backslash characters in",
      "       pathnames are represented as \\t, \\n, and \\\\, respectively.",
      "",
      "DIFF FORMAT FOR MERGES",
      "       \"git-diff-tree\", \"git-diff-files\" and \"git-diff --raw\" can take -c or",
      "       --cc option to generate diff output also for merge commits. The output",
      "       differs from the format described above in the following way:",
      "",
      "        1. there is a colon for each parent",
      "",
      "        2. there are more \"src\" modes and \"src\" sha1",
      "",
      "        3. status is concatenated status characters for each parent",
      "",
      "        4. no optional \"score\" number",
      "",
      "        5. single path, only for \"dst\"",
      "",
      "       Example:",
      "",
      "           ::100644 100644 100644 fabadb8... cc95eb0... 4866510... MM      describe.c",
      "",
      "",
      "       Note that combined diff lists only files which were modified from all",
      "       parents.",
      "",
      "GENERATING PATCHES WITH -P",
      "       When \"git-diff-index\", \"git-diff-tree\", or \"git-diff-files\" are run",
      "       with a -p option, \"git diff\" without the --raw option, or \"git log\"",
      "       with the \"-p\" option, they do not produce the output described above;",
      "       instead they produce a patch file. You can customize the creation of",
      "       such patches via the GIT_EXTERNAL_DIFF and the GIT_DIFF_OPTS",
      "       environment variables.",
      "",
      "       What the -p option produces is slightly different from the traditional",
      "       diff format:",
      "",
      "        1. It is preceded with a \"git diff\" header that looks like this:",
      "",
      "               diff --git a/file1 b/file2",
      "",
      "           The a/ and b/ filenames are the same unless rename/copy is",
      "           involved. Especially, even for a creation or a deletion, /dev/null",
      "           is not used in place of the a/ or b/ filenames.",
      "",
      "           When rename/copy is involved, file1 and file2 show the name of the",
      "           source file of the rename/copy and the name of the file that",
      "           rename/copy produces, respectively.",
      "",
      "        2. It is followed by one or more extended header lines:",
      "",
      "               old mode <mode>",
      "               new mode <mode>",
      "               deleted file mode <mode>",
      "               new file mode <mode>",
      "               copy from <path>",
      "               copy to <path>",
      "               rename from <path>",
      "               rename to <path>",
      "               similarity index <number>",
      "               dissimilarity index <number>",
      "               index <hash>..<hash> <mode>",
      "",
      "           File modes are printed as 6-digit octal numbers including the file",
      "           type and file permission bits.",
      "",
      "           Path names in extended headers do not include the a/ and b/",
      "           prefixes.",
      "",
      "           The similarity index is the percentage of unchanged lines, and the",
      "           dissimilarity index is the percentage of changed lines. It is a",
      "           rounded down integer, followed by a percent sign. The similarity",
      "           index value of 100% is thus reserved for two equal files, while",
      "           100% dissimilarity means that no line from the old file made it",
      "           into the new one.",
      "",
      "           The index line includes the SHA-1 checksum before and after the",
      "           change. The <mode> is included if the file mode does not change;",
      "           otherwise, separate lines indicate the old and the new mode.",
      "",
      "        3. TAB, LF, double quote and backslash characters in pathnames are",
      "           represented as \\t, \\n, \\\" and \\\\, respectively. If there is need",
      "           for such substitution then the whole pathname is put in double",
      "           quotes.",
      "",
      "        4. All the file1 files in the output refer to files before the commit,",
      "           and all the file2 files refer to files after the commit. It is",
      "           incorrect to apply each change to each file sequentially. For",
      "           example, this patch will swap a and b:",
      "",
      "               diff --git a/a b/b",
      "               rename from a",
      "               rename to b",
      "               diff --git a/b b/a",
      "               rename from b",
      "               rename to a",
      "",
      "COMBINED DIFF FORMAT",
      "       Any diff-generating command can take the ‘-c` or --cc option to produce",
      "       a combined diff when showing a merge. This is the default format when",
      "       showing merges with git-diff(1) or git-show(1). Note also that you can",
      "       give the `-m’ option to any of these commands to force generation of",
      "       diffs with individual parents of a merge.",
      "",
      "       A combined diff format looks like this:",
      "",
      "           diff --combined describe.c",
      "           index fabadb8,cc95eb0..4866510",
      "           --- a/describe.c",
      "           +++ b/describe.c",
      "           @@@ -98,20 -98,12 +98,20 @@@",
      "                   return (a_date > b_date) ? -1 : (a_date == b_date) ? 0 : 1;",
      "             }",
      "",
      "           - static void describe(char *arg)",
      "            -static void describe(struct commit *cmit, int last_one)",
      "           ++static void describe(char *arg, int last_one)",
      "             {",
      "            +      unsigned char sha1[20];",
      "            +      struct commit *cmit;",
      "                   struct commit_list *list;",
      "                   static int initialized = 0;",
      "                   struct commit_name *n;",
      "",
      "            +      if (get_sha1(arg, sha1) < 0)",
      "            +              usage(describe_usage);",
      "            +      cmit = lookup_commit_reference(sha1);",
      "            +      if (!cmit)",
      "            +              usage(describe_usage);",
      "            +",
      "                   if (!initialized) {",
      "                           initialized = 1;",
      "                           for_each_ref(get_name);",
      "",
      "",
      "",
      "        1. It is preceded with a \"git diff\" header, that looks like this (when",
      "           -c option is used):",
      "",
      "               diff --combined file",
      "",
      "           or like this (when --cc option is used):",
      "",
      "               diff --cc file",
      "",
      "        2. It is followed by one or more extended header lines (this example",
      "           shows a merge with two parents):",
      "",
      "               index <hash>,<hash>..<hash>",
      "               mode <mode>,<mode>..<mode>",
      "               new file mode <mode>",
      "               deleted file mode <mode>,<mode>",
      "",
      "           The mode <mode>,<mode>..<mode> line appears only if at least one of",
      "           the <mode> is different from the rest. Extended headers with",
      "           information about detected contents movement (renames and copying",
      "           detection) are designed to work with diff of two <tree-ish> and are",
      "           not used by combined diff format.",
      "",
      "        3. It is followed by two-line from-file/to-file header",
      "",
      "               --- a/file",
      "               +++ b/file",
      "",
      "           Similar to two-line header for traditional unified diff format,",
      "           /dev/null is used to signal created or deleted files.",
      "",
      "        4. Chunk header format is modified to prevent people from accidentally",
      "           feeding it to patch -p1. Combined diff format was created for",
      "           review of merge commit changes, and was not meant for apply. The",
      "           change is similar to the change in the extended index header:",
      "",
      "               @@@ <from-file-range> <from-file-range> <to-file-range> @@@",
      "",
      "           There are (number of parents + 1) @ characters in the chunk header",
      "           for combined diff format.",
      "",
      "       Unlike the traditional unified diff format, which shows two files A and",
      "       B with a single column that has - (minus — appears in A but removed in",
      "       B), + (plus — missing in A but added to B), or \" \" (space — unchanged)",
      "       prefix, this format compares two or more files file1, file2,... with",
      "       one file X, and shows how X differs from each of fileN. One column for",
      "       each of fileN is prepended to the output line to note how X’s line is",
      "       different from it.",
      "",
      "       A - character in the column N means that the line appears in fileN but",
      "       it does not appear in the result. A + character in the column N means",
      "       that the line appears in the result, and fileN does not have that line",
      "       (in other words, the line was added, from the point of view of that",
      "       parent).",
      "",
      "       In the above example output, the function signature was changed from",
      "       both files (hence two - removals from both file1 and file2, plus ++ to",
      "       mean one line that was added does not appear in either file1 nor",
      "       file2). Also eight other lines are the same from file1 but do not",
      "       appear in file2 (hence prefixed with +).",
      "",
      "       When shown by git diff-tree -c, it compares the parents of a merge",
      "       commit with the merge result (i.e. file1..fileN are the parents). When",
      "       shown by git diff-files -c, it compares the two unresolved merge",
      "       parents with the working tree file (i.e. file1 is stage 2 aka \"our",
      "       version\", file2 is stage 3 aka \"their version\").",
      "",
      "OTHER DIFF FORMATS",
      "       The --summary option describes newly added, deleted, renamed and copied",
      "       files. The --stat option adds diffstat(1) graph to the output. These",
      "       options can be combined with other options, such as -p, and are meant",
      "       for human consumption.",
      "",
      "       When showing a change that involves a rename or a copy, --stat output",
      "       formats the pathnames compactly by combining common prefix and suffix",
      "       of the pathnames. For example, a change that moves arch/i386/Makefile",
      "       to arch/x86/Makefile while modifying 4 lines will be shown like this:",
      "",
      "           arch/{i386 => x86}/Makefile    |   4 +--",
      "",
      "",
      "       The --numstat option gives the diffstat(1) information but is designed",
      "       for easier machine consumption. An entry in --numstat output looks like",
      "       this:",
      "",
      "           1       2       README",
      "           3       1       arch/{i386 => x86}/Makefile",
      "",
      "",
      "       That is, from left to right:",
      "",
      "        1. the number of added lines;",
      "",
      "        2. a tab;",
      "",
      "        3. the number of deleted lines;",
      "",
      "        4. a tab;",
      "",
      "        5. pathname (possibly with rename/copy information);",
      "",
      "        6. a newline.",
      "",
      "       When -z output option is in effect, the output is formatted this way:",
      "",
      "           1       2       README NUL",
      "           3       1       NUL arch/i386/Makefile NUL arch/x86/Makefile NUL",
      "",
      "",
      "       That is:",
      "",
      "        1. the number of added lines;",
      "",
      "        2. a tab;",
      "",
      "        3. the number of deleted lines;",
      "",
      "        4. a tab;",
      "",
      "        5. a NUL (only exists if renamed/copied);",
      "",
      "        6. pathname in preimage;",
      "",
      "        7. a NUL (only exists if renamed/copied);",
      "",
      "        8. pathname in postimage (only exists if renamed/copied);",
      "",
      "        9. a NUL.",
      "",
      "       The extra NUL before the preimage path in renamed case is to allow",
      "       scripts that read the output to tell if the current record being read",
      "       is a single-path record or a rename/copy record without reading ahead.",
      "       After reading added and deleted lines, reading up to NUL would yield",
      "       the pathname, but if that is NUL, the record will show two paths.",
      "",
      "EXAMPLES",
      "       Various ways to check your working tree",
      "",
      "               $ git diff            (1)",
      "               $ git diff --cached   (2)",
      "               $ git diff HEAD       (3)",
      "",
      "           1. Changes in the working tree not yet staged for the next commit.",
      "           2. Changes between the index and your last commit; what you would",
      "           be committing if you run \"git commit\" without \"-a\" option.",
      "           3. Changes in the working tree since your last commit; what you",
      "           would be committing if you run \"git commit -a\"",
      "",
      "       Comparing with arbitrary commits",
      "",
      "               $ git diff test            (1)",
      "               $ git diff HEAD -- ./test  (2)",
      "               $ git diff HEAD^ HEAD      (3)",
      "",
      "           1. Instead of using the tip of the current branch, compare with the",
      "           tip of \"test\" branch.",
      "           2. Instead of comparing with the tip of \"test\" branch, compare with",
      "           the tip of the current branch, but limit the comparison to the file",
      "           \"test\".",
      "           3. Compare the version before the last commit and the last commit.",
      "",
      "       Comparing branches",
      "",
      "               $ git diff topic master    (1)",
      "               $ git diff topic..master   (2)",
      "               $ git diff topic...master  (3)",
      "",
      "           1. Changes between the tips of the topic and the master branches.",
      "           2. Same as above.",
      "           3. Changes that occurred on the master branch since when the topic",
      "           branch was started off it.",
      "",
      "       Limiting the diff output",
      "",
      "               $ git diff --diff-filter=MRC            (1)",
      "               $ git diff --name-status                (2)",
      "               $ git diff arch/i386 include/asm-i386   (3)",
      "",
      "           1. Show only modification, rename and copy, but not addition nor",
      "           deletion.",
      "           2. Show only names and the nature of change, but not actual diff",
      "           output.",
      "           3. Limit diff output to named subtrees.",
      "",
      "       Munging the diff output",
      "",
      "               $ git diff --find-copies-harder -B -C  (1)",
      "               $ git diff -R                          (2)",
      "",
      "           1. Spend extra cycles to find renames, copies and complete rewrites",
      "           (very expensive).",
      "           2. Output diff in reverse.",
      "",
      "SEE ALSO",
      "       diff(1), git-difftool(1), git-log(1), gitdiffcore(7), git-format-",
      "       patch(1), git-apply(1)",
      "",
      "GIT",
      "       Part of the git(1) suite",
      "",
      "",
      "",
      "Git 1.9.1                         03/21/2016                       GIT-DIFF(1)"
   };
   TStrStrVectPair gitPair("git-diff", strVect);
   m_gitCmdMap.insert(gitPair);
}

void GitJsonText::LoadGitFetch()
{
   TStrVect strVect =
   {
      "GIT-FETCH(1)                      Git Manual                      GIT-FETCH(1)",
      "",
      "",
      "",
      "NAME",
      "       git-fetch - Download objects and refs from another repository",
      "",
      "SYNOPSIS",
      "       git fetch [<options>] [<repository> [<refspec>...]]",
      "       git fetch [<options>] <group>",
      "       git fetch --multiple [<options>] [(<repository> | <group>)...]",
      "       git fetch --all [<options>]",
      "",
      "",
      "DESCRIPTION",
      "       Fetches named heads or tags from one or more other repositories, along",
      "       with the objects necessary to complete them.",
      "",
      "       The ref names and their object names of fetched refs are stored in",
      "       .git/FETCH_HEAD. This information is left for a later merge operation",
      "       done by git merge.",
      "",
      "       By default, tags are auto-followed. This means that when fetching from",
      "       a remote, any tags on the remote that point to objects that exist in",
      "       the local repository are fetched. The effect is to fetch tags that",
      "       point at branches that you are interested in. This default behavior can",
      "       be changed by using the --tags or --no-tags options, by configuring",
      "       remote.<name>.tagopt, or by using a refspec that fetches tags",
      "       explicitly.",
      "",
      "       git fetch can fetch from either a single named repository, or from",
      "       several repositories at once if <group> is given and there is a",
      "       remotes.<group> entry in the configuration file. (See git-config(1)).",
      "",
      "       When no remote is specified, by default the origin remote will be used,",
      "       unless there’s an upstream branch configured for the current branch.",
      "",
      "OPTIONS",
      "       --all",
      "           Fetch all remotes.",
      "",
      "       -a, --append",
      "           Append ref names and object names of fetched refs to the existing",
      "           contents of .git/FETCH_HEAD. Without this option old data in",
      "           .git/FETCH_HEAD will be overwritten.",
      "",
      "       --depth=<depth>",
      "           Deepen or shorten the history of a shallow repository created by",
      "           git clone with --depth=<depth> option (see git-clone(1)) to the",
      "           specified number of commits from the tip of each remote branch",
      "           history. Tags for the deepened commits are not fetched.",
      "",
      "       --unshallow",
      "           If the source repository is complete, convert a shallow repository",
      "           to a complete one, removing all the limitations imposed by shallow",
      "           repositories.",
      "",
      "           If the source repository is shallow, fetch as much as possible so",
      "           that the current repository has the same history as the source",
      "           repository.",
      "",
      "       --update-shallow",
      "           By default when fetching from a shallow repository, git fetch",
      "           refuses refs that require updating .git/shallow. This option",
      "           updates .git/shallow and accept such refs.",
      "",
      "       --dry-run",
      "           Show what would be done, without making any changes.",
      "",
      "       -f, --force",
      "           When git fetch is used with <rbranch>:<lbranch> refspec, it refuses",
      "           to update the local branch <lbranch> unless the remote branch",
      "           <rbranch> it fetches is a descendant of <lbranch>. This option",
      "           overrides that check.",
      "",
      "       -k, --keep",
      "           Keep downloaded pack.",
      "",
      "       --multiple",
      "           Allow several <repository> and <group> arguments to be specified.",
      "           No <refspec>s may be specified.",
      "",
      "       -p, --prune",
      "           After fetching, remove any remote-tracking references that no",
      "           longer exist on the remote. Tags are not subject to pruning if they",
      "           are fetched only because of the default tag auto-following or due",
      "           to a --tags option. However, if tags are fetched due to an explicit",
      "           refspec (either on the command line or in the remote configuration,",
      "           for example if the remote was cloned with the --mirror option),",
      "           then they are also subject to pruning.",
      "",
      "       -n, --no-tags",
      "           By default, tags that point at objects that are downloaded from the",
      "           remote repository are fetched and stored locally. This option",
      "           disables this automatic tag following. The default behavior for a",
      "           remote may be specified with the remote.<name>.tagopt setting. See",
      "           git-config(1).",
      "",
      "       -t, --tags",
      "           Fetch all tags from the remote (i.e., fetch remote tags refs/tags/*",
      "           into local tags with the same name), in addition to whatever else",
      "           would otherwise be fetched. Using this option alone does not",
      "           subject tags to pruning, even if --prune is used (though tags may",
      "           be pruned anyway if they are also the destination of an explicit",
      "           refspec; see --prune).",
      "",
      "       --recurse-submodules[=yes|on-demand|no]",
      "           This option controls if and under what conditions new commits of",
      "           populated submodules should be fetched too. It can be used as a",
      "           boolean option to completely disable recursion when set to no or to",
      "           unconditionally recurse into all populated submodules when set to",
      "           yes, which is the default when this option is used without any",
      "           value. Use on-demand to only recurse into a populated submodule",
      "           when the superproject retrieves a commit that updates the",
      "           submodule’s reference to a commit that isn’t already in the local",
      "           submodule clone.",
      "",
      "       --no-recurse-submodules",
      "           Disable recursive fetching of submodules (this has the same effect",
      "           as using the --recurse-submodules=no option).",
      "",
      "       --submodule-prefix=<path>",
      "           Prepend <path> to paths printed in informative messages such as",
      "           \"Fetching submodule foo\". This option is used internally when",
      "           recursing over submodules.",
      "",
      "       --recurse-submodules-default=[yes|on-demand]",
      "           This option is used internally to temporarily provide a",
      "           non-negative default value for the --recurse-submodules option. All",
      "           other methods of configuring fetch’s submodule recursion (such as",
      "           settings in gitmodules(5) and git-config(1)) override this option,",
      "           as does specifying --[no-]recurse-submodules directly.",
      "",
      "       -u, --update-head-ok",
      "           By default git fetch refuses to update the head which corresponds",
      "           to the current branch. This flag disables the check. This is purely",
      "           for the internal use for git pull to communicate with git fetch,",
      "           and unless you are implementing your own Porcelain you are not",
      "           supposed to use it.",
      "",
      "       --upload-pack <upload-pack>",
      "           When given, and the repository to fetch from is handled by git",
      "           fetch-pack, --exec=<upload-pack> is passed to the command to",
      "           specify non-default path for the command run on the other end.",
      "",
      "       -q, --quiet",
      "           Pass --quiet to git-fetch-pack and silence any other internally",
      "           used git commands. Progress is not reported to the standard error",
      "           stream.",
      "",
      "       -v, --verbose",
      "           Be verbose.",
      "",
      "       --progress",
      "           Progress status is reported on the standard error stream by default",
      "           when it is attached to a terminal, unless -q is specified. This",
      "           flag forces progress status even if the standard error stream is",
      "           not directed to a terminal.",
      "",
      "       <repository>",
      "           The \"remote\" repository that is the source of a fetch or pull",
      "           operation. This parameter can be either a URL (see the section GIT",
      "           URLS below) or the name of a remote (see the section REMOTES",
      "           below).",
      "",
      "       <group>",
      "           A name referring to a list of repositories as the value of",
      "           remotes.<group> in the configuration file. (See git-config(1)).",
      "",
      "       <refspec>",
      "           The format of a <refspec> parameter is an optional plus +, followed",
      "           by the source ref <src>, followed by a colon :, followed by the",
      "           destination ref <dst>.",
      "",
      "           The remote ref that matches <src> is fetched, and if <dst> is not",
      "           empty string, the local ref that matches it is fast-forwarded using",
      "           <src>. If the optional plus + is used, the local ref is updated",
      "           even if it does not result in a fast-forward update.",
      "",
      "               Note",
      "               If the remote branch from which you want to pull is modified in",
      "               non-linear ways such as being rewound and rebased frequently,",
      "               then a pull will attempt a merge with an older version of",
      "               itself, likely conflict, and fail. It is under these conditions",
      "               that you would want to use the + sign to indicate",
      "               non-fast-forward updates will be needed. There is currently no",
      "               easy way to determine or declare that a branch will be made",
      "               available in a repository with this behavior; the pulling user",
      "               simply must know this is the expected usage pattern for a",
      "               branch.",
      "",
      "               Note",
      "               You never do your own development on branches that appear on",
      "               the right hand side of a <refspec> colon on Pull: lines; they",
      "               are to be updated by git fetch. If you intend to do development",
      "               derived from a remote branch B, have a Pull: line to track it",
      "               (i.e.  Pull: B:remote-B), and have a separate branch my-B to do",
      "               your development on top of it. The latter is created by git",
      "               branch my-B remote-B (or its equivalent git checkout -b my-B",
      "               remote-B). Run git fetch to keep track of the progress of the",
      "               remote side, and when you see something new on the remote",
      "               branch, merge it into your development branch with git pull .",
      "               remote-B, while you are on my-B branch.",
      "",
      "               Note",
      "               There is a difference between listing multiple <refspec>",
      "               directly on git pull command line and having multiple Pull:",
      "               <refspec> lines for a <repository> and running git pull command",
      "               without any explicit <refspec> parameters. <refspec> listed",
      "               explicitly on the command line are always merged into the",
      "               current branch after fetching. In other words, if you list more",
      "               than one remote refs, you would be making an Octopus. While git",
      "               pull run without any explicit <refspec> parameter takes default",
      "               <refspec>s from Pull: lines, it merges only the first <refspec>",
      "               found into the current branch, after fetching all the remote",
      "               refs. This is because making an Octopus from remote refs is",
      "               rarely done, while keeping track of multiple remote heads in",
      "               one-go by fetching more than one is often useful.",
      "           Some short-cut notations are also supported.",
      "",
      "           ·   tag <tag> means the same as refs/tags/<tag>:refs/tags/<tag>; it",
      "               requests fetching everything up to the given tag.",
      "",
      "           ·   A parameter <ref> without a colon fetches that ref into",
      "               FETCH_HEAD, and updates the remote-tracking branches (if any).",
      "",
      "GIT URLS",
      "       In general, URLs contain information about the transport protocol, the",
      "       address of the remote server, and the path to the repository. Depending",
      "       on the transport protocol, some of this information may be absent.",
      "",
      "       Git supports ssh, git, http, and https protocols (in addition, ftp, and",
      "       ftps can be used for fetching and rsync can be used for fetching and",
      "       pushing, but these are inefficient and deprecated; do not use them).",
      "",
      "       The native transport (i.e. git:// URL) does no authentication and",
      "       should be used with caution on unsecured networks.",
      "",
      "       The following syntaxes may be used with them:",
      "",
      "       ·   ssh://[user@]host.xz[:port]/path/to/repo.git/",
      "",
      "       ·   git://host.xz[:port]/path/to/repo.git/",
      "",
      "       ·   http[s]://host.xz[:port]/path/to/repo.git/",
      "",
      "       ·   ftp[s]://host.xz[:port]/path/to/repo.git/",
      "",
      "       ·   rsync://host.xz/path/to/repo.git/",
      "",
      "       An alternative scp-like syntax may also be used with the ssh protocol:",
      "",
      "       ·   [user@]host.xz:path/to/repo.git/",
      "",
      "       This syntax is only recognized if there are no slashes before the first",
      "       colon. This helps differentiate a local path that contains a colon. For",
      "       example the local path foo:bar could be specified as an absolute path",
      "       or ./foo:bar to avoid being misinterpreted as an ssh url.",
      "",
      "       The ssh and git protocols additionally support ~username expansion:",
      "",
      "       ·   ssh://[user@]host.xz[:port]/~[user]/path/to/repo.git/",
      "",
      "       ·   git://host.xz[:port]/~[user]/path/to/repo.git/",
      "",
      "       ·   [user@]host.xz:/~[user]/path/to/repo.git/",
      "",
      "       For local repositories, also supported by Git natively, the following",
      "       syntaxes may be used:",
      "",
      "       ·   /path/to/repo.git/",
      "",
      "       ·   file:///path/to/repo.git/",
      "",
      "       These two syntaxes are mostly equivalent, except when cloning, when the",
      "       former implies --local option. See git-clone(1) for details.",
      "",
      "       When Git doesn’t know how to handle a certain transport protocol, it",
      "       attempts to use the remote-<transport> remote helper, if one exists. To",
      "       explicitly request a remote helper, the following syntax may be used:",
      "",
      "       ·   <transport>::<address>",
      "",
      "       where <address> may be a path, a server and path, or an arbitrary",
      "       URL-like string recognized by the specific remote helper being invoked.",
      "       See gitremote-helpers(1) for details.",
      "",
      "       If there are a large number of similarly-named remote repositories and",
      "       you want to use a different format for them (such that the URLs you use",
      "       will be rewritten into URLs that work), you can create a configuration",
      "       section of the form:",
      "",
      "                   [url \"<actual url base>\"]",
      "                           insteadOf = <other url base>",
      "",
      "",
      "       For example, with this:",
      "",
      "                   [url \"git://git.host.xz/\"]",
      "                           insteadOf = host.xz:/path/to/",
      "                           insteadOf = work:",
      "",
      "",
      "       a URL like \"work:repo.git\" or like \"host.xz:/path/to/repo.git\" will be",
      "       rewritten in any context that takes a URL to be",
      "       \"git://git.host.xz/repo.git\".",
      "",
      "       If you want to rewrite URLs for push only, you can create a",
      "       configuration section of the form:",
      "",
      "                   [url \"<actual url base>\"]",
      "                           pushInsteadOf = <other url base>",
      "",
      "",
      "       For example, with this:",
      "",
      "                   [url \"ssh://example.org/\"]",
      "                           pushInsteadOf = git://example.org/",
      "",
      "",
      "       a URL like \"git://example.org/path/to/repo.git\" will be rewritten to",
      "       \"ssh://example.org/path/to/repo.git\" for pushes, but pulls will still",
      "       use the original URL.",
      "",
      "REMOTES",
      "       The name of one of the following can be used instead of a URL as",
      "       <repository> argument:",
      "",
      "       ·   a remote in the Git configuration file: $GIT_DIR/config,",
      "",
      "       ·   a file in the $GIT_DIR/remotes directory, or",
      "",
      "       ·   a file in the $GIT_DIR/branches directory.",
      "",
      "       All of these also allow you to omit the refspec from the command line",
      "       because they each contain a refspec which git will use by default.",
      "",
      "   Named remote in configuration file",
      "       You can choose to provide the name of a remote which you had previously",
      "       configured using git-remote(1), git-config(1) or even by a manual edit",
      "       to the $GIT_DIR/config file. The URL of this remote will be used to",
      "       access the repository. The refspec of this remote will be used by",
      "       default when you do not provide a refspec on the command line. The",
      "       entry in the config file would appear like this:",
      "",
      "                   [remote \"<name>\"]",
      "                           url = <url>",
      "                           pushurl = <pushurl>",
      "                           push = <refspec>",
      "                           fetch = <refspec>",
      "",
      "",
      "       The <pushurl> is used for pushes only. It is optional and defaults to",
      "       <url>.",
      "",
      "   Named file in $GIT_DIR/remotes",
      "       You can choose to provide the name of a file in $GIT_DIR/remotes. The",
      "       URL in this file will be used to access the repository. The refspec in",
      "       this file will be used as default when you do not provide a refspec on",
      "       the command line. This file should have the following format:",
      "",
      "                   URL: one of the above URL format",
      "                   Push: <refspec>",
      "                   Pull: <refspec>",
      "",
      "",
      "       Push: lines are used by git push and Pull: lines are used by git pull",
      "       and git fetch. Multiple Push: and Pull: lines may be specified for",
      "       additional branch mappings.",
      "",
      "   Named file in $GIT_DIR/branches",
      "       You can choose to provide the name of a file in $GIT_DIR/branches. The",
      "       URL in this file will be used to access the repository. This file",
      "       should have the following format:",
      "",
      "                   <url>#<head>",
      "",
      "",
      "       <url> is required; #<head> is optional.",
      "",
      "       Depending on the operation, git will use one of the following refspecs,",
      "       if you don’t provide one on the command line. <branch> is the name of",
      "       this file in $GIT_DIR/branches and <head> defaults to master.",
      "",
      "       git fetch uses:",
      "",
      "                   refs/heads/<head>:refs/heads/<branch>",
      "",
      "",
      "       git push uses:",
      "",
      "                   HEAD:refs/heads/<head>",
      "",
      "",
      "EXAMPLES",
      "       ·   Update the remote-tracking branches:",
      "",
      "               $ git fetch origin",
      "",
      "           The above command copies all branches from the remote refs/heads/",
      "           namespace and stores them to the local refs/remotes/origin/",
      "           namespace, unless the branch.<name>.fetch option is used to specify",
      "           a non-default refspec.",
      "",
      "       ·   Using refspecs explicitly:",
      "",
      "               $ git fetch origin +pu:pu maint:tmp",
      "",
      "           This updates (or creates, as necessary) branches pu and tmp in the",
      "           local repository by fetching from the branches (respectively) pu",
      "           and maint from the remote repository.",
      "",
      "           The pu branch will be updated even if it is does not fast-forward,",
      "           because it is prefixed with a plus sign; tmp will not be.",
      "",
      "BUGS",
      "       Using --recurse-submodules can only fetch new commits in already",
      "       checked out submodules right now. When e.g. upstream added a new",
      "       submodule in the just fetched commits of the superproject the submodule",
      "       itself can not be fetched, making it impossible to check out that",
      "       submodule later without having to do a fetch again. This is expected to",
      "       be fixed in a future Git version.",
      "",
      "SEE ALSO",
      "       git-pull(1)",
      "",
      "GIT",
      "       Part of the git(1) suite",
      "",
      "",
      "",
      "Git 1.9.1                         03/21/2016                      GIT-FETCH(1)"
   };
   TStrStrVectPair gitPair("git-fetch", strVect);
   m_gitCmdMap.insert(gitPair);
}

void GitJsonText::LoadGitInit()
{
   TStrVect strVect =
   {
      "GIT-INIT(1)                                                         Git Manual                                                         GIT-INIT(1)",
      ""
      ""
      ""
      "NAME",
      "       git-init - Create an empty Git repository or reinitialize an existing one",
      ""
      "SYNOPSIS",
      "       git init [-q | --quiet] [--bare] [--template=<template_directory>]",
      "                 [--separate-git-dir <git dir>]",
      "                 [--shared[=<permissions>]] [directory]",
      ""
      ""
      "DESCRIPTION",
      "       This command creates an empty Git repository - basically a .git directory with subdirectories for objects, refs/heads, refs/tags, and",
      "       template files. An initial HEAD file that references the HEAD of the master branch is also created.",
      ""
      "       If the $GIT_DIR environment variable is set then it specifies a path to use instead of ./.git for the base of the repository.",
      ""
      "       If the object storage directory is specified via the $GIT_OBJECT_DIRECTORY environment variable then the sha1 directories are created",
      "       underneath - otherwise the default $GIT_DIR/objects directory is used.",
      ""
      "       Running git init in an existing repository is safe. It will not overwrite things that are already there. The primary reason for rerunning",
      "       git init is to pick up newly added templates (or to move the repository to another place if --separate-git-dir is given).",
      ""
      "OPTIONS",
      "       -q, --quiet",
      "           Only print error and warning messages, all other output will be suppressed.",
      ""
      "       --bare",
      "           Create a bare repository. If GIT_DIR environment is not set, it is set to the current working directory.",
      ""
      "       --template=<template_directory>",
      "           Specify the directory from which templates will be used. (See the \"TEMPLATE DIRECTORY\" section below.)",
      ""
      "       --separate-git-dir=<git dir>",
      "           Instead of initializing the repository where it is supposed to be, place a filesytem-agnostic Git symbolic link there, pointing to the",
      "           specified path, and initialize a Git repository at the path. The result is Git repository can be separated from working tree. If this",
      "           is reinitialization, the repository will be moved to the specified path.",
      ""
      "       --shared[=(false|true|umask|group|all|world|everybody|0xxx)]",
      "           Specify that the Git repository is to be shared amongst several users. This allows users belonging to the same group to push into that",
      "           repository. When specified, the config variable \"core.sharedRepository\" is set so that files and directories under $GIT_DIR are created",
      "           with the requested permissions. When not specified, Git will use permissions reported by umask(2).",
      ""
      "       The option can have the following values, defaulting to group if no value is given:",
      ""
      "       ·   umask (or false): Use permissions reported by umask(2). The default, when --shared is not specified.",
      ""
      "       ·   group (or true): Make the repository group-writable, (and g+sx, since the git group may be not the primary group of all users). This is",
      "           used to loosen the permissions of an otherwise safe umask(2) value. Note that the umask still applies to the other permission bits",
      "           (e.g. if umask is 0022, using group will not remove read privileges from other (non-group) users). See 0xxx for how to exactly specify",
      "           the repository permissions.",
      ""
      "       ·   all (or world or everybody): Same as group, but make the repository readable by all users.",
      ""
      "       ·   0xxx: 0xxx is an octal number and each file will have mode 0xxx.  0xxx will override users' umask(2) value (and not only loosen",
      "           permissions as group and all does).  0640 will create a repository which is group-readable, but not group-writable or accessible to",
      "           others.  0660 will create a repo that is readable and writable to the current user and group, but inaccessible to others.",
      ""
      "       By default, the configuration flag receive.denyNonFastForwards is enabled in shared repositories, so that you cannot force a non",
      "       fast-forwarding push into it.",
      ""
      "       If you name a (possibly non-existent) directory at the end of the command line, the command is run inside the directory (possibly after",
      "       creating it).",
      ""
      "TEMPLATE DIRECTORY",
      "       The template directory contains files and directories that will be copied to the $GIT_DIR after it is created.",
      ""
      "       The template directory used will (in order):",
      ""
      "       ·   The argument given with the --template option.",
      ""
      "       ·   The contents of the $GIT_TEMPLATE_DIR environment variable.",
      ""
      "       ·   The init.templatedir configuration variable.",
      ""
      "       ·   The default template directory: /usr/share/git-core/templates.",
      ""
      "       The default template directory includes some directory structure, some suggested \"exclude patterns\", and copies of sample \"hook\" files. The",
      "       suggested patterns and hook files are all modifiable and extensible.",
      ""
      "EXAMPLES",
      "       Start a new Git repository for an existing code base",
      ""
      "               $ cd /path/to/my/codebase",
      "               $ git init      (1)",
      "               $ git add .     (2)",
      ""
      "           1. prepare /path/to/my/codebase/.git directory",
      "           2. add all existing file to the index",
      ""
      "GIT",
      "       Part of the git(1) suite",
      ""
      ""
      ""
      "Git 1.9.1                                                           03/21/2016                                                         GIT-INIT(1)"
   };
   TStrStrVectPair gitPair("git-init", strVect);
   m_gitCmdMap.insert(gitPair);
}

void GitJsonText::LoadGitCheckout()
{
   TStrVect strVect =
   {
      "GIT-CHECKOUT(1)                   Git Manual                   GIT-CHECKOUT(1)",
      "",
      "",
      "",
      "NAME",
      "       git-checkout - Checkout a branch or paths to the working tree",
      "",
      "SYNOPSIS",
      "       git checkout [-q] [-f] [-m] [<branch>]",
      "       git checkout [-q] [-f] [-m] --detach [<branch>]",
      "       git checkout [-q] [-f] [-m] [--detach] <commit>",
      "       git checkout [-q] [-f] [-m] [[-b|-B|--orphan] <new_branch>] [<start_point>]",
      "       git checkout [-f|--ours|--theirs|-m|--conflict=<style>] [<tree-ish>] [--] <paths>...",
      "       git checkout [-p|--patch] [<tree-ish>] [--] [<paths>...]",
      "",
      "",
      "DESCRIPTION",
      "       Updates files in the working tree to match the version in the index or",
      "       the specified tree. If no paths are given, git checkout will also",
      "       update HEAD to set the specified branch as the current branch.",
      "",
      "       git checkout <branch>",
      "           To prepare for working on <branch>, switch to it by updating the",
      "           index and the files in the working tree, and by pointing HEAD at",
      "           the branch. Local modifications to the files in the working tree",
      "           are kept, so that they can be committed to the <branch>.",
      "",
      "           If <branch> is not found but there does exist a tracking branch in",
      "           exactly one remote (call it <remote>) with a matching name, treat",
      "           as equivalent to",
      "",
      "               $ git checkout -b <branch> --track <remote>/<branch>",
      "",
      "           You could omit <branch>, in which case the command degenerates to",
      "           \"check out the current branch\", which is a glorified no-op with a",
      "           rather expensive side-effects to show only the tracking",
      "           information, if exists, for the current branch.",
      "",
      "       git checkout -b|-B <new_branch> [<start point>]",
      "           Specifying -b causes a new branch to be created as if git-branch(1)",
      "           were called and then checked out. In this case you can use the",
      "           --track or --no-track options, which will be passed to git branch.",
      "           As a convenience, --track without -b implies branch creation; see",
      "           the description of --track below.",
      "",
      "           If -B is given, <new_branch> is created if it doesn’t exist;",
      "           otherwise, it is reset. This is the transactional equivalent of",
      "",
      "               $ git branch -f <branch> [<start point>]",
      "               $ git checkout <branch>",
      "",
      "           that is to say, the branch is not reset/created unless \"git",
      "           checkout\" is successful.",
      "",
      "       git checkout --detach [<branch>], git checkout [--detach] <commit>",
      "           Prepare to work on top of <commit>, by detaching HEAD at it (see",
      "           \"DETACHED HEAD\" section), and updating the index and the files in",
      "           the working tree. Local modifications to the files in the working",
      "           tree are kept, so that the resulting working tree will be the state",
      "           recorded in the commit plus the local modifications.",
      "",
      "           When the <commit> argument is a branch name, the --detach option",
      "           can be used to detach HEAD at the tip of the branch (git checkout",
      "           <branch> would check out that branch without detaching HEAD).",
      "",
      "           Omitting <branch> detaches HEAD at the tip of the current branch.",
      "",
      "       git checkout [-p|--patch] [<tree-ish>] [--] <pathspec>...",
      "           When <paths> or --patch are given, git checkout does not switch",
      "           branches. It updates the named paths in the working tree from the",
      "           index file or from a named <tree-ish> (most often a commit). In",
      "           this case, the -b and --track options are meaningless and giving",
      "           either of them results in an error. The <tree-ish> argument can be",
      "           used to specify a specific tree-ish (i.e. commit, tag or tree) to",
      "           update the index for the given paths before updating the working",
      "           tree.",
      "",
      "           The index may contain unmerged entries because of a previous failed",
      "           merge. By default, if you try to check out such an entry from the",
      "           index, the checkout operation will fail and nothing will be checked",
      "           out. Using -f will ignore these unmerged entries. The contents from",
      "           a specific side of the merge can be checked out of the index by",
      "           using --ours or --theirs. With -m, changes made to the working tree",
      "           file can be discarded to re-create the original conflicted merge",
      "           result.",
      "",
      "OPTIONS",
      "       -q, --quiet",
      "           Quiet, suppress feedback messages.",
      "",
      "       -f, --force",
      "           When switching branches, proceed even if the index or the working",
      "           tree differs from HEAD. This is used to throw away local changes.",
      "",
      "           When checking out paths from the index, do not fail upon unmerged",
      "           entries; instead, unmerged entries are ignored.",
      "",
      "       --ours, --theirs",
      "           When checking out paths from the index, check out stage #2 (ours)",
      "           or #3 (theirs) for unmerged paths.",
      "",
      "       -b <new_branch>",
      "           Create a new branch named <new_branch> and start it at",
      "           <start_point>; see git-branch(1) for details.",
      "",
      "       -B <new_branch>",
      "           Creates the branch <new_branch> and start it at <start_point>; if",
      "           it already exists, then reset it to <start_point>. This is",
      "           equivalent to running \"git branch\" with \"-f\"; see git-branch(1) for",
      "           details.",
      "",
      "       -t, --track",
      "           When creating a new branch, set up \"upstream\" configuration. See",
      "           \"--track\" in git-branch(1) for details.",
      "",
      "           If no -b option is given, the name of the new branch will be",
      "           derived from the remote-tracking branch, by looking at the local",
      "           part of the refspec configured for the corresponding remote, and",
      "           then stripping the initial part up to the \"*\". This would tell us",
      "           to use \"hack\" as the local branch when branching off of",
      "           \"origin/hack\" (or \"remotes/origin/hack\", or even",
      "           \"refs/remotes/origin/hack\"). If the given name has no slash, or the",
      "           above guessing results in an empty name, the guessing is aborted.",
      "           You can explicitly give a name with -b in such a case.",
      "",
      "       --no-track",
      "           Do not set up \"upstream\" configuration, even if the",
      "           branch.autosetupmerge configuration variable is true.",
      "",
      "       -l",
      "           Create the new branch’s reflog; see git-branch(1) for details.",
      "",
      "       --detach",
      "           Rather than checking out a branch to work on it, check out a commit",
      "           for inspection and discardable experiments. This is the default",
      "           behavior of \"git checkout <commit>\" when <commit> is not a branch",
      "           name. See the \"DETACHED HEAD\" section below for details.",
      "",
      "       --orphan <new_branch>",
      "           Create a new orphan branch, named <new_branch>, started from",
      "           <start_point> and switch to it. The first commit made on this new",
      "           branch will have no parents and it will be the root of a new",
      "           history totally disconnected from all the other branches and",
      "           commits.",
      "",
      "           The index and the working tree are adjusted as if you had",
      "           previously run \"git checkout <start_point>\". This allows you to",
      "           start a new history that records a set of paths similar to",
      "           <start_point> by easily running \"git commit -a\" to make the root",
      "           commit.",
      "",
      "           This can be useful when you want to publish the tree from a commit",
      "           without exposing its full history. You might want to do this to",
      "           publish an open source branch of a project whose current tree is",
      "           \"clean\", but whose full history contains proprietary or otherwise",
      "           encumbered bits of code.",
      "",
      "           If you want to start a disconnected history that records a set of",
      "           paths that is totally different from the one of <start_point>, then",
      "           you should clear the index and the working tree right after",
      "           creating the orphan branch by running \"git rm -rf .\" from the top",
      "           level of the working tree. Afterwards you will be ready to prepare",
      "           your new files, repopulating the working tree, by copying them from",
      "           elsewhere, extracting a tarball, etc.",
      "",
      "       --ignore-skip-worktree-bits",
      "           In sparse checkout mode, git checkout -- <paths> would update only",
      "           entries matched by <paths> and sparse patterns in",
      "           $GIT_DIR/info/sparse-checkout. This option ignores the sparse",
      "           patterns and adds back any files in <paths>.",
      "",
      "       -m, --merge",
      "           When switching branches, if you have local modifications to one or",
      "           more files that are different between the current branch and the",
      "           branch to which you are switching, the command refuses to switch",
      "           branches in order to preserve your modifications in context.",
      "           However, with this option, a three-way merge between the current",
      "           branch, your working tree contents, and the new branch is done, and",
      "           you will be on the new branch.",
      "",
      "           When a merge conflict happens, the index entries for conflicting",
      "           paths are left unmerged, and you need to resolve the conflicts and",
      "           mark the resolved paths with git add (or git rm if the merge should",
      "           result in deletion of the path).",
      "",
      "           When checking out paths from the index, this option lets you",
      "           recreate the conflicted merge in the specified paths.",
      "",
      "       --conflict=<style>",
      "           The same as --merge option above, but changes the way the",
      "           conflicting hunks are presented, overriding the merge.conflictstyle",
      "           configuration variable. Possible values are \"merge\" (default) and",
      "           \"diff3\" (in addition to what is shown by \"merge\" style, shows the",
      "           original contents).",
      "",
      "       -p, --patch",
      "           Interactively select hunks in the difference between the <tree-ish>",
      "           (or the index, if unspecified) and the working tree. The chosen",
      "           hunks are then applied in reverse to the working tree (and if a",
      "           <tree-ish> was specified, the index).",
      "",
      "           This means that you can use git checkout -p to selectively discard",
      "           edits from your current working tree. See the “Interactive Mode”",
      "           section of git-add(1) to learn how to operate the --patch mode.",
      "",
      "       <branch>",
      "           Branch to checkout; if it refers to a branch (i.e., a name that,",
      "           when prepended with \"refs/heads/\", is a valid ref), then that",
      "           branch is checked out. Otherwise, if it refers to a valid commit,",
      "           your HEAD becomes \"detached\" and you are no longer on any branch",
      "           (see below for details).",
      "",
      "           As a special case, the \"@{-N}\" syntax for the N-th last",
      "           branch/commit checks out branches (instead of detaching). You may",
      "           also specify - which is synonymous with \"@{-1}\".",
      "",
      "           As a further special case, you may use \"A...B\" as a shortcut for",
      "           the merge base of A and B if there is exactly one merge base. You",
      "           can leave out at most one of A and B, in which case it defaults to",
      "           HEAD.",
      "",
      "       <new_branch>",
      "           Name for the new branch.",
      "",
      "       <start_point>",
      "           The name of a commit at which to start the new branch; see git-",
      "           branch(1) for details. Defaults to HEAD.",
      "",
      "       <tree-ish>",
      "           Tree to checkout from (when paths are given). If not specified, the",
      "           index will be used.",
      "",
      "DETACHED HEAD",
      "       HEAD normally refers to a named branch (e.g. master). Meanwhile, each",
      "       branch refers to a specific commit. Let’s look at a repo with three",
      "       commits, one of them tagged, and with branch master checked out:",
      "",
      "                      HEAD (refers to branch 'master')",
      "                       |",
      "                       v",
      "           a---b---c  branch 'master' (refers to commit 'c')",
      "               ^",
      "               |",
      "             tag 'v2.0' (refers to commit 'b')",
      "",
      "",
      "       When a commit is created in this state, the branch is updated to refer",
      "       to the new commit. Specifically, git commit creates a new commit d,",
      "       whose parent is commit c, and then updates branch master to refer to",
      "       new commit d. HEAD still refers to branch master and so indirectly now",
      "       refers to commit d:",
      "",
      "           $ edit; git add; git commit",
      "",
      "                          HEAD (refers to branch 'master')",
      "                           |",
      "                           v",
      "           a---b---c---d  branch 'master' (refers to commit 'd')",
      "               ^",
      "               |",
      "             tag 'v2.0' (refers to commit 'b')",
      "",
      "",
      "       It is sometimes useful to be able to checkout a commit that is not at",
      "       the tip of any named branch, or even to create a new commit that is not",
      "       referenced by a named branch. Let’s look at what happens when we",
      "       checkout commit b (here we show two ways this may be done):",
      "",
      "           $ git checkout v2.0  # or",
      "           $ git checkout master^^",
      "",
      "              HEAD (refers to commit 'b')",
      "               |",
      "               v",
      "           a---b---c---d  branch 'master' (refers to commit 'd')",
      "               ^",
      "               |",
      "             tag 'v2.0' (refers to commit 'b')",
      "",
      "",
      "       Notice that regardless of which checkout command we use, HEAD now",
      "       refers directly to commit b. This is known as being in detached HEAD",
      "       state. It means simply that HEAD refers to a specific commit, as",
      "       opposed to referring to a named branch. Let’s see what happens when we",
      "       create a commit:",
      "",
      "           $ edit; git add; git commit",
      "",
      "                HEAD (refers to commit 'e')",
      "                 |",
      "                 v",
      "                 e",
      "                /",
      "           a---b---c---d  branch 'master' (refers to commit 'd')",
      "               ^",
      "               |",
      "             tag 'v2.0' (refers to commit 'b')",
      "",
      "",
      "       There is now a new commit e, but it is referenced only by HEAD. We can",
      "       of course add yet another commit in this state:",
      "",
      "           $ edit; git add; git commit",
      "",
      "                    HEAD (refers to commit 'f')",
      "                     |",
      "                     v",
      "                 e---f",
      "                /",
      "           a---b---c---d  branch 'master' (refers to commit 'd')",
      "               ^",
      "               |",
      "             tag 'v2.0' (refers to commit 'b')",
      "",
      "",
      "       In fact, we can perform all the normal Git operations. But, let’s look",
      "       at what happens when we then checkout master:",
      "",
      "           $ git checkout master",
      "",
      "                          HEAD (refers to branch 'master')",
      "                 e---f     |",
      "                /          v",
      "           a---b---c---d  branch 'master' (refers to commit 'd')",
      "               ^",
      "               |",
      "             tag 'v2.0' (refers to commit 'b')",
      "",
      "",
      "       It is important to realize that at this point nothing refers to commit",
      "       f. Eventually commit f (and by extension commit e) will be deleted by",
      "       the routine Git garbage collection process, unless we create a",
      "       reference before that happens. If we have not yet moved away from",
      "       commit f, any of these will create a reference to it:",
      "",
      "           $ git checkout -b foo   (1)",
      "           $ git branch foo        (2)",
      "           $ git tag foo           (3)",
      "",
      "",
      "       1. creates a new branch foo, which refers to commit f, and then updates",
      "       HEAD to refer to branch foo. In other words, we’ll no longer be in",
      "       detached HEAD state after this command.",
      "       2. similarly creates a new branch foo, which refers to commit f, but",
      "       leaves HEAD detached.",
      "       3. creates a new tag foo, which refers to commit f, leaving HEAD",
      "       detached.",
      "",
      "       If we have moved away from commit f, then we must first recover its",
      "       object name (typically by using git reflog), and then we can create a",
      "       reference to it. For example, to see the last two commits to which HEAD",
      "       referred, we can use either of these commands:",
      "",
      "           $ git reflog -2 HEAD # or",
      "           $ git log -g -2 HEAD",
      "",
      "",
      "EXAMPLES",
      "        1. The following sequence checks out the master branch, reverts the",
      "           Makefile to two revisions back, deletes hello.c by mistake, and",
      "           gets it back from the index.",
      "",
      "               $ git checkout master             (1)",
      "               $ git checkout master~2 Makefile  (2)",
      "               $ rm -f hello.c",
      "               $ git checkout hello.c            (3)",
      "",
      "           1. switch branch",
      "           2. take a file out of another commit",
      "           3. restore hello.c from the index",
      "",
      "           If you want to check out all C source files out of the index, you",
      "           can say",
      "",
      "               $ git checkout -- '*.c'",
      "",
      "           Note the quotes around *.c. The file hello.c will also be checked",
      "           out, even though it is no longer in the working tree, because the",
      "           file globbing is used to match entries in the index (not in the",
      "           working tree by the shell).",
      "",
      "           If you have an unfortunate branch that is named hello.c, this step",
      "           would be confused as an instruction to switch to that branch. You",
      "           should instead write:",
      "",
      "               $ git checkout -- hello.c",
      "",
      "",
      "        2. After working in the wrong branch, switching to the correct branch",
      "           would be done using:",
      "",
      "               $ git checkout mytopic",
      "",
      "           However, your \"wrong\" branch and correct \"mytopic\" branch may",
      "           differ in files that you have modified locally, in which case the",
      "           above checkout would fail like this:",
      "",
      "               $ git checkout mytopic",
      "               error: You have local changes to 'frotz'; not switching branches.",
      "",
      "           You can give the -m flag to the command, which would try a",
      "           three-way merge:",
      "",
      "               $ git checkout -m mytopic",
      "               Auto-merging frotz",
      "",
      "           After this three-way merge, the local modifications are not",
      "           registered in your index file, so git diff would show you what",
      "           changes you made since the tip of the new branch.",
      "",
      "        3. When a merge conflict happens during switching branches with the -m",
      "           option, you would see something like this:",
      "",
      "               $ git checkout -m mytopic",
      "               Auto-merging frotz",
      "               ERROR: Merge conflict in frotz",
      "               fatal: merge program failed",
      "",
      "           At this point, git diff shows the changes cleanly merged as in the",
      "           previous example, as well as the changes in the conflicted files.",
      "           Edit and resolve the conflict and mark it resolved with git add as",
      "           usual:",
      "",
      "               $ edit frotz",
      "               $ git add frotz",
      "",
      "",
      "GIT",
      "       Part of the git(1) suite",
      "",
      "",
      "",
      "Git 1.9.1                         03/21/2016                   GIT-CHECKOUT(1)"
   };
   TStrStrVectPair gitPair("git-checkout", strVect);
   m_gitCmdMap.insert(gitPair);
}

void GitJsonText::LoadGitAdd()
{
   TStrVect strVect =
   {
      "GIT-ADD(1)                        Git Manual                        GIT-ADD(1)",
      "",
      "",
      "",
      "NAME",
      "       git-add - Add file contents to the index",
      "",
      "SYNOPSIS",
      "       git add [-n] [-v] [--force | -f] [--interactive | -i] [--patch | -p]",
      "                 [--edit | -e] [--[no-]all | --[no-]ignore-removal | [--update | -u]]",
      "                 [--intent-to-add | -N] [--refresh] [--ignore-errors] [--ignore-missing]",
      "                 [--] [<pathspec>...]",
      "",
      "",
      "DESCRIPTION",
      "       This command updates the index using the current content found in the",
      "       working tree, to prepare the content staged for the next commit. It",
      "       typically adds the current content of existing paths as a whole, but",
      "       with some options it can also be used to add content with only part of",
      "       the changes made to the working tree files applied, or remove paths",
      "       that do not exist in the working tree anymore.",
      "",
      "       The \"index\" holds a snapshot of the content of the working tree, and it",
      "       is this snapshot that is taken as the contents of the next commit. Thus",
      "       after making any changes to the working directory, and before running",
      "       the commit command, you must use the add command to add any new or",
      "       modified files to the index.",
      "",
      "       This command can be performed multiple times before a commit. It only",
      "       adds the content of the specified file(s) at the time the add command",
      "       is run; if you want subsequent changes included in the next commit,",
      "       then you must run git add again to add the new content to the index.",
      "",
      "       The git status command can be used to obtain a summary of which files",
      "       have changes that are staged for the next commit.",
      "",
      "       The git add command will not add ignored files by default. If any",
      "       ignored files were explicitly specified on the command line, git add",
      "       will fail with a list of ignored files. Ignored files reached by",
      "       directory recursion or filename globbing performed by Git (quote your",
      "       globs before the shell) will be silently ignored. The git add command",
      "       can be used to add ignored files with the -f (force) option.",
      "",
      "       Please see git-commit(1) for alternative ways to add content to a",
      "       commit.",
      "",
      "OPTIONS",
      "       <pathspec>...",
      "           Files to add content from. Fileglobs (e.g.  *.c) can be given to",
      "           add all matching files. Also a leading directory name (e.g.  dir to",
      "           add dir/file1 and dir/file2) can be given to add all files in the",
      "           directory, recursively.",
      "",
      "       -n, --dry-run",
      "           Don’t actually add the file(s), just show if they exist and/or will",
      "           be ignored.",
      "",
      "       -v, --verbose",
      "           Be verbose.",
      "",
      "       -f, --force",
      "           Allow adding otherwise ignored files.",
      "",
      "       -i, --interactive",
      "           Add modified contents in the working tree interactively to the",
      "           index. Optional path arguments may be supplied to limit operation",
      "           to a subset of the working tree. See “Interactive mode” for",
      "           details.",
      "",
      "       -p, --patch",
      "           Interactively choose hunks of patch between the index and the work",
      "           tree and add them to the index. This gives the user a chance to",
      "           review the difference before adding modified contents to the index.",
      "",
      "           This effectively runs add --interactive, but bypasses the initial",
      "           command menu and directly jumps to the patch subcommand. See",
      "           “Interactive mode” for details.",
      "",
      "       -e, --edit",
      "           Open the diff vs. the index in an editor and let the user edit it.",
      "           After the editor was closed, adjust the hunk headers and apply the",
      "           patch to the index.",
      "",
      "           The intent of this option is to pick and choose lines of the patch",
      "           to apply, or even to modify the contents of lines to be staged.",
      "           This can be quicker and more flexible than using the interactive",
      "           hunk selector. However, it is easy to confuse oneself and create a",
      "           patch that does not apply to the index. See EDITING PATCHES below.",
      "",
      "       -u, --update",
      "           Update the index just where it already has an entry matching",
      "           <pathspec>. This removes as well as modifies index entries to match",
      "           the working tree, but adds no new files.",
      "",
      "           If no <pathspec> is given, the current version of Git defaults to",
      "           \".\"; in other words, update all tracked files in the current",
      "           directory and its subdirectories. This default will change in a",
      "           future version of Git, hence the form without <pathspec> should not",
      "           be used.",
      "",
      "       -A, --all, --no-ignore-removal",
      "           Update the index not only where the working tree has a file",
      "           matching <pathspec> but also where the index already has an entry.",
      "           This adds, modifies, and removes index entries to match the working",
      "           tree.",
      "",
      "           If no <pathspec> is given, the current version of Git defaults to",
      "           \".\"; in other words, update all files in the current directory and",
      "           its subdirectories. This default will change in a future version of",
      "           Git, hence the form without <pathspec> should not be used.",
      "",
      "       --no-all, --ignore-removal",
      "           Update the index by adding new files that are unknown to the index",
      "           and files modified in the working tree, but ignore files that have",
      "           been removed from the working tree. This option is a no-op when no",
      "           <pathspec> is used.",
      "",
      "           This option is primarily to help the current users of Git, whose",
      "           \"git add <pathspec>...\" ignores removed files. In future versions",
      "           of Git, \"git add <pathspec>...\" will be a synonym to \"git add -A",
      "           <pathspec>...\" and \"git add --ignore-removal <pathspec>...\" will",
      "           behave like today’s \"git add <pathspec>...\", ignoring removed",
      "           files.",
      "",
      "       -N, --intent-to-add",
      "           Record only the fact that the path will be added later. An entry",
      "           for the path is placed in the index with no content. This is useful",
      "           for, among other things, showing the unstaged content of such files",
      "           with git diff and committing them with git commit -a.",
      "",
      "       --refresh",
      "           Don’t add the file(s), but only refresh their stat() information in",
      "           the index.",
      "",
      "       --ignore-errors",
      "           If some files could not be added because of errors indexing them,",
      "           do not abort the operation, but continue adding the others. The",
      "           command shall still exit with non-zero status. The configuration",
      "           variable add.ignoreErrors can be set to true to make this the",
      "           default behaviour.",
      "",
      "       --ignore-missing",
      "           This option can only be used together with --dry-run. By using this",
      "           option the user can check if any of the given files would be",
      "           ignored, no matter if they are already present in the work tree or",
      "           not.",
      "",
      "       --",
      "           This option can be used to separate command-line options from the",
      "           list of files, (useful when filenames might be mistaken for",
      "           command-line options).",
      "",
      "CONFIGURATION",
      "       The optional configuration variable core.excludesfile indicates a path",
      "       to a file containing patterns of file names to exclude from git-add,",
      "       similar to $GIT_DIR/info/exclude. Patterns in the exclude file are used",
      "       in addition to those in info/exclude. See gitignore(5).",
      "",
      "EXAMPLES",
      "       ·   Adds content from all *.txt files under Documentation directory and",
      "           its subdirectories:",
      "",
      "               $ git add Documentation/\\*.txt",
      "",
      "           Note that the asterisk * is quoted from the shell in this example;",
      "           this lets the command include the files from subdirectories of",
      "           Documentation/ directory.",
      "",
      "       ·   Considers adding content from all git-*.sh scripts:",
      "",
      "               $ git add git-*.sh",
      "",
      "           Because this example lets the shell expand the asterisk (i.e. you",
      "           are listing the files explicitly), it does not consider",
      "           subdir/git-foo.sh.",
      "",
      "INTERACTIVE MODE",
      "       When the command enters the interactive mode, it shows the output of",
      "       the status subcommand, and then goes into its interactive command loop.",
      "",
      "       The command loop shows the list of subcommands available, and gives a",
      "       prompt \"What now> \". In general, when the prompt ends with a single >,",
      "       you can pick only one of the choices given and type return, like this:",
      "",
      "               *** Commands ***",
      "                 1: status       2: update       3: revert       4: add untracked",
      "                 5: patch        6: diff         7: quit         8: help",
      "               What now> 1",
      "",
      "",
      "       You also could say s or sta or status above as long as the choice is",
      "       unique.",
      "",
      "       The main command loop has 6 subcommands (plus help and quit).",
      "",
      "       status",
      "           This shows the change between HEAD and index (i.e. what will be",
      "           committed if you say git commit), and between index and working",
      "           tree files (i.e. what you could stage further before git commit",
      "           using git add) for each path. A sample output looks like this:",
      "",
      "                             staged     unstaged path",
      "                    1:       binary      nothing foo.png",
      "                    2:     +403/-35        +1/-1 git-add--interactive.perl",
      "",
      "           It shows that foo.png has differences from HEAD (but that is binary",
      "           so line count cannot be shown) and there is no difference between",
      "           indexed copy and the working tree version (if the working tree",
      "           version were also different, binary would have been shown in place",
      "           of nothing). The other file, git-add--interactive.perl, has 403",
      "           lines added and 35 lines deleted if you commit what is in the",
      "           index, but working tree file has further modifications (one",
      "           addition and one deletion).",
      "",
      "       update",
      "           This shows the status information and issues an \"Update>>\" prompt.",
      "           When the prompt ends with double >>, you can make more than one",
      "           selection, concatenated with whitespace or comma. Also you can say",
      "           ranges. E.g. \"2-5 7,9\" to choose 2,3,4,5,7,9 from the list. If the",
      "           second number in a range is omitted, all remaining patches are",
      "           taken. E.g. \"7-\" to choose 7,8,9 from the list. You can say * to",
      "           choose everything.",
      "",
      "           What you chose are then highlighted with *, like this:",
      "",
      "                          staged     unstaged path",
      "                 1:       binary      nothing foo.png",
      "               * 2:     +403/-35        +1/-1 git-add--interactive.perl",
      "",
      "           To remove selection, prefix the input with - like this:",
      "",
      "               Update>> -2",
      "",
      "           After making the selection, answer with an empty line to stage the",
      "           contents of working tree files for selected paths in the index.",
      "",
      "       revert",
      "           This has a very similar UI to update, and the staged information",
      "           for selected paths are reverted to that of the HEAD version.",
      "           Reverting new paths makes them untracked.",
      "",
      "       add untracked",
      "           This has a very similar UI to update and revert, and lets you add",
      "           untracked paths to the index.",
      "",
      "       patch",
      "           This lets you choose one path out of a status like selection. After",
      "           choosing the path, it presents the diff between the index and the",
      "           working tree file and asks you if you want to stage the change of",
      "           each hunk. You can select one of the following options and type",
      "           return:",
      "",
      "               y - stage this hunk",
      "               n - do not stage this hunk",
      "               q - quit; do not stage this hunk nor any of the remaining ones",
      "               a - stage this hunk and all later hunks in the file",
      "               d - do not stage this hunk nor any of the later hunks in the file",
      "               g - select a hunk to go to",
      "               / - search for a hunk matching the given regex",
      "               j - leave this hunk undecided, see next undecided hunk",
      "               J - leave this hunk undecided, see next hunk",
      "               k - leave this hunk undecided, see previous undecided hunk",
      "               K - leave this hunk undecided, see previous hunk",
      "               s - split the current hunk into smaller hunks",
      "               e - manually edit the current hunk",
      "               ? - print help",
      "",
      "           After deciding the fate for all hunks, if there is any hunk that",
      "           was chosen, the index is updated with the selected hunks.",
      "",
      "           You can omit having to type return here, by setting the",
      "           configuration variable interactive.singlekey to true.",
      "",
      "       diff",
      "           This lets you review what will be committed (i.e. between HEAD and",
      "           index).",
      "",
      "EDITING PATCHES",
      "       Invoking git add -e or selecting e from the interactive hunk selector",
      "       will open a patch in your editor; after the editor exits, the result is",
      "       applied to the index. You are free to make arbitrary changes to the",
      "       patch, but note that some changes may have confusing results, or even",
      "       result in a patch that cannot be applied. If you want to abort the",
      "       operation entirely (i.e., stage nothing new in the index), simply",
      "       delete all lines of the patch. The list below describes some common",
      "       things you may see in a patch, and which editing operations make sense",
      "       on them.",
      "",
      "       added content",
      "           Added content is represented by lines beginning with \"+\". You can",
      "           prevent staging any addition lines by deleting them.",
      "",
      "       removed content",
      "           Removed content is represented by lines beginning with \"-\". You can",
      "           prevent staging their removal by converting the \"-\" to a \" \"",
      "           (space).",
      "",
      "       modified content",
      "           Modified content is represented by \"-\" lines (removing the old",
      "           content) followed by \"+\" lines (adding the replacement content).",
      "           You can prevent staging the modification by converting \"-\" lines to",
      "           \" \", and removing \"+\" lines. Beware that modifying only half of the",
      "           pair is likely to introduce confusing changes to the index.",
      "",
      "       There are also more complex operations that can be performed. But",
      "       beware that because the patch is applied only to the index and not the",
      "       working tree, the working tree will appear to \"undo\" the change in the",
      "       index. For example, introducing a new line into the index that is in",
      "       neither the HEAD nor the working tree will stage the new line for",
      "       commit, but the line will appear to be reverted in the working tree.",
      "",
      "       Avoid using these constructs, or do so with extreme caution.",
      "",
      "       removing untouched content",
      "           Content which does not differ between the index and working tree",
      "           may be shown on context lines, beginning with a \" \" (space). You",
      "           can stage context lines for removal by converting the space to a",
      "           \"-\". The resulting working tree file will appear to re-add the",
      "           content.",
      "",
      "       modifying existing content",
      "           One can also modify context lines by staging them for removal (by",
      "           converting \" \" to \"-\") and adding a \"+\" line with the new content.",
      "           Similarly, one can modify \"+\" lines for existing additions or",
      "           modifications. In all cases, the new modification will appear",
      "           reverted in the working tree.",
      "",
      "       new content",
      "           You may also add new content that does not exist in the patch;",
      "           simply add new lines, each starting with \"+\". The addition will",
      "           appear reverted in the working tree.",
      "",
      "       There are also several operations which should be avoided entirely, as",
      "       they will make the patch impossible to apply:",
      "",
      "       ·   adding context (\" \") or removal (\"-\") lines",
      "",
      "       ·   deleting context or removal lines",
      "",
      "       ·   modifying the contents of context or removal lines",
      "",
      "SEE ALSO",
      "       git-status(1) git-rm(1) git-reset(1) git-mv(1) git-commit(1) git-",
      "       update-index(1)",
      "",
      "GIT",
      "       Part of the git(1) suite",
      "",
      "",
      "",
      "Git 1.9.1                         03/21/2016                        GIT-ADD(1)"
   };
   TStrStrVectPair gitPair("git-add", strVect);
   m_gitCmdMap.insert(gitPair);
}

void GitJsonText::LoadGitClone()
{
   TStrVect strVect =
   {

      "GIT-CLONE(1)                                                        Git Manual                                                        GIT-CLONE(1)",
      ""
      ""
      ""
      "NAME",
      "       git-clone - Clone a repository into a new directory",
      ""
      "SYNOPSIS",
      "       git clone [--template=<template_directory>]",
      "                 [-l] [-s] [--no-hardlinks] [-q] [-n] [--bare] [--mirror]",
      "                 [-o <name>] [-b <name>] [-u <upload-pack>] [--reference <repository>]",
      "                 [--separate-git-dir <git dir>]",
      "                 [--depth <depth>] [--[no-]single-branch]",
      "                 [--recursive | --recurse-submodules] [--] <repository>",
      "                 [<directory>]",
      ""
      ""
      "DESCRIPTION",
      "       Clones a repository into a newly created directory, creates remote-tracking branches for each branch in the cloned repository (visible",
      "       using git branch -r), and creates and checks out an initial branch that is forked from the cloned repository’s currently active branch.",
      ""
      "       After the clone, a plain git fetch without arguments will update all the remote-tracking branches, and a git pull without arguments will in",
      "       addition merge the remote master branch into the current master branch, if any (this is untrue when \"--single-branch\" is given; see below).",
      ""
      "       This default configuration is achieved by creating references to the remote branch heads under refs/remotes/origin and by initializing",
      "       remote.origin.url and remote.origin.fetch configuration variables.",
      ""
      "OPTIONS",
      "       --local, -l",
      "           When the repository to clone from is on a local machine, this flag bypasses the normal \"Git aware\" transport mechanism and clones the",
      "           repository by making a copy of HEAD and everything under objects and refs directories. The files under .git/objects/ directory are",
      "           hardlinked to save space when possible.",
      ""
      "           If the repository is specified as a local path (e.g., /path/to/repo), this is the default, and --local is essentially a no-op. If the",
      "           repository is specified as a URL, then this flag is ignored (and we never use the local optimizations). Specifying --no-local will",
      "           override the default when /path/to/repo is given, using the regular Git transport instead.",
      ""
      "           To force copying instead of hardlinking (which may be desirable if you are trying to make a back-up of your repository), but still",
      "           avoid the usual \"Git aware\" transport mechanism, --no-hardlinks can be used.",
      ""
      "       --no-hardlinks",
      "           Optimize the cloning process from a repository on a local filesystem by copying files under .git/objects directory.",
      ""
      "       --shared, -s",
      "           When the repository to clone is on the local machine, instead of using hard links, automatically setup .git/objects/info/alternates to",
      "           share the objects with the source repository. The resulting repository starts out without any object of its own.",
      ""
      "           NOTE: this is a possibly dangerous operation; do not use it unless you understand what it does. If you clone your repository using this",
      "           option and then delete branches (or use any other Git command that makes any existing commit unreferenced) in the source repository,",
      "           some objects may become unreferenced (or dangling). These objects may be removed by normal Git operations (such as git commit) which",
      "           automatically call git gc --auto. (See git-gc(1).) If these objects are removed and were referenced by the cloned repository, then the",
      "           cloned repository will become corrupt.",
      ""
      "           Note that running git repack without the -l option in a repository cloned with -s will copy objects from the source repository into a",
      "           pack in the cloned repository, removing the disk space savings of clone -s. It is safe, however, to run git gc, which uses the -l",
      "           option by default.",
      ""
      "           If you want to break the dependency of a repository cloned with -s on its source repository, you can simply run git repack -a to copy",
      "           all objects from the source repository into a pack in the cloned repository.",
      ""
      "       --reference <repository>",
      "           If the reference repository is on the local machine, automatically setup .git/objects/info/alternates to obtain objects from the",
      "           reference repository. Using an already existing repository as an alternate will require fewer objects to be copied from the repository",
      "           being cloned, reducing network and local storage costs.",
      ""
      "           NOTE: see the NOTE for the --shared option.",
      ""
      "       --quiet, -q",
      "           Operate quietly. Progress is not reported to the standard error stream. This flag is also passed to the ‘rsync’ command when given.",
      ""
      "       --verbose, -v",
      "           Run verbosely. Does not affect the reporting of progress status to the standard error stream.",
      ""
      "       --progress",
      "           Progress status is reported on the standard error stream by default when it is attached to a terminal, unless -q is specified. This",
      "           flag forces progress status even if the standard error stream is not directed to a terminal.",
      ""
      "       --no-checkout, -n",
      "           No checkout of HEAD is performed after the clone is complete.",
      ""
      "       --bare",
      "           Make a bare Git repository. That is, instead of creating <directory> and placing the administrative files in <directory>/.git, make the",
      "           <directory> itself the $GIT_DIR. This obviously implies the -n because there is nowhere to check out the working tree. Also the branch",
      "           heads at the remote are copied directly to corresponding local branch heads, without mapping them to refs/remotes/origin/. When this",
      "           option is used, neither remote-tracking branches nor the related configuration variables are created.",
      ""
      "       --mirror",
      "           Set up a mirror of the source repository. This implies --bare. Compared to --bare, --mirror not only maps local branches of the source",
      "           to local branches of the target, it maps all refs (including remote-tracking branches, notes etc.) and sets up a refspec configuration",
      "           such that all these refs are overwritten by a git remote update in the target repository.",
      ""
      "       --origin <name>, -o <name>",
      "           Instead of using the remote name origin to keep track of the upstream repository, use <name>.",
      ""
      "       --branch <name>, -b <name>",
      "           Instead of pointing the newly created HEAD to the branch pointed to by the cloned repository’s HEAD, point to <name> branch instead. In",
      "           a non-bare repository, this is the branch that will be checked out.  --branch can also take tags and detaches the HEAD at that commit",
      "           in the resulting repository.",
      ""
      "       --upload-pack <upload-pack>, -u <upload-pack>",
      "           When given, and the repository to clone from is accessed via ssh, this specifies a non-default path for the command run on the other",
      "           end.",
      ""
      "       --template=<template_directory>",
      "           Specify the directory from which templates will be used; (See the \"TEMPLATE DIRECTORY\" section of git-init(1).)",
      ""
      "       --config <key>=<value>, -c <key>=<value>",
      "           Set a configuration variable in the newly-created repository; this takes effect immediately after the repository is initialized, but",
      "           before the remote history is fetched or any files checked out. The key is in the same format as expected by git-config(1) (e.g.,",
      "           core.eol=true). If multiple values are given for the same key, each value will be written to the config file. This makes it safe, for",
      "           example, to add additional fetch refspecs to the origin remote.",
      ""
      "       --depth <depth>",
      "           Create a shallow clone with a history truncated to the specified number of revisions.",
      ""
      "       --[no-]single-branch",
      "           Clone only the history leading to the tip of a single branch, either specified by the --branch option or the primary branch remote’s",
      "           HEAD points at. When creating a shallow clone with the --depth option, this is the default, unless --no-single-branch is given to fetch",
      "           the histories near the tips of all branches. Further fetches into the resulting repository will only update the remote-tracking branch",
      "           for the branch this option was used for the initial cloning. If the HEAD at the remote did not point at any branch when --single-branch",
      "           clone was made, no remote-tracking branch is created.",
      ""
      "       --recursive, --recurse-submodules",
      "           After the clone is created, initialize all submodules within, using their default settings. This is equivalent to running git submodule",
      "           update --init --recursive immediately after the clone is finished. This option is ignored if the cloned repository does not have a",
      "           worktree/checkout (i.e. if any of --no-checkout/-n, --bare, or --mirror is given)",
      ""
      "       --separate-git-dir=<git dir>",
      "           Instead of placing the cloned repository where it is supposed to be, place the cloned repository at the specified directory, then make",
      "           a filesystem-agnostic Git symbolic link to there. The result is Git repository can be separated from working tree.",
      ""
      "       <repository>",
      "           The (possibly remote) repository to clone from. See the URLS section below for more information on specifying repositories.",
      ""
      "       <directory>",
      "           The name of a new directory to clone into. The \"humanish\" part of the source repository is used if no directory is explicitly given",
      "           (repo for /path/to/repo.git and foo for host.xz:foo/.git). Cloning into an existing directory is only allowed if the directory is",
      "           empty.",
      ""
      "GIT URLS",
      "       In general, URLs contain information about the transport protocol, the address of the remote server, and the path to the repository.",
      "       Depending on the transport protocol, some of this information may be absent.",
      ""
      "       Git supports ssh, git, http, and https protocols (in addition, ftp, and ftps can be used for fetching and rsync can be used for fetching",
      "       and pushing, but these are inefficient and deprecated; do not use them).",
      ""
      "       The native transport (i.e. git:// URL) does no authentication and should be used with caution on unsecured networks.",
      ""
      "       The following syntaxes may be used with them:",
      ""
      "       ·   ssh://[user@]host.xz[:port]/path/to/repo.git/",
      ""
      "       ·   git://host.xz[:port]/path/to/repo.git/",
      ""
      "       ·   http[s]://host.xz[:port]/path/to/repo.git/",
      ""
      "       ·   ftp[s]://host.xz[:port]/path/to/repo.git/",
      ""
      "       ·   rsync://host.xz/path/to/repo.git/",
      ""
      "       An alternative scp-like syntax may also be used with the ssh protocol:",
      ""
      "       ·   [user@]host.xz:path/to/repo.git/",
      ""
      "       This syntax is only recognized if there are no slashes before the first colon. This helps differentiate a local path that contains a colon.",
      "       For example the local path foo:bar could be specified as an absolute path or ./foo:bar to avoid being misinterpreted as an ssh url.",
      ""
      "       The ssh and git protocols additionally support ~username expansion:",
      ""
      "       ·   ssh://[user@]host.xz[:port]/~[user]/path/to/repo.git/",
      ""
      "       ·   git://host.xz[:port]/~[user]/path/to/repo.git/",
      ""
      "       ·   [user@]host.xz:/~[user]/path/to/repo.git/",
      ""
      "       For local repositories, also supported by Git natively, the following syntaxes may be used:",
      ""
      "       ·   /path/to/repo.git/",
      ""
      "       ·   file:///path/to/repo.git/",
      ""
      "       These two syntaxes are mostly equivalent, except the former implies --local option.",
      ""
      "       When Git doesn’t know how to handle a certain transport protocol, it attempts to use the remote-<transport> remote helper, if one exists.",
      "       To explicitly request a remote helper, the following syntax may be used:",
      ""
      "       ·   <transport>::<address>",
      ""
      "       where <address> may be a path, a server and path, or an arbitrary URL-like string recognized by the specific remote helper being invoked.",
      "       See gitremote-helpers(1) for details.",
      ""
      "       If there are a large number of similarly-named remote repositories and you want to use a different format for them (such that the URLs you",
      "       use will be rewritten into URLs that work), you can create a configuration section of the form:",
      ""
      "                   [url \"<actual url base>\"]",
      "                           insteadOf = <other url base>",
      ""
      ""
      "       For example, with this:",
      ""
      "                   [url \"git://git.host.xz/\"]",
      "                           insteadOf = host.xz:/path/to/",
      "                           insteadOf = work:",
      ""
      ""
      "       a URL like \"work:repo.git\" or like \"host.xz:/path/to/repo.git\" will be rewritten in any context that takes a URL to be",
      "       \"git://git.host.xz/repo.git\".",
      ""
      "       If you want to rewrite URLs for push only, you can create a configuration section of the form:",
      ""
      "                   [url \"<actual url base>\"]",
      "                           pushInsteadOf = <other url base>",
      ""
      ""
      "       For example, with this:",
      ""
      "                   [url \"ssh://example.org/\"]",
      "                           pushInsteadOf = git://example.org/",
      ""
      ""
      "       a URL like \"git://example.org/path/to/repo.git\" will be rewritten to \"ssh://example.org/path/to/repo.git\" for pushes, but pulls will still",
      "       use the original URL.",
      ""
      "EXAMPLES",
      "       ·   Clone from upstream:",
      ""
      "               $ git clone git://git.kernel.org/pub/scm/.../linux.git my-linux",
      "               $ cd my-linux",
      "               $ make",
      ""
      ""
      "       ·   Make a local clone that borrows from the current directory, without checking things out:",
      ""
      "               $ git clone -l -s -n . ../copy",
      "               $ cd ../copy",
      "               $ git show-branch",
      ""
      ""
      "       ·   Clone from upstream while borrowing from an existing local directory:",
      ""
      "               $ git clone --reference /git/linux.git \\",
      "                       git://git.kernel.org/pub/scm/.../linux.git \\",
      "                       my-linux",
      "               $ cd my-linux",
      ""
      ""
      "       ·   Create a bare repository to publish your changes to the public:",
      ""
      "               $ git clone --bare -l /home/proj/.git /pub/scm/proj.git",
      ""
      ""
      "GIT",
      "       Part of the git(1) suite",
      ""
      ""
      ""
      "Git 1.9.1                                                           03/21/2016                                                        GIT-CLONE(1)",
   };
   TStrStrVectPair gitPair("git-clone", strVect);
   m_gitCmdMap.insert(gitPair);
}

void GitJsonText::LoadGitRebase()
{
   TStrVect strVect =
   {
      "GIT-REBASE(1)                     Git Manual                     GIT-REBASE(1)",
      "",
      "",
      "",
      "NAME",
      "       git-rebase - Forward-port local commits to the updated upstream head",
      "",
      "SYNOPSIS",
      "       git rebase [-i | --interactive] [options] [--exec <cmd>] [--onto <newbase>]",
      "               [<upstream>] [<branch>]",
      "       git rebase [-i | --interactive] [options] [--exec <cmd>] [--onto <newbase>]",
      "               --root [<branch>]",
      "       git rebase --continue | --skip | --abort | --edit-todo",
      "",
      "",
      "DESCRIPTION",
      "       If <branch> is specified, git rebase will perform an automatic git",
      "       checkout <branch> before doing anything else. Otherwise it remains on",
      "       the current branch.",
      "",
      "       If <upstream> is not specified, the upstream configured in",
      "       branch.<name>.remote and branch.<name>.merge options will be used; see",
      "       git-config(1) for details. If you are currently not on any branch or if",
      "       the current branch does not have a configured upstream, the rebase will",
      "       abort.",
      "",
      "       All changes made by commits in the current branch but that are not in",
      "       <upstream> are saved to a temporary area. This is the same set of",
      "       commits that would be shown by git log <upstream>..HEAD (or git log",
      "       HEAD, if --root is specified).",
      "",
      "       The current branch is reset to <upstream>, or <newbase> if the --onto",
      "       option was supplied. This has the exact same effect as git reset --hard",
      "       <upstream> (or <newbase>). ORIG_HEAD is set to point at the tip of the",
      "       branch before the reset.",
      "",
      "       The commits that were previously saved into the temporary area are then",
      "       reapplied to the current branch, one by one, in order. Note that any",
      "       commits in HEAD which introduce the same textual changes as a commit in",
      "       HEAD..<upstream> are omitted (i.e., a patch already accepted upstream",
      "       with a different commit message or timestamp will be skipped).",
      "",
      "       It is possible that a merge failure will prevent this process from",
      "       being completely automatic. You will have to resolve any such merge",
      "       failure and run git rebase --continue. Another option is to bypass the",
      "       commit that caused the merge failure with git rebase --skip. To check",
      "       out the original <branch> and remove the .git/rebase-apply working",
      "       files, use the command git rebase --abort instead.",
      "",
      "       Assume the following history exists and the current branch is \"topic\":",
      "",
      "                     A---B---C topic",
      "                    /",
      "               D---E---F---G master",
      "",
      "",
      "       From this point, the result of either of the following commands:",
      "",
      "           git rebase master",
      "           git rebase master topic",
      "",
      "       would be:",
      "",
      "                             A'--B'--C' topic",
      "                            /",
      "               D---E---F---G master",
      "",
      "",
      "       NOTE: The latter form is just a short-hand of git checkout topic",
      "       followed by git rebase master. When rebase exits topic will remain the",
      "       checked-out branch.",
      "",
      "       If the upstream branch already contains a change you have made (e.g.,",
      "       because you mailed a patch which was applied upstream), then that",
      "       commit will be skipped. For example, running ‘git rebase master` on the",
      "       following history (in which A’ and A introduce the same set of changes,",
      "       but have different committer information):",
      "",
      "                     A---B---C topic",
      "                    /",
      "               D---E---A'---F master",
      "",
      "",
      "       will result in:",
      "",
      "                              B'---C' topic",
      "                             /",
      "               D---E---A'---F master",
      "",
      "",
      "       Here is how you would transplant a topic branch based on one branch to",
      "       another, to pretend that you forked the topic branch from the latter",
      "       branch, using rebase --onto.",
      "",
      "       First let’s assume your topic is based on branch next. For example, a",
      "       feature developed in topic depends on some functionality which is found",
      "       in next.",
      "",
      "               o---o---o---o---o  master",
      "                    \\",
      "                     o---o---o---o---o  next",
      "                                      \\",
      "                                       o---o---o  topic",
      "",
      "",
      "       We want to make topic forked from branch master; for example, because",
      "       the functionality on which topic depends was merged into the more",
      "       stable master branch. We want our tree to look like this:",
      "",
      "               o---o---o---o---o  master",
      "                   |            \\",
      "                   |             o'--o'--o'  topic",
      "                    \\",
      "                     o---o---o---o---o  next",
      "",
      "",
      "       We can get this using the following command:",
      "",
      "           git rebase --onto master next topic",
      "",
      "       Another example of --onto option is to rebase part of a branch. If we",
      "       have the following situation:",
      "",
      "                                       H---I---J topicB",
      "                                      /",
      "                             E---F---G  topicA",
      "                            /",
      "               A---B---C---D  master",
      "",
      "",
      "       then the command",
      "",
      "           git rebase --onto master topicA topicB",
      "",
      "       would result in:",
      "",
      "                            H'--I'--J'  topicB",
      "                           /",
      "                           | E---F---G  topicA",
      "                           |/",
      "               A---B---C---D  master",
      "",
      "",
      "       This is useful when topicB does not depend on topicA.",
      "",
      "       A range of commits could also be removed with rebase. If we have the",
      "       following situation:",
      "",
      "               E---F---G---H---I---J  topicA",
      "",
      "",
      "       then the command",
      "",
      "           git rebase --onto topicA~5 topicA~3 topicA",
      "",
      "       would result in the removal of commits F and G:",
      "",
      "               E---H'---I'---J'  topicA",
      "",
      "",
      "       This is useful if F and G were flawed in some way, or should not be",
      "       part of topicA. Note that the argument to --onto and the <upstream>",
      "       parameter can be any valid commit-ish.",
      "",
      "       In case of conflict, git rebase will stop at the first problematic",
      "       commit and leave conflict markers in the tree. You can use git diff to",
      "       locate the markers (<<<<<<) and make edits to resolve the conflict. For",
      "       each file you edit, you need to tell Git that the conflict has been",
      "       resolved, typically this would be done with",
      "",
      "           git add <filename>",
      "",
      "       After resolving the conflict manually and updating the index with the",
      "       desired resolution, you can continue the rebasing process with",
      "",
      "           git rebase --continue",
      "",
      "       Alternatively, you can undo the git rebase with",
      "",
      "           git rebase --abort",
      "",
      "CONFIGURATION",
      "       rebase.stat",
      "           Whether to show a diffstat of what changed upstream since the last",
      "           rebase. False by default.",
      "",
      "       rebase.autosquash",
      "           If set to true enable --autosquash option by default.",
      "",
      "       rebase.autostash",
      "           If set to true enable --autostash option by default.",
      "",
      "OPTIONS",
      "       --onto <newbase>",
      "           Starting point at which to create the new commits. If the --onto",
      "           option is not specified, the starting point is <upstream>. May be",
      "           any valid commit, and not just an existing branch name.",
      "",
      "           As a special case, you may use \"A...B\" as a shortcut for the merge",
      "           base of A and B if there is exactly one merge base. You can leave",
      "           out at most one of A and B, in which case it defaults to HEAD.",
      "",
      "       <upstream>",
      "           Upstream branch to compare against. May be any valid commit, not",
      "           just an existing branch name. Defaults to the configured upstream",
      "           for the current branch.",
      "",
      "       <branch>",
      "           Working branch; defaults to HEAD.",
      "",
      "       --continue",
      "           Restart the rebasing process after having resolved a merge",
      "           conflict.",
      "",
      "       --abort",
      "           Abort the rebase operation and reset HEAD to the original branch.",
      "           If <branch> was provided when the rebase operation was started,",
      "           then HEAD will be reset to <branch>. Otherwise HEAD will be reset",
      "           to where it was when the rebase operation was started.",
      "",
      "       --keep-empty",
      "           Keep the commits that do not change anything from its parents in",
      "           the result.",
      "",
      "       --skip",
      "           Restart the rebasing process by skipping the current patch.",
      "",
      "       --edit-todo",
      "           Edit the todo list during an interactive rebase.",
      "",
      "       -m, --merge",
      "           Use merging strategies to rebase. When the recursive (default)",
      "           merge strategy is used, this allows rebase to be aware of renames",
      "           on the upstream side.",
      "",
      "           Note that a rebase merge works by replaying each commit from the",
      "           working branch on top of the <upstream> branch. Because of this,",
      "           when a merge conflict happens, the side reported as ours is the",
      "           so-far rebased series, starting with <upstream>, and theirs is the",
      "           working branch. In other words, the sides are swapped.",
      "",
      "       -s <strategy>, --strategy=<strategy>",
      "           Use the given merge strategy. If there is no -s option git",
      "           merge-recursive is used instead. This implies --merge.",
      "",
      "           Because git rebase replays each commit from the working branch on",
      "           top of the <upstream> branch using the given strategy, using the",
      "           ours strategy simply discards all patches from the <branch>, which",
      "           makes little sense.",
      "",
      "       -X <strategy-option>, --strategy-option=<strategy-option>",
      "           Pass the <strategy-option> through to the merge strategy. This",
      "           implies --merge and, if no strategy has been specified, -s",
      "           recursive. Note the reversal of ours and theirs as noted above for",
      "           the -m option.",
      "",
      "       -q, --quiet",
      "           Be quiet. Implies --no-stat.",
      "",
      "       -v, --verbose",
      "           Be verbose. Implies --stat.",
      "",
      "       --stat",
      "           Show a diffstat of what changed upstream since the last rebase. The",
      "           diffstat is also controlled by the configuration option",
      "           rebase.stat.",
      "",
      "       -n, --no-stat",
      "           Do not show a diffstat as part of the rebase process.",
      "",
      "       --no-verify",
      "           This option bypasses the pre-rebase hook. See also githooks(5).",
      "",
      "       --verify",
      "           Allows the pre-rebase hook to run, which is the default. This",
      "           option can be used to override --no-verify. See also githooks(5).",
      "",
      "       -C<n>",
      "           Ensure at least <n> lines of surrounding context match before and",
      "           after each change. When fewer lines of surrounding context exist",
      "           they all must match. By default no context is ever ignored.",
      "",
      "       -f, --force-rebase",
      "           Force the rebase even if the current branch is a descendant of the",
      "           commit you are rebasing onto. Normally non-interactive rebase will",
      "           exit with the message \"Current branch is up to date\" in such a",
      "           situation. Incompatible with the --interactive option.",
      "",
      "           You may find this (or --no-ff with an interactive rebase) helpful",
      "           after reverting a topic branch merge, as this option recreates the",
      "           topic branch with fresh commits so it can be remerged successfully",
      "           without needing to \"revert the reversion\" (see the",
      "           revert-a-faulty-merge How-To[1] for details).",
      "",
      "       --fork-point, --no-fork-point",
      "           Use git merge-base --fork-point to find a better common ancestor",
      "           between upstream and branch when calculating which commits have",
      "           have been introduced by branch (see git-merge-base(1)).",
      "",
      "           If no non-option arguments are given on the command line, then the",
      "           default is --fork-point @{u} otherwise the upstream argument is",
      "           interpreted literally unless the --fork-point option is specified.",
      "",
      "       --ignore-whitespace, --whitespace=<option>",
      "           These flag are passed to the git apply program (see git-apply(1))",
      "           that applies the patch. Incompatible with the --interactive option.",
      "",
      "       --committer-date-is-author-date, --ignore-date",
      "           These flags are passed to git am to easily change the dates of the",
      "           rebased commits (see git-am(1)). Incompatible with the",
      "           --interactive option.",
      "",
      "       -i, --interactive",
      "           Make a list of the commits which are about to be rebased. Let the",
      "           user edit that list before rebasing. This mode can also be used to",
      "           split commits (see SPLITTING COMMITS below).",
      "",
      "       -p, --preserve-merges",
      "           Instead of ignoring merges, try to recreate them.",
      "",
      "           This uses the --interactive machinery internally, but combining it",
      "           with the --interactive option explicitly is generally not a good",
      "           idea unless you know what you are doing (see BUGS below).",
      "",
      "       -x <cmd>, --exec <cmd>",
      "           Append \"exec <cmd>\" after each line creating a commit in the final",
      "           history. <cmd> will be interpreted as one or more shell commands.",
      "",
      "           This option can only be used with the --interactive option (see",
      "           INTERACTIVE MODE below).",
      "",
      "           You may execute several commands by either using one instance of",
      "           --exec with several commands:",
      "",
      "               git rebase -i --exec \"cmd1 && cmd2 && ...\"",
      "",
      "           or by giving more than one --exec:",
      "",
      "               git rebase -i --exec \"cmd1\" --exec \"cmd2\" --exec ...",
      "",
      "           If --autosquash is used, \"exec\" lines will not be appended for the",
      "           intermediate commits, and will only appear at the end of each",
      "           squash/fixup series.",
      "",
      "       --root",
      "           Rebase all commits reachable from <branch>, instead of limiting",
      "           them with an <upstream>. This allows you to rebase the root",
      "           commit(s) on a branch. When used with --onto, it will skip changes",
      "           already contained in <newbase> (instead of <upstream>) whereas",
      "           without --onto it will operate on every change. When used together",
      "           with both --onto and --preserve-merges, all root commits will be",
      "           rewritten to have <newbase> as parent instead.",
      "",
      "       --autosquash, --no-autosquash",
      "           When the commit log message begins with \"squash! ...\" (or \"fixup!",
      "           ...\"), and there is a commit whose title begins with the same ...,",
      "           automatically modify the todo list of rebase -i so that the commit",
      "           marked for squashing comes right after the commit to be modified,",
      "           and change the action of the moved commit from pick to squash (or",
      "           fixup). Ignores subsequent \"fixup! \" or \"squash! \" after the first,",
      "           in case you referred to an earlier fixup/squash with git commit",
      "           --fixup/--squash.",
      "",
      "           This option is only valid when the --interactive option is used.",
      "",
      "           If the --autosquash option is enabled by default using the",
      "           configuration variable rebase.autosquash, this option can be used",
      "           to override and disable this setting.",
      "",
      "       --[no-]autostash",
      "           Automatically create a temporary stash before the operation begins,",
      "           and apply it after the operation ends. This means that you can run",
      "           rebase on a dirty worktree. However, use with care: the final stash",
      "           application after a successful rebase might result in non-trivial",
      "           conflicts.",
      "",
      "       --no-ff",
      "           With --interactive, cherry-pick all rebased commits instead of",
      "           fast-forwarding over the unchanged ones. This ensures that the",
      "           entire history of the rebased branch is composed of new commits.",
      "",
      "           Without --interactive, this is a synonym for --force-rebase.",
      "",
      "           You may find this helpful after reverting a topic branch merge, as",
      "           this option recreates the topic branch with fresh commits so it can",
      "           be remerged successfully without needing to \"revert the reversion\"",
      "           (see the revert-a-faulty-merge How-To[1] for details).",
      "",
      "MERGE STRATEGIES",
      "       The merge mechanism (git-merge and git-pull commands) allows the",
      "       backend merge strategies to be chosen with -s option. Some strategies",
      "       can also take their own options, which can be passed by giving",
      "       -X<option> arguments to git-merge and/or git-pull.",
      "",
      "       resolve",
      "           This can only resolve two heads (i.e. the current branch and",
      "           another branch you pulled from) using a 3-way merge algorithm. It",
      "           tries to carefully detect criss-cross merge ambiguities and is",
      "           considered generally safe and fast.",
      "",
      "       recursive",
      "           This can only resolve two heads using a 3-way merge algorithm. When",
      "           there is more than one common ancestor that can be used for 3-way",
      "           merge, it creates a merged tree of the common ancestors and uses",
      "           that as the reference tree for the 3-way merge. This has been",
      "           reported to result in fewer merge conflicts without causing",
      "           mis-merges by tests done on actual merge commits taken from Linux",
      "           2.6 kernel development history. Additionally this can detect and",
      "           handle merges involving renames. This is the default merge strategy",
      "           when pulling or merging one branch.",
      "",
      "           The recursive strategy can take the following options:",
      "",
      "           ours",
      "               This option forces conflicting hunks to be auto-resolved",
      "               cleanly by favoring our version. Changes from the other tree",
      "               that do not conflict with our side are reflected to the merge",
      "               result. For a binary file, the entire contents are taken from",
      "               our side.",
      "",
      "               This should not be confused with the ours merge strategy, which",
      "               does not even look at what the other tree contains at all. It",
      "               discards everything the other tree did, declaring our history",
      "               contains all that happened in it.",
      "",
      "           theirs",
      "               This is the opposite of ours.",
      "",
      "           patience",
      "               With this option, merge-recursive spends a little extra time to",
      "               avoid mismerges that sometimes occur due to unimportant",
      "               matching lines (e.g., braces from distinct functions). Use this",
      "               when the branches to be merged have diverged wildly. See also",
      "               git-diff(1)--patience.",
      "",
      "           diff-algorithm=[patience|minimal|histogram|myers]",
      "               Tells merge-recursive to use a different diff algorithm, which",
      "               can help avoid mismerges that occur due to unimportant matching",
      "               lines (such as braces from distinct functions). See also git-",
      "               diff(1)--diff-algorithm.",
      "",
      "           ignore-space-change, ignore-all-space, ignore-space-at-eol",
      "               Treats lines with the indicated type of whitespace change as",
      "               unchanged for the sake of a three-way merge. Whitespace changes",
      "               mixed with other changes to a line are not ignored. See also",
      "               git-diff(1)-b, -w, and --ignore-space-at-eol.",
      "",
      "               ·   If their version only introduces whitespace changes to a",
      "                   line, our version is used;",
      "",
      "               ·   If our version introduces whitespace changes but their",
      "                   version includes a substantial change, their version is",
      "                   used;",
      "",
      "               ·   Otherwise, the merge proceeds in the usual way.",
      "",
      "           renormalize",
      "               This runs a virtual check-out and check-in of all three stages",
      "               of a file when resolving a three-way merge. This option is",
      "               meant to be used when merging branches with different clean",
      "               filters or end-of-line normalization rules. See \"Merging",
      "               branches with differing checkin/checkout attributes\" in",
      "               gitattributes(5) for details.",
      "",
      "           no-renormalize",
      "               Disables the renormalize option. This overrides the",
      "               merge.renormalize configuration variable.",
      "",
      "           rename-threshold=<n>",
      "               Controls the similarity threshold used for rename detection.",
      "               See also git-diff(1)-M.",
      "",
      "           subtree[=<path>]",
      "               This option is a more advanced form of subtree strategy, where",
      "               the strategy makes a guess on how two trees must be shifted to",
      "               match with each other when merging. Instead, the specified path",
      "               is prefixed (or stripped from the beginning) to make the shape",
      "               of two trees to match.",
      "",
      "       octopus",
      "           This resolves cases with more than two heads, but refuses to do a",
      "           complex merge that needs manual resolution. It is primarily meant",
      "           to be used for bundling topic branch heads together. This is the",
      "           default merge strategy when pulling or merging more than one",
      "           branch.",
      "",
      "       ours",
      "           This resolves any number of heads, but the resulting tree of the",
      "           merge is always that of the current branch head, effectively",
      "           ignoring all changes from all other branches. It is meant to be",
      "           used to supersede old development history of side branches. Note",
      "           that this is different from the -Xours option to the recursive",
      "           merge strategy.",
      "",
      "       subtree",
      "           This is a modified recursive strategy. When merging trees A and B,",
      "           if B corresponds to a subtree of A, B is first adjusted to match",
      "           the tree structure of A, instead of reading the trees at the same",
      "           level. This adjustment is also done to the common ancestor tree.",
      "",
      "       With the strategies that use 3-way merge (including the default,",
      "       recursive), if a change is made on both branches, but later reverted on",
      "       one of the branches, that change will be present in the merged result;",
      "       some people find this behavior confusing. It occurs because only the",
      "       heads and the merge base are considered when performing a merge, not",
      "       the individual commits. The merge algorithm therefore considers the",
      "       reverted change as no change at all, and substitutes the changed",
      "       version instead.",
      "",
      "NOTES",
      "       You should understand the implications of using git rebase on a",
      "       repository that you share. See also RECOVERING FROM UPSTREAM REBASE",
      "       below.",
      "",
      "       When the git-rebase command is run, it will first execute a",
      "       \"pre-rebase\" hook if one exists. You can use this hook to do sanity",
      "       checks and reject the rebase if it isn’t appropriate. Please see the",
      "       template pre-rebase hook script for an example.",
      "",
      "       Upon completion, <branch> will be the current branch.",
      "",
      "INTERACTIVE MODE",
      "       Rebasing interactively means that you have a chance to edit the commits",
      "       which are rebased. You can reorder the commits, and you can remove them",
      "       (weeding out bad or otherwise unwanted patches).",
      "",
      "       The interactive mode is meant for this type of workflow:",
      "",
      "        1. have a wonderful idea",
      "",
      "        2. hack on the code",
      "",
      "        3. prepare a series for submission",
      "",
      "        4. submit",
      "",
      "       where point 2. consists of several instances of",
      "",
      "       a) regular use",
      "",
      "        1. finish something worthy of a commit",
      "",
      "        2. commit",
      "",
      "       b) independent fixup",
      "",
      "        1. realize that something does not work",
      "",
      "        2. fix that",
      "",
      "        3. commit it",
      "",
      "       Sometimes the thing fixed in b.2. cannot be amended to the not-quite",
      "       perfect commit it fixes, because that commit is buried deeply in a",
      "       patch series. That is exactly what interactive rebase is for: use it",
      "       after plenty of \"a\"s and \"b\"s, by rearranging and editing commits, and",
      "       squashing multiple commits into one.",
      "",
      "       Start it with the last commit you want to retain as-is:",
      "",
      "           git rebase -i <after-this-commit>",
      "",
      "       An editor will be fired up with all the commits in your current branch",
      "       (ignoring merge commits), which come after the given commit. You can",
      "       reorder the commits in this list to your heart’s content, and you can",
      "       remove them. The list looks more or less like this:",
      "",
      "           pick deadbee The oneline of this commit",
      "           pick fa1afe1 The oneline of the next commit",
      "           ...",
      "",
      "",
      "       The oneline descriptions are purely for your pleasure; git rebase will",
      "       not look at them but at the commit names (\"deadbee\" and \"fa1afe1\" in",
      "       this example), so do not delete or edit the names.",
      "",
      "       By replacing the command \"pick\" with the command \"edit\", you can tell",
      "       git rebase to stop after applying that commit, so that you can edit the",
      "       files and/or the commit message, amend the commit, and continue",
      "       rebasing.",
      "",
      "       If you just want to edit the commit message for a commit, replace the",
      "       command \"pick\" with the command \"reword\".",
      "",
      "       If you want to fold two or more commits into one, replace the command",
      "       \"pick\" for the second and subsequent commits with \"squash\" or \"fixup\".",
      "       If the commits had different authors, the folded commit will be",
      "       attributed to the author of the first commit. The suggested commit",
      "       message for the folded commit is the concatenation of the commit",
      "       messages of the first commit and of those with the \"squash\" command,",
      "       but omits the commit messages of commits with the \"fixup\" command.",
      "",
      "       git rebase will stop when \"pick\" has been replaced with \"edit\" or when",
      "       a command fails due to merge errors. When you are done editing and/or",
      "       resolving conflicts you can continue with git rebase --continue.",
      "",
      "       For example, if you want to reorder the last 5 commits, such that what",
      "       was HEAD~4 becomes the new HEAD. To achieve that, you would call git",
      "       rebase like this:",
      "",
      "           $ git rebase -i HEAD~5",
      "",
      "",
      "       And move the first patch to the end of the list.",
      "",
      "       You might want to preserve merges, if you have a history like this:",
      "",
      "                      X",
      "                       \\",
      "                    A---M---B",
      "                   /",
      "           ---o---O---P---Q",
      "",
      "",
      "       Suppose you want to rebase the side branch starting at \"A\" to \"Q\". Make",
      "       sure that the current HEAD is \"B\", and call",
      "",
      "           $ git rebase -i -p --onto Q O",
      "",
      "",
      "       Reordering and editing commits usually creates untested intermediate",
      "       steps. You may want to check that your history editing did not break",
      "       anything by running a test, or at least recompiling at intermediate",
      "       points in history by using the \"exec\" command (shortcut \"x\"). You may",
      "       do so by creating a todo list like this one:",
      "",
      "           pick deadbee Implement feature XXX",
      "           fixup f1a5c00 Fix to feature XXX",
      "           exec make",
      "           pick c0ffeee The oneline of the next commit",
      "           edit deadbab The oneline of the commit after",
      "           exec cd subdir; make test",
      "           ...",
      "",
      "",
      "       The interactive rebase will stop when a command fails (i.e. exits with",
      "       non-0 status) to give you an opportunity to fix the problem. You can",
      "       continue with git rebase --continue.",
      "",
      "       The \"exec\" command launches the command in a shell (the one specified",
      "       in $SHELL, or the default shell if $SHELL is not set), so you can use",
      "       shell features (like \"cd\", \">\", \";\" ...). The command is run from the",
      "       root of the working tree.",
      "",
      "           $ git rebase -i --exec \"make test\"",
      "",
      "",
      "       This command lets you check that intermediate commits are compilable.",
      "       The todo list becomes like that:",
      "",
      "           pick 5928aea one",
      "           exec make test",
      "           pick 04d0fda two",
      "           exec make test",
      "           pick ba46169 three",
      "           exec make test",
      "           pick f4593f9 four",
      "           exec make test",
      "",
      "",
      "SPLITTING COMMITS",
      "       In interactive mode, you can mark commits with the action \"edit\".",
      "       However, this does not necessarily mean that git rebase expects the",
      "       result of this edit to be exactly one commit. Indeed, you can undo the",
      "       commit, or you can add other commits. This can be used to split a",
      "       commit into two:",
      "",
      "       ·   Start an interactive rebase with git rebase -i <commit>^, where",
      "           <commit> is the commit you want to split. In fact, any commit range",
      "           will do, as long as it contains that commit.",
      "",
      "       ·   Mark the commit you want to split with the action \"edit\".",
      "",
      "       ·   When it comes to editing that commit, execute git reset HEAD^. The",
      "           effect is that the HEAD is rewound by one, and the index follows",
      "           suit. However, the working tree stays the same.",
      "",
      "       ·   Now add the changes to the index that you want to have in the first",
      "           commit. You can use git add (possibly interactively) or git gui (or",
      "           both) to do that.",
      "",
      "       ·   Commit the now-current index with whatever commit message is",
      "           appropriate now.",
      "",
      "       ·   Repeat the last two steps until your working tree is clean.",
      "",
      "       ·   Continue the rebase with git rebase --continue.",
      "",
      "       If you are not absolutely sure that the intermediate revisions are",
      "       consistent (they compile, pass the testsuite, etc.) you should use git",
      "       stash to stash away the not-yet-committed changes after each commit,",
      "       test, and amend the commit if fixes are necessary.",
      "",
      "RECOVERING FROM UPSTREAM REBASE",
      "       Rebasing (or any other form of rewriting) a branch that others have",
      "       based work on is a bad idea: anyone downstream of it is forced to",
      "       manually fix their history. This section explains how to do the fix",
      "       from the downstream’s point of view. The real fix, however, would be to",
      "       avoid rebasing the upstream in the first place.",
      "",
      "       To illustrate, suppose you are in a situation where someone develops a",
      "       subsystem branch, and you are working on a topic that is dependent on",
      "       this subsystem. You might end up with a history like the following:",
      "",
      "               o---o---o---o---o---o---o---o---o  master",
      "                    \\",
      "                     o---o---o---o---o  subsystem",
      "                                      \\",
      "                                       *---*---*  topic",
      "",
      "",
      "       If subsystem is rebased against master, the following happens:",
      "",
      "               o---o---o---o---o---o---o---o  master",
      "                    \\                       \\",
      "                     o---o---o---o---o       o'--o'--o'--o'--o'  subsystem",
      "                                      \\",
      "                                       *---*---*  topic",
      "",
      "",
      "       If you now continue development as usual, and eventually merge topic to",
      "       subsystem, the commits from subsystem will remain duplicated forever:",
      "",
      "               o---o---o---o---o---o---o---o  master",
      "                    \\                       \\",
      "                     o---o---o---o---o       o'--o'--o'--o'--o'--M  subsystem",
      "                                      \\                         /",
      "                                       *---*---*-..........-*--*  topic",
      "",
      "",
      "       Such duplicates are generally frowned upon because they clutter up",
      "       history, making it harder to follow. To clean things up, you need to",
      "       transplant the commits on topic to the new subsystem tip, i.e., rebase",
      "       topic. This becomes a ripple effect: anyone downstream from topic is",
      "       forced to rebase too, and so on!",
      "",
      "       There are two kinds of fixes, discussed in the following subsections:",
      "",
      "       Easy case: The changes are literally the same.",
      "           This happens if the subsystem rebase was a simple rebase and had no",
      "           conflicts.",
      "",
      "       Hard case: The changes are not the same.",
      "           This happens if the subsystem rebase had conflicts, or used",
      "           --interactive to omit, edit, squash, or fixup commits; or if the",
      "           upstream used one of commit --amend, reset, or filter-branch.",
      "",
      "   The easy case",
      "       Only works if the changes (patch IDs based on the diff contents) on",
      "       subsystem are literally the same before and after the rebase subsystem",
      "       did.",
      "",
      "       In that case, the fix is easy because git rebase knows to skip changes",
      "       that are already present in the new upstream. So if you say (assuming",
      "       you’re on topic)",
      "",
      "               $ git rebase subsystem",
      "",
      "",
      "       you will end up with the fixed history",
      "",
      "               o---o---o---o---o---o---o---o  master",
      "                                            \\",
      "                                             o'--o'--o'--o'--o'  subsystem",
      "                                                              \\",
      "                                                               *---*---*  topic",
      "",
      "",
      "   The hard case",
      "       Things get more complicated if the subsystem changes do not exactly",
      "       correspond to the ones before the rebase.",
      "",
      "           Note",
      "           While an \"easy case recovery\" sometimes appears to be successful",
      "           even in the hard case, it may have unintended consequences. For",
      "           example, a commit that was removed via git rebase --interactive",
      "           will be resurrected!",
      "",
      "       The idea is to manually tell git rebase \"where the old subsystem ended",
      "       and your topic began\", that is, what the old merge-base between them",
      "       was. You will have to find a way to name the last commit of the old",
      "       subsystem, for example:",
      "",
      "       ·   With the subsystem reflog: after git fetch, the old tip of",
      "           subsystem is at subsystem@{1}. Subsequent fetches will increase the",
      "           number. (See git-reflog(1).)",
      "",
      "       ·   Relative to the tip of topic: knowing that your topic has three",
      "           commits, the old tip of subsystem must be topic~3.",
      "",
      "       You can then transplant the old subsystem..topic to the new tip by",
      "       saying (for the reflog case, and assuming you are on topic already):",
      "",
      "               $ git rebase --onto subsystem subsystem@{1}",
      "",
      "",
      "       The ripple effect of a \"hard case\" recovery is especially bad: everyone",
      "       downstream from topic will now have to perform a \"hard case\" recovery",
      "       too!",
      "",
      "BUGS",
      "       The todo list presented by --preserve-merges --interactive does not",
      "       represent the topology of the revision graph. Editing commits and",
      "       rewording their commit messages should work fine, but attempts to",
      "       reorder commits tend to produce counterintuitive results.",
      "",
      "       For example, an attempt to rearrange",
      "",
      "           1 --- 2 --- 3 --- 4 --- 5",
      "",
      "",
      "       to",
      "",
      "           1 --- 2 --- 4 --- 3 --- 5",
      "",
      "",
      "       by moving the \"pick 4\" line will result in the following history:",
      "",
      "                   3",
      "                  /",
      "           1 --- 2 --- 4 --- 5",
      "",
      "",
      "GIT",
      "       Part of the git(1) suite",
      "",
      "NOTES",
      "        1. revert-a-faulty-merge How-To",
      "           file:///usr/share/doc/git/html/howto/revert-a-faulty-merge.html",
      "",
      "",
      "",
      "Git 1.9.1                         03/21/2016                     GIT-REBASE(1)"
   };
   TStrStrVectPair gitPair("git-rebase", strVect);
   m_gitCmdMap.insert(gitPair);
}

void GitJsonText::LoadGitCommit()
{
   TStrVect strVect =
   {
      "GIT-COMMIT(1)                     Git Manual                     GIT-COMMIT(1)",
      "",
      "",
      "",
      "NAME",
      "       git-commit - Record changes to the repository",
      "",
      "SYNOPSIS",
      "       git commit [-a | --interactive | --patch] [-s] [-v] [-u<mode>] [--amend]",
      "                  [--dry-run] [(-c | -C | --fixup | --squash) <commit>]",
      "                  [-F <file> | -m <msg>] [--reset-author] [--allow-empty]",
      "                  [--allow-empty-message] [--no-verify] [-e] [--author=<author>]",
      "                  [--date=<date>] [--cleanup=<mode>] [--[no-]status]",
      "                  [-i | -o] [-S[<keyid>]] [--] [<file>...]",
      "",
      "",
      "DESCRIPTION",
      "       Stores the current contents of the index in a new commit along with a",
      "       log message from the user describing the changes.",
      "",
      "       The content to be added can be specified in several ways:",
      "",
      "        1. by using git add to incrementally \"add\" changes to the index before",
      "           using the commit command (Note: even modified files must be",
      "           \"added\");",
      "",
      "        2. by using git rm to remove files from the working tree and the",
      "           index, again before using the commit command;",
      "",
      "        3. by listing files as arguments to the commit command, in which case",
      "           the commit will ignore changes staged in the index, and instead",
      "           record the current content of the listed files (which must already",
      "           be known to Git);",
      "",
      "        4. by using the -a switch with the commit command to automatically",
      "           \"add\" changes from all known files (i.e. all files that are already",
      "           listed in the index) and to automatically \"rm\" files in the index",
      "           that have been removed from the working tree, and then perform the",
      "           actual commit;",
      "",
      "        5. by using the --interactive or --patch switches with the commit",
      "           command to decide one by one which files or hunks should be part of",
      "           the commit, before finalizing the operation. See the “Interactive",
      "           Mode” section of git-add(1) to learn how to operate these modes.",
      "",
      "       The --dry-run option can be used to obtain a summary of what is",
      "       included by any of the above for the next commit by giving the same set",
      "       of parameters (options and paths).",
      "",
      "       If you make a commit and then find a mistake immediately after that,",
      "       you can recover from it with git reset.",
      "",
      "OPTIONS",
      "       -a, --all",
      "           Tell the command to automatically stage files that have been",
      "           modified and deleted, but new files you have not told Git about are",
      "           not affected.",
      "",
      "       -p, --patch",
      "           Use the interactive patch selection interface to chose which",
      "           changes to commit. See git-add(1) for details.",
      "",
      "       -C <commit>, --reuse-message=<commit>",
      "           Take an existing commit object, and reuse the log message and the",
      "           authorship information (including the timestamp) when creating the",
      "           commit.",
      "",
      "       -c <commit>, --reedit-message=<commit>",
      "           Like -C, but with -c the editor is invoked, so that the user can",
      "           further edit the commit message.",
      "",
      "       --fixup=<commit>",
      "           Construct a commit message for use with rebase --autosquash. The",
      "           commit message will be the subject line from the specified commit",
      "           with a prefix of \"fixup! \". See git-rebase(1) for details.",
      "",
      "       --squash=<commit>",
      "           Construct a commit message for use with rebase --autosquash. The",
      "           commit message subject line is taken from the specified commit with",
      "           a prefix of \"squash! \". Can be used with additional commit message",
      "           options (-m/-c/-C/-F). See git-rebase(1) for details.",
      "",
      "       --reset-author",
      "           When used with -C/-c/--amend options, or when committing after a a",
      "           conflicting cherry-pick, declare that the authorship of the",
      "           resulting commit now belongs of the committer. This also renews the",
      "           author timestamp.",
      "",
      "       --short",
      "           When doing a dry-run, give the output in the short-format. See git-",
      "           status(1) for details. Implies --dry-run.",
      "",
      "       --branch",
      "           Show the branch and tracking info even in short-format.",
      "",
      "       --porcelain",
      "           When doing a dry-run, give the output in a porcelain-ready format.",
      "           See git-status(1) for details. Implies --dry-run.",
      "",
      "       --long",
      "           When doing a dry-run, give the output in a the long-format. Implies",
      "           --dry-run.",
      "",
      "       -z, --null",
      "           When showing short or porcelain status output, terminate entries in",
      "           the status output with NUL, instead of LF. If no format is given,",
      "           implies the --porcelain output format.",
      "",
      "       -F <file>, --file=<file>",
      "           Take the commit message from the given file. Use - to read the",
      "           message from the standard input.",
      "",
      "       --author=<author>",
      "           Override the commit author. Specify an explicit author using the",
      "           standard A U Thor <author@example.com> format. Otherwise <author>",
      "           is assumed to be a pattern and is used to search for an existing",
      "           commit by that author (i.e. rev-list --all -i --author=<author>);",
      "           the commit author is then copied from the first such commit found.",
      "",
      "       --date=<date>",
      "           Override the author date used in the commit.",
      "",
      "       -m <msg>, --message=<msg>",
      "           Use the given <msg> as the commit message. If multiple -m options",
      "           are given, their values are concatenated as separate paragraphs.",
      "",
      "       -t <file>, --template=<file>",
      "           When editing the commit message, start the editor with the contents",
      "           in the given file. The commit.template configuration variable is",
      "           often used to give this option implicitly to the command. This",
      "           mechanism can be used by projects that want to guide participants",
      "           with some hints on what to write in the message in what order. If",
      "           the user exits the editor without editing the message, the commit",
      "           is aborted. This has no effect when a message is given by other",
      "           means, e.g. with the -m or -F options.",
      "",
      "       -s, --signoff",
      "           Add Signed-off-by line by the committer at the end of the commit",
      "           log message.",
      "",
      "       -n, --no-verify",
      "           This option bypasses the pre-commit and commit-msg hooks. See also",
      "           githooks(5).",
      "",
      "       --allow-empty",
      "           Usually recording a commit that has the exact same tree as its sole",
      "           parent commit is a mistake, and the command prevents you from",
      "           making such a commit. This option bypasses the safety, and is",
      "           primarily for use by foreign SCM interface scripts.",
      "",
      "       --allow-empty-message",
      "           Like --allow-empty this command is primarily for use by foreign SCM",
      "           interface scripts. It allows you to create a commit with an empty",
      "           commit message without using plumbing commands like git-commit-",
      "           tree(1).",
      "",
      "       --cleanup=<mode>",
      "           This option determines how the supplied commit message should be",
      "           cleaned up before committing. The <mode> can be strip, whitespace,",
      "           verbatim, or default.",
      "",
      "           strip",
      "               Strip leading and trailing empty lines, trailing whitespace,",
      "               and #commentary and collapse consecutive empty lines.",
      "",
      "           whitespace",
      "               Same as strip except #commentary is not removed.",
      "",
      "           verbatim",
      "               Do not change the message at all.",
      "",
      "           default",
      "               Same as strip if the message is to be edited. Otherwise",
      "               whitespace.",
      "",
      "           The default can be changed by the commit.cleanup configuration",
      "           variable (see git-config(1)).",
      "",
      "       -e, --edit",
      "           The message taken from file with -F, command line with -m, and from",
      "           commit object with -C are usually used as the commit log message",
      "           unmodified. This option lets you further edit the message taken",
      "           from these sources.",
      "",
      "       --no-edit",
      "           Use the selected commit message without launching an editor. For",
      "           example, git commit --amend --no-edit amends a commit without",
      "           changing its commit message.",
      "",
      "       --amend",
      "           Replace the tip of the current branch by creating a new commit. The",
      "           recorded tree is prepared as usual (including the effect of the -i",
      "           and -o options and explicit pathspec), and the message from the",
      "           original commit is used as the starting point, instead of an empty",
      "           message, when no other message is specified from the command line",
      "           via options such as -m, -F, -c, etc. The new commit has the same",
      "           parents and author as the current one (the --reset-author option",
      "           can countermand this).",
      "",
      "           It is a rough equivalent for:",
      "",
      "                       $ git reset --soft HEAD^",
      "                       $ ... do something else to come up with the right tree ...",
      "                       $ git commit -c ORIG_HEAD",
      "",
      "           but can be used to amend a merge commit.",
      "",
      "           You should understand the implications of rewriting history if you",
      "           amend a commit that has already been published. (See the",
      "           \"RECOVERING FROM UPSTREAM REBASE\" section in git-rebase(1).)",
      "",
      "       --no-post-rewrite",
      "           Bypass the post-rewrite hook.",
      "",
      "       -i, --include",
      "           Before making a commit out of staged contents so far, stage the",
      "           contents of paths given on the command line as well. This is",
      "           usually not what you want unless you are concluding a conflicted",
      "           merge.",
      "",
      "       -o, --only",
      "           Make a commit only from the paths specified on the command line,",
      "           disregarding any contents that have been staged so far. This is the",
      "           default mode of operation of git commit if any paths are given on",
      "           the command line, in which case this option can be omitted. If this",
      "           option is specified together with --amend, then no paths need to be",
      "           specified, which can be used to amend the last commit without",
      "           committing changes that have already been staged.",
      "",
      "       -u[<mode>], --untracked-files[=<mode>]",
      "           Show untracked files.",
      "",
      "           The mode parameter is optional (defaults to all), and is used to",
      "           specify the handling of untracked files; when -u is not used, the",
      "           default is normal, i.e. show untracked files and directories.",
      "",
      "           The possible options are:",
      "",
      "           ·   no - Show no untracked files",
      "",
      "           ·   normal - Shows untracked files and directories",
      "",
      "           ·   all - Also shows individual files in untracked directories.",
      "",
      "               The default can be changed using the status.showUntrackedFiles",
      "               configuration variable documented in git-config(1).",
      "",
      "       -v, --verbose",
      "           Show unified diff between the HEAD commit and what would be",
      "           committed at the bottom of the commit message template. Note that",
      "           this diff output doesn’t have its lines prefixed with #.",
      "",
      "       -q, --quiet",
      "           Suppress commit summary message.",
      "",
      "       --dry-run",
      "           Do not create a commit, but show a list of paths that are to be",
      "           committed, paths with local changes that will be left uncommitted",
      "           and paths that are untracked.",
      "",
      "       --status",
      "           Include the output of git-status(1) in the commit message template",
      "           when using an editor to prepare the commit message. Defaults to on,",
      "           but can be used to override configuration variable commit.status.",
      "",
      "       --no-status",
      "           Do not include the output of git-status(1) in the commit message",
      "           template when using an editor to prepare the default commit",
      "           message.",
      "",
      "       -S[<keyid>], --gpg-sign[=<keyid>]",
      "           GPG-sign commit.",
      "",
      "       --",
      "           Do not interpret any more arguments as options.",
      "",
      "       <file>...",
      "           When files are given on the command line, the command commits the",
      "           contents of the named files, without recording the changes already",
      "           staged. The contents of these files are also staged for the next",
      "           commit on top of what have been staged before.",
      "",
      "DATE FORMATS",
      "       The GIT_AUTHOR_DATE, GIT_COMMITTER_DATE environment variables and the",
      "       --date option support the following date formats:",
      "",
      "       Git internal format",
      "           It is <unix timestamp> <time zone offset>, where <unix timestamp>",
      "           is the number of seconds since the UNIX epoch.  <time zone offset>",
      "           is a positive or negative offset from UTC. For example CET (which",
      "           is 2 hours ahead UTC) is +0200.",
      "",
      "       RFC 2822",
      "           The standard email format as described by RFC 2822, for example",
      "           Thu, 07 Apr 2005 22:13:13 +0200.",
      "",
      "       ISO 8601",
      "           Time and date specified by the ISO 8601 standard, for example",
      "           2005-04-07T22:13:13. The parser accepts a space instead of the T",
      "           character as well.",
      "",
      "               Note",
      "               In addition, the date part is accepted in the following",
      "               formats: YYYY.MM.DD, MM/DD/YYYY and DD.MM.YYYY.",
      "",
      "EXAMPLES",
      "       When recording your own work, the contents of modified files in your",
      "       working tree are temporarily stored to a staging area called the",
      "       \"index\" with git add. A file can be reverted back, only in the index",
      "       but not in the working tree, to that of the last commit with git reset",
      "       HEAD -- <file>, which effectively reverts git add and prevents the",
      "       changes to this file from participating in the next commit. After",
      "       building the state to be committed incrementally with these commands,",
      "       git commit (without any pathname parameter) is used to record what has",
      "       been staged so far. This is the most basic form of the command. An",
      "       example:",
      "",
      "           $ edit hello.c",
      "           $ git rm goodbye.c",
      "           $ git add hello.c",
      "           $ git commit",
      "",
      "",
      "       Instead of staging files after each individual change, you can tell git",
      "       commit to notice the changes to the files whose contents are tracked in",
      "       your working tree and do corresponding git add and git rm for you. That",
      "       is, this example does the same as the earlier example if there is no",
      "       other change in your working tree:",
      "",
      "           $ edit hello.c",
      "           $ rm goodbye.c",
      "           $ git commit -a",
      "",
      "",
      "       The command git commit -a first looks at your working tree, notices",
      "       that you have modified hello.c and removed goodbye.c, and performs",
      "       necessary git add and git rm for you.",
      "",
      "       After staging changes to many files, you can alter the order the",
      "       changes are recorded in, by giving pathnames to git commit. When",
      "       pathnames are given, the command makes a commit that only records the",
      "       changes made to the named paths:",
      "",
      "           $ edit hello.c hello.h",
      "           $ git add hello.c hello.h",
      "           $ edit Makefile",
      "           $ git commit Makefile",
      "",
      "",
      "       This makes a commit that records the modification to Makefile. The",
      "       changes staged for hello.c and hello.h are not included in the",
      "       resulting commit. However, their changes are not lost — they are still",
      "       staged and merely held back. After the above sequence, if you do:",
      "",
      "           $ git commit",
      "",
      "",
      "       this second commit would record the changes to hello.c and hello.h as",
      "       expected.",
      "",
      "       After a merge (initiated by git merge or git pull) stops because of",
      "       conflicts, cleanly merged paths are already staged to be committed for",
      "       you, and paths that conflicted are left in unmerged state. You would",
      "       have to first check which paths are conflicting with git status and",
      "       after fixing them manually in your working tree, you would stage the",
      "       result as usual with git add:",
      "",
      "           $ git status | grep unmerged",
      "           unmerged: hello.c",
      "           $ edit hello.c",
      "           $ git add hello.c",
      "",
      "",
      "       After resolving conflicts and staging the result, git ls-files -u would",
      "       stop mentioning the conflicted path. When you are done, run git commit",
      "       to finally record the merge:",
      "",
      "           $ git commit",
      "",
      "",
      "       As with the case to record your own changes, you can use -a option to",
      "       save typing. One difference is that during a merge resolution, you",
      "       cannot use git commit with pathnames to alter the order the changes are",
      "       committed, because the merge should be recorded as a single commit. In",
      "       fact, the command refuses to run when given pathnames (but see -i",
      "       option).",
      "",
      "DISCUSSION",
      "       Though not required, it’s a good idea to begin the commit message with",
      "       a single short (less than 50 character) line summarizing the change,",
      "       followed by a blank line and then a more thorough description. The text",
      "       up to the first blank line in a commit message is treated as the commit",
      "       title, and that title is used throughout Git. For example, git-format-",
      "       patch(1) turns a commit into email, and it uses the title on the",
      "       Subject line and the rest of the commit in the body.",
      "",
      "       At the core level, Git is character encoding agnostic.",
      "",
      "       ·   The pathnames recorded in the index and in the tree objects are",
      "           treated as uninterpreted sequences of non-NUL bytes. What",
      "           readdir(2) returns are what are recorded and compared with the data",
      "           Git keeps track of, which in turn are expected to be what lstat(2)",
      "           and creat(2) accepts. There is no such thing as pathname encoding",
      "           translation.",
      "",
      "       ·   The contents of the blob objects are uninterpreted sequences of",
      "           bytes. There is no encoding translation at the core level.",
      "",
      "       ·   The commit log messages are uninterpreted sequences of non-NUL",
      "           bytes.",
      "",
      "       Although we encourage that the commit log messages are encoded in",
      "       UTF-8, both the core and Git Porcelain are designed not to force UTF-8",
      "       on projects. If all participants of a particular project find it more",
      "       convenient to use legacy encodings, Git does not forbid it. However,",
      "       there are a few things to keep in mind.",
      "",
      "        1. git commit and git commit-tree issues a warning if the commit log",
      "           message given to it does not look like a valid UTF-8 string, unless",
      "           you explicitly say your project uses a legacy encoding. The way to",
      "           say this is to have i18n.commitencoding in .git/config file, like",
      "           this:",
      "",
      "               [i18n]",
      "                       commitencoding = ISO-8859-1",
      "",
      "           Commit objects created with the above setting record the value of",
      "           i18n.commitencoding in its encoding header. This is to help other",
      "           people who look at them later. Lack of this header implies that the",
      "           commit log message is encoded in UTF-8.",
      "",
      "        2. git log, git show, git blame and friends look at the encoding",
      "           header of a commit object, and try to re-code the log message into",
      "           UTF-8 unless otherwise specified. You can specify the desired",
      "           output encoding with i18n.logoutputencoding in .git/config file,",
      "           like this:",
      "",
      "               [i18n]",
      "                       logoutputencoding = ISO-8859-1",
      "",
      "           If you do not have this configuration variable, the value of",
      "           i18n.commitencoding is used instead.",
      "",
      "       Note that we deliberately chose not to re-code the commit log message",
      "       when a commit is made to force UTF-8 at the commit object level,",
      "       because re-coding to UTF-8 is not necessarily a reversible operation.",
      "",
      "ENVIRONMENT AND CONFIGURATION VARIABLES",
      "       The editor used to edit the commit log message will be chosen from the",
      "       GIT_EDITOR environment variable, the core.editor configuration",
      "       variable, the VISUAL environment variable, or the EDITOR environment",
      "       variable (in that order). See git-var(1) for details.",
      "",
      "HOOKS",
      "       This command can run commit-msg, prepare-commit-msg, pre-commit, and",
      "       post-commit hooks. See githooks(5) for more information.",
      "",
      "FILES",
      "       $GIT_DIR/COMMIT_EDITMSG",
      "           This file contains the commit message of a commit in progress. If",
      "           git commit exits due to an error before creating a commit, any",
      "           commit message that has been provided by the user (e.g., in an",
      "           editor session) will be available in this file, but will be",
      "           overwritten by the next invocation of git commit.",
      "",
      "SEE ALSO",
      "       git-add(1), git-rm(1), git-mv(1), git-merge(1), git-commit-tree(1)",
      "",
      "GIT",
      "       Part of the git(1) suite",
      "",
      "",
      "",
      "Git 1.9.1                         03/21/2016                     GIT-COMMIT(1)"
   };
   TStrStrVectPair gitPair("git-commit", strVect);
   m_gitCmdMap.insert(gitPair);
}

void GitJsonText::LoadGitStatus()
{
   TStrVect strVect =
   {
      "GIT-STATUS(1)                     Git Manual                     GIT-STATUS(1)",
      "",
      "",
      "",
      "NAME",
      "       git-status - Show the working tree status",
      "",
      "SYNOPSIS",
      "       git status [<options>...] [--] [<pathspec>...]",
      "",
      "",
      "DESCRIPTION",
      "       Displays paths that have differences between the index file and the",
      "       current HEAD commit, paths that have differences between the working",
      "       tree and the index file, and paths in the working tree that are not",
      "       tracked by Git (and are not ignored by gitignore(5)). The first are",
      "       what you would commit by running git commit; the second and third are",
      "       what you could commit by running git add before running git commit.",
      "",
      "OPTIONS",
      "       -s, --short",
      "           Give the output in the short-format.",
      "",
      "       -b, --branch",
      "           Show the branch and tracking info even in short-format.",
      "",
      "       --porcelain",
      "           Give the output in an easy-to-parse format for scripts. This is",
      "           similar to the short output, but will remain stable across Git",
      "           versions and regardless of user configuration. See below for",
      "           details.",
      "",
      "       --long",
      "           Give the output in the long-format. This is the default.",
      "",
      "       -u[<mode>], --untracked-files[=<mode>]",
      "           Show untracked files.",
      "",
      "           The mode parameter is optional (defaults to all), and is used to",
      "           specify the handling of untracked files.",
      "",
      "           The possible options are:",
      "",
      "           ·   no - Show no untracked files.",
      "",
      "           ·   normal - Shows untracked files and directories.",
      "",
      "           ·   all - Also shows individual files in untracked directories.",
      "",
      "               When -u option is not used, untracked files and directories are",
      "               shown (i.e. the same as specifying normal), to help you avoid",
      "               forgetting to add newly created files. Because it takes extra",
      "               work to find untracked files in the filesystem, this mode may",
      "               take some time in a large working tree. You can use no to have",
      "               git status return more quickly without showing untracked files.",
      "",
      "               The default can be changed using the status.showUntrackedFiles",
      "               configuration variable documented in git-config(1).",
      "",
      "       --ignore-submodules[=<when>]",
      "           Ignore changes to submodules when looking for changes. <when> can",
      "           be either \"none\", \"untracked\", \"dirty\" or \"all\", which is the",
      "           default. Using \"none\" will consider the submodule modified when it",
      "           either contains untracked or modified files or its HEAD differs",
      "           from the commit recorded in the superproject and can be used to",
      "           override any settings of the ignore option in git-config(1) or",
      "           gitmodules(5). When \"untracked\" is used submodules are not",
      "           considered dirty when they only contain untracked content (but they",
      "           are still scanned for modified content). Using \"dirty\" ignores all",
      "           changes to the work tree of submodules, only changes to the commits",
      "           stored in the superproject are shown (this was the behavior before",
      "           1.7.0). Using \"all\" hides all changes to submodules (and suppresses",
      "           the output of submodule summaries when the config option",
      "           status.submodulesummary is set).",
      "",
      "       --ignored",
      "           Show ignored files as well.",
      "",
      "       -z",
      "           Terminate entries with NUL, instead of LF. This implies the",
      "           --porcelain output format if no other format is given.",
      "",
      "       --column[=<options>], --no-column",
      "           Display untracked files in columns. See configuration variable",
      "           column.status for option syntax.--column and --no-column without",
      "           options are equivalent to always and never respectively.",
      "",
      "OUTPUT",
      "       The output from this command is designed to be used as a commit",
      "       template comment, and all the output lines are prefixed with #. The",
      "       default, long format, is designed to be human readable, verbose and",
      "       descriptive. Its contents and format are subject to change at any time.",
      "",
      "       The paths mentioned in the output, unlike many other Git commands, are",
      "       made relative to the current directory if you are working in a",
      "       subdirectory (this is on purpose, to help cutting and pasting). See the",
      "       status.relativePaths config option below.",
      "",
      "   Short Format",
      "       In the short-format, the status of each path is shown as",
      "",
      "           XY PATH1 -> PATH2",
      "",
      "       where PATH1 is the path in the HEAD, and the \" -> PATH2\" part is shown",
      "       only when PATH1 corresponds to a different path in the index/worktree",
      "       (i.e. the file is renamed). The XY is a two-letter status code.",
      "",
      "       The fields (including the ->) are separated from each other by a single",
      "       space. If a filename contains whitespace or other nonprintable",
      "       characters, that field will be quoted in the manner of a C string",
      "       literal: surrounded by ASCII double quote (34) characters, and with",
      "       interior special characters backslash-escaped.",
      "",
      "       For paths with merge conflicts, X and Y show the modification states of",
      "       each side of the merge. For paths that do not have merge conflicts, X",
      "       shows the status of the index, and Y shows the status of the work tree.",
      "       For untracked paths, XY are ??. Other status codes can be interpreted",
      "       as follows:",
      "",
      "       ·   ' ' = unmodified",
      "",
      "       ·   M = modified",
      "",
      "       ·   A = added",
      "",
      "       ·   D = deleted",
      "",
      "       ·   R = renamed",
      "",
      "       ·   C = copied",
      "",
      "       ·   U = updated but unmerged",
      "",
      "       Ignored files are not listed, unless --ignored option is in effect, in",
      "       which case XY are !!.",
      "",
      "           X          Y     Meaning",
      "           -------------------------------------------------",
      "                     [MD]   not updated",
      "           M        [ MD]   updated in index",
      "           A        [ MD]   added to index",
      "           D         [ M]   deleted from index",
      "           R        [ MD]   renamed in index",
      "           C        [ MD]   copied in index",
      "           [MARC]           index and work tree matches",
      "           [ MARC]     M    work tree changed since index",
      "           [ MARC]     D    deleted in work tree",
      "           -------------------------------------------------",
      "           D           D    unmerged, both deleted",
      "           A           U    unmerged, added by us",
      "           U           D    unmerged, deleted by them",
      "           U           A    unmerged, added by them",
      "           D           U    unmerged, deleted by us",
      "           A           A    unmerged, both added",
      "           U           U    unmerged, both modified",
      "           -------------------------------------------------",
      "           ?           ?    untracked",
      "           !           !    ignored",
      "           -------------------------------------------------",
      "",
      "       If -b is used the short-format status is preceded by a line",
      "",
      "       ## branchname tracking info",
      "",
      "   Porcelain Format",
      "       The porcelain format is similar to the short format, but is guaranteed",
      "       not to change in a backwards-incompatible way between Git versions or",
      "       based on user configuration. This makes it ideal for parsing by",
      "       scripts. The description of the short format above also describes the",
      "       porcelain format, with a few exceptions:",
      "",
      "        1. The user’s color.status configuration is not respected; color will",
      "           always be off.",
      "",
      "        2. The user’s status.relativePaths configuration is not respected;",
      "           paths shown will always be relative to the repository root.",
      "",
      "       There is also an alternate -z format recommended for machine parsing.",
      "       In that format, the status field is the same, but some other things",
      "       change. First, the -> is omitted from rename entries and the field",
      "       order is reversed (e.g from -> to becomes to from). Second, a NUL",
      "       (ASCII 0) follows each filename, replacing space as a field separator",
      "       and the terminating newline (but a space still separates the status",
      "       field from the first filename). Third, filenames containing special",
      "       characters are not specially formatted; no quoting or",
      "       backslash-escaping is performed.",
      "",
      "CONFIGURATION",
      "       The command honors color.status (or status.color — they mean the same",
      "       thing and the latter is kept for backward compatibility) and",
      "       color.status.<slot> configuration variables to colorize its output.",
      "",
      "       If the config variable status.relativePaths is set to false, then all",
      "       paths shown are relative to the repository root, not to the current",
      "       directory.",
      "",
      "       If status.submodulesummary is set to a non zero number or true",
      "       (identical to -1 or an unlimited number), the submodule summary will be",
      "       enabled for the long format and a summary of commits for modified",
      "       submodules will be shown (see --summary-limit option of git-",
      "       submodule(1)). Please note that the summary output from the status",
      "       command will be suppressed for all submodules when",
      "       diff.ignoreSubmodules is set to all or only for those submodules where",
      "       submodule.<name>.ignore=all. To also view the summary for ignored",
      "       submodules you can either use the --ignore-submodules=dirty command",
      "       line option or the git submodule summary command, which shows a similar",
      "       output but does not honor these settings.",
      "",
      "SEE ALSO",
      "       gitignore(5)",
      "",
      "GIT",
      "       Part of the git(1) suite",
      "",
      "",
      "",
      "Git 1.9.1                         03/21/2016                     GIT-STATUS(1)"
   };
   TStrStrVectPair gitPair("git-status", strVect);
   m_gitCmdMap.insert(gitPair);
}

void GitJsonText::LoadGitLog()
{
   TStrVect strVect =
   {
      "GIT-LOG(1)                        Git Manual                        GIT-LOG(1)",
      "",
      "",
      "",
      "NAME",
      "       git-log - Show commit logs",
      "",
      "SYNOPSIS",
      "       git log [<options>] [<revision range>] [[--] <path>...]",
      "",
      "",
      "DESCRIPTION",
      "       Shows the commit logs.",
      "",
      "       The command takes options applicable to the git rev-list command to",
      "       control what is shown and how, and options applicable to the git diff-*",
      "       commands to control how the changes each commit introduces are shown.",
      "",
      "OPTIONS",
      "       --follow",
      "           Continue listing the history of a file beyond renames (works only",
      "           for a single file).",
      "",
      "       --no-decorate, --decorate[=short|full|no]",
      "           Print out the ref names of any commits that are shown. If short is",
      "           specified, the ref name prefixes refs/heads/, refs/tags/ and",
      "           refs/remotes/ will not be printed. If full is specified, the full",
      "           ref name (including prefix) will be printed. The default option is",
      "           short.",
      "",
      "       --source",
      "           Print out the ref name given on the command line by which each",
      "           commit was reached.",
      "",
      "       --use-mailmap",
      "           Use mailmap file to map author and committer names and email",
      "           addresses to canonical real names and email addresses. See git-",
      "           shortlog(1).",
      "",
      "       --full-diff",
      "           Without this flag, git log -p <path>...  shows commits that touch",
      "           the specified paths, and diffs about the same specified paths. With",
      "           this, the full diff is shown for commits that touch the specified",
      "           paths; this means that \"<path>...\" limits only commits, and doesn’t",
      "           limit diff for those commits.",
      "",
      "           Note that this affects all diff-based output types, e.g. those",
      "           produced by --stat, etc.",
      "",
      "       --log-size",
      "           Include a line “log size <number>” in the output for each commit,",
      "           where <number> is the length of that commit’s message in bytes.",
      "           Intended to speed up tools that read log messages from git log",
      "           output by allowing them to allocate space in advance.",
      "",
      "       -L <start>,<end>:<file>, -L :<regex>:<file>",
      "           Trace the evolution of the line range given by \"<start>,<end>\" (or",
      "           the funcname regex <regex>) within the <file>. You may not give any",
      "           pathspec limiters. This is currently limited to a walk starting",
      "           from a single revision, i.e., you may only give zero or one",
      "           positive revision arguments. You can specify this option more than",
      "           once.",
      "",
      "           <start> and <end> can take one of these forms:",
      "",
      "           ·   number",
      "",
      "               If <start> or <end> is a number, it specifies an absolute line",
      "               number (lines count from 1).",
      "",
      "           ·   /regex/",
      "",
      "               This form will use the first line matching the given POSIX",
      "               regex. If <start> is a regex, it will search from the end of",
      "               the previous -L range, if any, otherwise from the start of",
      "               file. If <start> is “^/regex/”, it will search from the start",
      "               of file. If <end> is a regex, it will search starting at the",
      "               line given by <start>.",
      "",
      "           ·   +offset or -offset",
      "",
      "               This is only valid for <end> and will specify a number of lines",
      "               before or after the line given by <start>.",
      "",
      "           If “:<regex>” is given in place of <start> and <end>, it denotes",
      "           the range from the first funcname line that matches <regex>, up to",
      "           the next funcname line. “:<regex>” searches from the end of the",
      "           previous -L range, if any, otherwise from the start of file.",
      "           “^:<regex>” searches from the start of file.",
      "",
      "       <revision range>",
      "           Show only commits in the specified revision range. When no",
      "           <revision range> is specified, it defaults to HEAD (i.e. the whole",
      "           history leading to the current commit).  origin..HEAD specifies all",
      "           the commits reachable from the current commit (i.e.  HEAD), but not",
      "           from origin. For a complete list of ways to spell <revision range>,",
      "           see the Specifying Ranges section of gitrevisions(7).",
      "",
      "       [--] <path>...",
      "           Show only commits that are enough to explain how the files that",
      "           match the specified paths came to be. See History Simplification",
      "           below for details and other simplification modes.",
      "",
      "           Paths may need to be prefixed with ‘`-- '’ to separate them from",
      "           options or the revision range, when confusion arises.",
      "",
      "   Commit Limiting",
      "       Besides specifying a range of commits that should be listed using the",
      "       special notations explained in the description, additional commit",
      "       limiting may be applied.",
      "",
      "       Using more options generally further limits the output (e.g.",
      "       --since=<date1> limits to commits newer than <date1>, and using it with",
      "       --grep=<pattern> further limits to commits whose log message has a line",
      "       that matches <pattern>), unless otherwise noted.",
      "",
      "       Note that these are applied before commit ordering and formatting",
      "       options, such as --reverse.",
      "",
      "       -<number>, -n <number>, --max-count=<number>",
      "           Limit the number of commits to output.",
      "",
      "       --skip=<number>",
      "           Skip number commits before starting to show the commit output.",
      "",
      "       --since=<date>, --after=<date>",
      "           Show commits more recent than a specific date.",
      "",
      "       --until=<date>, --before=<date>",
      "           Show commits older than a specific date.",
      "",
      "       --author=<pattern>, --committer=<pattern>",
      "           Limit the commits output to ones with author/committer header lines",
      "           that match the specified pattern (regular expression). With more",
      "           than one --author=<pattern>, commits whose author matches any of",
      "           the given patterns are chosen (similarly for multiple",
      "           --committer=<pattern>).",
      "",
      "       --grep-reflog=<pattern>",
      "           Limit the commits output to ones with reflog entries that match the",
      "           specified pattern (regular expression). With more than one",
      "           --grep-reflog, commits whose reflog message matches any of the",
      "           given patterns are chosen. It is an error to use this option unless",
      "           --walk-reflogs is in use.",
      "",
      "       --grep=<pattern>",
      "           Limit the commits output to ones with log message that matches the",
      "           specified pattern (regular expression). With more than one",
      "           --grep=<pattern>, commits whose message matches any of the given",
      "           patterns are chosen (but see --all-match).",
      "",
      "           When --show-notes is in effect, the message from the notes as if it",
      "           is part of the log message.",
      "",
      "       --all-match",
      "           Limit the commits output to ones that match all given --grep,",
      "           instead of ones that match at least one.",
      "",
      "       -i, --regexp-ignore-case",
      "           Match the regular expression limiting patterns without regard to",
      "           letter case.",
      "",
      "       --basic-regexp",
      "           Consider the limiting patterns to be basic regular expressions;",
      "           this is the default.",
      "",
      "       -E, --extended-regexp",
      "           Consider the limiting patterns to be extended regular expressions",
      "           instead of the default basic regular expressions.",
      "",
      "       -F, --fixed-strings",
      "           Consider the limiting patterns to be fixed strings (don’t interpret",
      "           pattern as a regular expression).",
      "",
      "       --perl-regexp",
      "           Consider the limiting patterns to be Perl-compatible regular",
      "           expressions. Requires libpcre to be compiled in.",
      "",
      "       --remove-empty",
      "           Stop when a given path disappears from the tree.",
      "",
      "       --merges",
      "           Print only merge commits. This is exactly the same as",
      "           --min-parents=2.",
      "",
      "       --no-merges",
      "           Do not print commits with more than one parent. This is exactly the",
      "           same as --max-parents=1.",
      "",
      "       --min-parents=<number>, --max-parents=<number>, --no-min-parents,",
      "       --no-max-parents",
      "           Show only commits which have at least (or at most) that many parent",
      "           commits. In particular, --max-parents=1 is the same as --no-merges,",
      "           --min-parents=2 is the same as --merges.  --max-parents=0 gives all",
      "           root commits and --min-parents=3 all octopus merges.",
      "",
      "           --no-min-parents and --no-max-parents reset these limits (to no",
      "           limit) again. Equivalent forms are --min-parents=0 (any commit has",
      "           0 or more parents) and --max-parents=-1 (negative numbers denote no",
      "           upper limit).",
      "",
      "       --first-parent",
      "           Follow only the first parent commit upon seeing a merge commit.",
      "           This option can give a better overview when viewing the evolution",
      "           of a particular topic branch, because merges into a topic branch",
      "           tend to be only about adjusting to updated upstream from time to",
      "           time, and this option allows you to ignore the individual commits",
      "           brought in to your history by such a merge.",
      "",
      "       --not",
      "           Reverses the meaning of the ^ prefix (or lack thereof) for all",
      "           following revision specifiers, up to the next --not.",
      "",
      "       --all",
      "           Pretend as if all the refs in refs/ are listed on the command line",
      "           as <commit>.",
      "",
      "       --branches[=<pattern>]",
      "           Pretend as if all the refs in refs/heads are listed on the command",
      "           line as <commit>. If <pattern> is given, limit branches to ones",
      "           matching given shell glob. If pattern lacks ?, *, or [, /* at the",
      "           end is implied.",
      "",
      "       --tags[=<pattern>]",
      "           Pretend as if all the refs in refs/tags are listed on the command",
      "           line as <commit>. If <pattern> is given, limit tags to ones",
      "           matching given shell glob. If pattern lacks ?, *, or [, /* at the",
      "           end is implied.",
      "",
      "       --remotes[=<pattern>]",
      "           Pretend as if all the refs in refs/remotes are listed on the",
      "           command line as <commit>. If <pattern> is given, limit",
      "           remote-tracking branches to ones matching given shell glob. If",
      "           pattern lacks ?, *, or [, /* at the end is implied.",
      "",
      "       --glob=<glob-pattern>",
      "           Pretend as if all the refs matching shell glob <glob-pattern> are",
      "           listed on the command line as <commit>. Leading refs/, is",
      "           automatically prepended if missing. If pattern lacks ?, *, or [, /*",
      "           at the end is implied.",
      "",
      "       --exclude=<glob-pattern>",
      "           Do not include refs matching <glob-pattern> that the next --all,",
      "           --branches, --tags, --remotes, or --glob would otherwise consider.",
      "           Repetitions of this option accumulate exclusion patterns up to the",
      "           next --all, --branches, --tags, --remotes, or --glob option (other",
      "           options or arguments do not clear accumlated patterns).",
      "",
      "           The patterns given should not begin with refs/heads, refs/tags, or",
      "           refs/remotes when applied to --branches, --tags, or --remotes,",
      "           respectively, and they must begin with refs/ when applied to --glob",
      "           or --all. If a trailing /* is intended, it must be given",
      "           explicitly.",
      "",
      "       --ignore-missing",
      "           Upon seeing an invalid object name in the input, pretend as if the",
      "           bad input was not given.",
      "",
      "       --bisect",
      "           Pretend as if the bad bisection ref refs/bisect/bad was listed and",
      "           as if it was followed by --not and the good bisection refs",
      "           refs/bisect/good-* on the command line.",
      "",
      "       --stdin",
      "           In addition to the <commit> listed on the command line, read them",
      "           from the standard input. If a -- separator is seen, stop reading",
      "           commits and start reading paths to limit the result.",
      "",
      "       --cherry-mark",
      "           Like --cherry-pick (see below) but mark equivalent commits with =",
      "           rather than omitting them, and inequivalent ones with +.",
      "",
      "       --cherry-pick",
      "           Omit any commit that introduces the same change as another commit",
      "           on the “other side” when the set of commits are limited with",
      "           symmetric difference.",
      "",
      "           For example, if you have two branches, A and B, a usual way to list",
      "           all commits on only one side of them is with --left-right (see the",
      "           example below in the description of the --left-right option).",
      "           However, it shows the commits that were cherry-picked from the",
      "           other branch (for example, “3rd on b” may be cherry-picked from",
      "           branch A). With this option, such pairs of commits are excluded",
      "           from the output.",
      "",
      "       --left-only, --right-only",
      "           List only commits on the respective side of a symmetric range, i.e.",
      "           only those which would be marked < resp.  > by --left-right.",
      "",
      "           For example, --cherry-pick --right-only A...B omits those commits",
      "           from B which are in A or are patch-equivalent to a commit in A. In",
      "           other words, this lists the + commits from git cherry A B. More",
      "           precisely, --cherry-pick --right-only --no-merges gives the exact",
      "           list.",
      "",
      "       --cherry",
      "           A synonym for --right-only --cherry-mark --no-merges; useful to",
      "           limit the output to the commits on our side and mark those that",
      "           have been applied to the other side of a forked history with git",
      "           log --cherry upstream...mybranch, similar to git cherry upstream",
      "           mybranch.",
      "",
      "       -g, --walk-reflogs",
      "           Instead of walking the commit ancestry chain, walk reflog entries",
      "           from the most recent one to older ones. When this option is used",
      "           you cannot specify commits to exclude (that is, ^commit,",
      "           commit1..commit2, nor commit1...commit2 notations cannot be used).",
      "",
      "           With --pretty format other than oneline (for obvious reasons), this",
      "           causes the output to have two extra lines of information taken from",
      "           the reflog. By default, commit@{Nth} notation is used in the",
      "           output. When the starting commit is specified as commit@{now},",
      "           output also uses commit@{timestamp} notation instead. Under",
      "           --pretty=oneline, the commit message is prefixed with this",
      "           information on the same line. This option cannot be combined with",
      "           --reverse. See also git-reflog(1).",
      "",
      "       --merge",
      "           After a failed merge, show refs that touch files having a conflict",
      "           and don’t exist on all heads to merge.",
      "",
      "       --boundary",
      "           Output excluded boundary commits. Boundary commits are prefixed",
      "           with -.",
      "",
      "   History Simplification",
      "       Sometimes you are only interested in parts of the history, for example",
      "       the commits modifying a particular <path>. But there are two parts of",
      "       History Simplification, one part is selecting the commits and the other",
      "       is how to do it, as there are various strategies to simplify the",
      "       history.",
      "",
      "       The following options select the commits to be shown:",
      "",
      "       <paths>",
      "           Commits modifying the given <paths> are selected.",
      "",
      "       --simplify-by-decoration",
      "           Commits that are referred by some branch or tag are selected.",
      "",
      "       Note that extra commits can be shown to give a meaningful history.",
      "",
      "       The following options affect the way the simplification is performed:",
      "",
      "       Default mode",
      "           Simplifies the history to the simplest history explaining the final",
      "           state of the tree. Simplest because it prunes some side branches if",
      "           the end result is the same (i.e. merging branches with the same",
      "           content)",
      "",
      "       --full-history",
      "           Same as the default mode, but does not prune some history.",
      "",
      "       --dense",
      "           Only the selected commits are shown, plus some to have a meaningful",
      "           history.",
      "",
      "       --sparse",
      "           All commits in the simplified history are shown.",
      "",
      "       --simplify-merges",
      "           Additional option to --full-history to remove some needless merges",
      "           from the resulting history, as there are no selected commits",
      "           contributing to this merge.",
      "",
      "       --ancestry-path",
      "           When given a range of commits to display (e.g.  commit1..commit2 or",
      "           commit2 ^commit1), only display commits that exist directly on the",
      "           ancestry chain between the commit1 and commit2, i.e. commits that",
      "           are both descendants of commit1, and ancestors of commit2.",
      "",
      "       A more detailed explanation follows.",
      "",
      "       Suppose you specified foo as the <paths>. We shall call commits that",
      "       modify foo !TREESAME, and the rest TREESAME. (In a diff filtered for",
      "       foo, they look different and equal, respectively.)",
      "",
      "       In the following, we will always refer to the same example history to",
      "       illustrate the differences between simplification settings. We assume",
      "       that you are filtering for a file foo in this commit graph:",
      "",
      "                     .-A---M---N---O---P---Q",
      "                    /     /   /   /   /   /",
      "                   I     B   C   D   E   Y",
      "                    \\   /   /   /   /   /",
      "                     `-------------'   X",
      "",
      "",
      "       The horizontal line of history A---Q is taken to be the first parent of",
      "       each merge. The commits are:",
      "",
      "       ·   I is the initial commit, in which foo exists with contents “asdf”,",
      "           and a file quux exists with contents “quux”. Initial commits are",
      "           compared to an empty tree, so I is !TREESAME.",
      "",
      "       ·   In A, foo contains just “foo”.",
      "",
      "       ·   B contains the same change as A. Its merge M is trivial and hence",
      "           TREESAME to all parents.",
      "",
      "       ·   C does not change foo, but its merge N changes it to “foobar”, so",
      "           it is not TREESAME to any parent.",
      "",
      "       ·   D sets foo to “baz”. Its merge O combines the strings from N and D",
      "           to “foobarbaz”; i.e., it is not TREESAME to any parent.",
      "",
      "       ·   E changes quux to “xyzzy”, and its merge P combines the strings to",
      "           “quux xyzzy”.  P is TREESAME to O, but not to E.",
      "",
      "       ·   X is an independent root commit that added a new file side, and Y",
      "           modified it.  Y is TREESAME to X. Its merge Q added side to P, and",
      "           Q is TREESAME to P, but not to Y.",
      "",
      "       rev-list walks backwards through history, including or excluding",
      "       commits based on whether --full-history and/or parent rewriting (via",
      "       --parents or --children) are used. The following settings are",
      "       available.",
      "",
      "       Default mode",
      "           Commits are included if they are not TREESAME to any parent (though",
      "           this can be changed, see --sparse below). If the commit was a",
      "           merge, and it was TREESAME to one parent, follow only that parent.",
      "           (Even if there are several TREESAME parents, follow only one of",
      "           them.) Otherwise, follow all parents.",
      "",
      "           This results in:",
      "",
      "                         .-A---N---O",
      "                        /     /   /",
      "                       I---------D",
      "",
      "           Note how the rule to only follow the TREESAME parent, if one is",
      "           available, removed B from consideration entirely.  C was considered",
      "           via N, but is TREESAME. Root commits are compared to an empty tree,",
      "           so I is !TREESAME.",
      "",
      "           Parent/child relations are only visible with --parents, but that",
      "           does not affect the commits selected in default mode, so we have",
      "           shown the parent lines.",
      "",
      "       --full-history without parent rewriting",
      "           This mode differs from the default in one point: always follow all",
      "           parents of a merge, even if it is TREESAME to one of them. Even if",
      "           more than one side of the merge has commits that are included, this",
      "           does not imply that the merge itself is! In the example, we get",
      "",
      "                       I  A  B  N  D  O  P  Q",
      "",
      "           M was excluded because it is TREESAME to both parents.  E, C and B",
      "           were all walked, but only B was !TREESAME, so the others do not",
      "           appear.",
      "",
      "           Note that without parent rewriting, it is not really possible to",
      "           talk about the parent/child relationships between the commits, so",
      "           we show them disconnected.",
      "",
      "       --full-history with parent rewriting",
      "           Ordinary commits are only included if they are !TREESAME (though",
      "           this can be changed, see --sparse below).",
      "",
      "           Merges are always included. However, their parent list is",
      "           rewritten: Along each parent, prune away commits that are not",
      "           included themselves. This results in",
      "",
      "                         .-A---M---N---O---P---Q",
      "                        /     /   /   /   /",
      "                       I     B   /   D   /",
      "                        \\   /   /   /   /",
      "                         `-------------'",
      "",
      "           Compare to --full-history without rewriting above. Note that E was",
      "           pruned away because it is TREESAME, but the parent list of P was",
      "           rewritten to contain E's parent I. The same happened for C and N,",
      "           and X, Y and Q.",
      "",
      "       In addition to the above settings, you can change whether TREESAME",
      "       affects inclusion:",
      "",
      "       --dense",
      "           Commits that are walked are included if they are not TREESAME to",
      "           any parent.",
      "",
      "       --sparse",
      "           All commits that are walked are included.",
      "",
      "           Note that without --full-history, this still simplifies merges: if",
      "           one of the parents is TREESAME, we follow only that one, so the",
      "           other sides of the merge are never walked.",
      "",
      "       --simplify-merges",
      "           First, build a history graph in the same way that --full-history",
      "           with parent rewriting does (see above).",
      "",
      "           Then simplify each commit C to its replacement C' in the final",
      "           history according to the following rules:",
      "",
      "           ·   Set C' to C.",
      "",
      "           ·   Replace each parent P of C' with its simplification P'. In the",
      "               process, drop parents that are ancestors of other parents or",
      "               that are root commits TREESAME to an empty tree, and remove",
      "               duplicates, but take care to never drop all parents that we are",
      "               TREESAME to.",
      "",
      "           ·   If after this parent rewriting, C' is a root or merge commit",
      "               (has zero or >1 parents), a boundary commit, or !TREESAME, it",
      "               remains. Otherwise, it is replaced with its only parent.",
      "",
      "           The effect of this is best shown by way of comparing to",
      "           --full-history with parent rewriting. The example turns into:",
      "",
      "                         .-A---M---N---O",
      "                        /     /       /",
      "                       I     B       D",
      "                        \\   /       /",
      "                         `---------'",
      "",
      "           Note the major differences in N, P, and Q over --full-history:",
      "",
      "           ·   N's parent list had I removed, because it is an ancestor of the",
      "               other parent M. Still, N remained because it is !TREESAME.",
      "",
      "           ·   P's parent list similarly had I removed.  P was then removed",
      "               completely, because it had one parent and is TREESAME.",
      "",
      "           ·   Q's parent list had Y simplified to X.  X was then removed,",
      "               because it was a TREESAME root.  Q was then removed completely,",
      "               because it had one parent and is TREESAME.",
      "",
      "       Finally, there is a fifth simplification mode available:",
      "",
      "       --ancestry-path",
      "           Limit the displayed commits to those directly on the ancestry chain",
      "           between the “from” and “to” commits in the given commit range. I.e.",
      "           only display commits that are ancestor of the “to” commit and",
      "           descendants of the “from” commit.",
      "",
      "           As an example use case, consider the following commit history:",
      "",
      "                           D---E-------F",
      "                          /     \\       \\",
      "                         B---C---G---H---I---J",
      "                        /                     \\",
      "                       A-------K---------------L--M",
      "",
      "           A regular D..M computes the set of commits that are ancestors of M,",
      "           but excludes the ones that are ancestors of D. This is useful to",
      "           see what happened to the history leading to M since D, in the sense",
      "           that “what does M have that did not exist in D”. The result in this",
      "           example would be all the commits, except A and B (and D itself, of",
      "           course).",
      "",
      "           When we want to find out what commits in M are contaminated with",
      "           the bug introduced by D and need fixing, however, we might want to",
      "           view only the subset of D..M that are actually descendants of D,",
      "           i.e. excluding C and K. This is exactly what the --ancestry-path",
      "           option does. Applied to the D..M range, it results in:",
      "",
      "                               E-------F",
      "                                \\       \\",
      "                                 G---H---I---J",
      "                                              \\",
      "                                               L--M",
      "",
      "",
      "       The --simplify-by-decoration option allows you to view only the big",
      "       picture of the topology of the history, by omitting commits that are",
      "       not referenced by tags. Commits are marked as !TREESAME (in other",
      "       words, kept after history simplification rules described above) if (1)",
      "       they are referenced by tags, or (2) they change the contents of the",
      "       paths given on the command line. All other commits are marked as",
      "       TREESAME (subject to be simplified away).",
      "",
      "   Commit Ordering",
      "       By default, the commits are shown in reverse chronological order.",
      "",
      "       --date-order",
      "           Show no parents before all of its children are shown, but otherwise",
      "           show commits in the commit timestamp order.",
      "",
      "       --author-date-order",
      "           Show no parents before all of its children are shown, but otherwise",
      "           show commits in the author timestamp order.",
      "",
      "       --topo-order",
      "           Show no parents before all of its children are shown, and avoid",
      "           showing commits on multiple lines of history intermixed.",
      "",
      "           For example, in a commit history like this:",
      "",
      "                   ---1----2----4----7",
      "                       \\              \\",
      "                        3----5----6----8---",
      "",
      "           where the numbers denote the order of commit timestamps, git",
      "           rev-list and friends with --date-order show the commits in the",
      "           timestamp order: 8 7 6 5 4 3 2 1.",
      "",
      "           With --topo-order, they would show 8 6 5 3 7 4 2 1 (or 8 7 4 2 6 5",
      "           3 1); some older commits are shown before newer ones in order to",
      "           avoid showing the commits from two parallel development track mixed",
      "           together.",
      "",
      "       --reverse",
      "           Output the commits in reverse order. Cannot be combined with",
      "           --walk-reflogs.",
      "",
      "   Object Traversal",
      "       These options are mostly targeted for packing of Git repositories.",
      "",
      "       --objects",
      "           Print the object IDs of any object referenced by the listed",
      "           commits.  --objects foo ^bar thus means “send me all object IDs",
      "           which I need to download if I have the commit object bar but not",
      "           foo”.",
      "",
      "       --objects-edge",
      "           Similar to --objects, but also print the IDs of excluded commits",
      "           prefixed with a “-” character. This is used by git-pack-objects(1)",
      "           to build “thin” pack, which records objects in deltified form based",
      "           on objects contained in these excluded commits to reduce network",
      "           traffic.",
      "",
      "       --unpacked",
      "           Only useful with --objects; print the object IDs that are not in",
      "           packs.",
      "",
      "       --no-walk[=(sorted|unsorted)]",
      "           Only show the given commits, but do not traverse their ancestors.",
      "           This has no effect if a range is specified. If the argument",
      "           unsorted is given, the commits are shown in the order they were",
      "           given on the command line. Otherwise (if sorted or no argument was",
      "           given), the commits are shown in reverse chronological order by",
      "           commit time.",
      "",
      "       --do-walk",
      "           Overrides a previous --no-walk.",
      "",
      "   Commit Formatting",
      "       --pretty[=<format>], --format=<format>",
      "           Pretty-print the contents of the commit logs in a given format,",
      "           where <format> can be one of oneline, short, medium, full, fuller,",
      "           email, raw and format:<string>. See the \"PRETTY FORMATS\" section",
      "           for some additional details for each format. When omitted, the",
      "           format defaults to medium.",
      "",
      "           Note: you can specify the default pretty format in the repository",
      "           configuration (see git-config(1)).",
      "",
      "       --abbrev-commit",
      "           Instead of showing the full 40-byte hexadecimal commit object name,",
      "           show only a partial prefix. Non default number of digits can be",
      "           specified with \"--abbrev=<n>\" (which also modifies diff output, if",
      "           it is displayed).",
      "",
      "           This should make \"--pretty=oneline\" a whole lot more readable for",
      "           people using 80-column terminals.",
      "",
      "       --no-abbrev-commit",
      "           Show the full 40-byte hexadecimal commit object name. This negates",
      "           --abbrev-commit and those options which imply it such as",
      "           \"--oneline\". It also overrides the log.abbrevCommit variable.",
      "",
      "       --oneline",
      "           This is a shorthand for \"--pretty=oneline --abbrev-commit\" used",
      "           together.",
      "",
      "       --encoding=<encoding>",
      "           The commit objects record the encoding used for the log message in",
      "           their encoding header; this option can be used to tell the command",
      "           to re-code the commit log message in the encoding preferred by the",
      "           user. For non plumbing commands this defaults to UTF-8.",
      "",
      "       --notes[=<ref>]",
      "           Show the notes (see git-notes(1)) that annotate the commit, when",
      "           showing the commit log message. This is the default for git log,",
      "           git show and git whatchanged commands when there is no --pretty,",
      "           --format nor --oneline option given on the command line.",
      "",
      "           By default, the notes shown are from the notes refs listed in the",
      "           core.notesRef and notes.displayRef variables (or corresponding",
      "           environment overrides). See git-config(1) for more details.",
      "",
      "           With an optional <ref> argument, show this notes ref instead of the",
      "           default notes ref(s). The ref is taken to be in refs/notes/ if it",
      "           is not qualified.",
      "",
      "           Multiple --notes options can be combined to control which notes are",
      "           being displayed. Examples: \"--notes=foo\" will show only notes from",
      "           \"refs/notes/foo\"; \"--notes=foo --notes\" will show both notes from",
      "           \"refs/notes/foo\" and from the default notes ref(s).",
      "",
      "       --no-notes",
      "           Do not show notes. This negates the above --notes option, by",
      "           resetting the list of notes refs from which notes are shown.",
      "           Options are parsed in the order given on the command line, so e.g.",
      "           \"--notes --notes=foo --no-notes --notes=bar\" will only show notes",
      "           from \"refs/notes/bar\".",
      "",
      "       --show-notes[=<ref>], --[no-]standard-notes",
      "           These options are deprecated. Use the above --notes/--no-notes",
      "           options instead.",
      "",
      "       --show-signature",
      "           Check the validity of a signed commit object by passing the",
      "           signature to gpg --verify and show the output.",
      "",
      "       --relative-date",
      "           Synonym for --date=relative.",
      "",
      "       --date=(relative|local|default|iso|rfc|short|raw)",
      "           Only takes effect for dates shown in human-readable format, such as",
      "           when using --pretty.  log.date config variable sets a default value",
      "           for the log command’s --date option.",
      "",
      "           --date=relative shows dates relative to the current time, e.g. “2",
      "           hours ago”.",
      "",
      "           --date=local shows timestamps in user’s local time zone.",
      "",
      "           --date=iso (or --date=iso8601) shows timestamps in ISO 8601 format.",
      "",
      "           --date=rfc (or --date=rfc2822) shows timestamps in RFC 2822 format,",
      "           often found in email messages.",
      "",
      "           --date=short shows only the date, but not the time, in YYYY-MM-DD",
      "           format.",
      "",
      "           --date=raw shows the date in the internal raw Git format %s %z",
      "           format.",
      "",
      "           --date=default shows timestamps in the original time zone (either",
      "           committer’s or author’s).",
      "",
      "       --parents",
      "           Print also the parents of the commit (in the form \"commit",
      "           parent...\"). Also enables parent rewriting, see History",
      "           Simplification below.",
      "",
      "       --children",
      "           Print also the children of the commit (in the form \"commit",
      "           child...\"). Also enables parent rewriting, see History",
      "           Simplification below.",
      "",
      "       --left-right",
      "           Mark which side of a symmetric diff a commit is reachable from.",
      "           Commits from the left side are prefixed with < and those from the",
      "           right with >. If combined with --boundary, those commits are",
      "           prefixed with -.",
      "",
      "           For example, if you have this topology:",
      "",
      "                            y---b---b  branch B",
      "                           / \\ /",
      "                          /   .",
      "                         /   / \\",
      "                        o---x---a---a  branch A",
      "",
      "           you would get an output like this:",
      "",
      "                       $ git rev-list --left-right --boundary --pretty=oneline A...B",
      "",
      "                       >bbbbbbb... 3rd on b",
      "                       >bbbbbbb... 2nd on b",
      "                       <aaaaaaa... 3rd on a",
      "                       <aaaaaaa... 2nd on a",
      "                       -yyyyyyy... 1st on b",
      "                       -xxxxxxx... 1st on a",
      "",
      "",
      "       --graph",
      "           Draw a text-based graphical representation of the commit history on",
      "           the left hand side of the output. This may cause extra lines to be",
      "           printed in between commits, in order for the graph history to be",
      "           drawn properly.",
      "",
      "           This enables parent rewriting, see History Simplification below.",
      "",
      "           This implies the --topo-order option by default, but the",
      "           --date-order option may also be specified.",
      "",
      "   Diff Formatting",
      "       Listed below are options that control the formatting of diff output.",
      "       Some of them are specific to git-rev-list(1), however other diff",
      "       options may be given. See git-diff-files(1) for more options.",
      "",
      "       -c",
      "           With this option, diff output for a merge commit shows the",
      "           differences from each of the parents to the merge result",
      "           simultaneously instead of showing pairwise diff between a parent",
      "           and the result one at a time. Furthermore, it lists only files",
      "           which were modified from all parents.",
      "",
      "       --cc",
      "           This flag implies the -c option and further compresses the patch",
      "           output by omitting uninteresting hunks whose contents in the",
      "           parents have only two variants and the merge result picks one of",
      "           them without modification.",
      "",
      "       -m",
      "           This flag makes the merge commits show the full diff like regular",
      "           commits; for each merge parent, a separate log entry and diff is",
      "           generated. An exception is that only diff against the first parent",
      "           is shown when --first-parent option is given; in that case, the",
      "           output represents the changes the merge brought into the",
      "           then-current branch.",
      "",
      "       -r",
      "           Show recursive diffs.",
      "",
      "       -t",
      "           Show the tree objects in the diff output. This implies -r.",
      "",
      "PRETTY FORMATS",
      "       If the commit is a merge, and if the pretty-format is not oneline,",
      "       email or raw, an additional line is inserted before the Author: line.",
      "       This line begins with \"Merge: \" and the sha1s of ancestral commits are",
      "       printed, separated by spaces. Note that the listed commits may not",
      "       necessarily be the list of the direct parent commits if you have",
      "       limited your view of history: for example, if you are only interested",
      "       in changes related to a certain directory or file.",
      "",
      "       There are several built-in formats, and you can define additional",
      "       formats by setting a pretty.<name> config option to either another",
      "       format name, or a format: string, as described below (see git-",
      "       config(1)). Here are the details of the built-in formats:",
      "",
      "       ·   oneline",
      "",
      "               <sha1> <title line>",
      "",
      "           This is designed to be as compact as possible.",
      "",
      "       ·   short",
      "",
      "               commit <sha1>",
      "               Author: <author>",
      "",
      "               <title line>",
      "",
      "       ·   medium",
      "",
      "               commit <sha1>",
      "               Author: <author>",
      "               Date:   <author date>",
      "",
      "               <title line>",
      "",
      "               <full commit message>",
      "",
      "       ·   full",
      "",
      "               commit <sha1>",
      "               Author: <author>",
      "               Commit: <committer>",
      "",
      "               <title line>",
      "",
      "               <full commit message>",
      "",
      "       ·   fuller",
      "",
      "               commit <sha1>",
      "               Author:     <author>",
      "               AuthorDate: <author date>",
      "               Commit:     <committer>",
      "               CommitDate: <committer date>",
      "",
      "               <title line>",
      "",
      "               <full commit message>",
      "",
      "       ·   email",
      "",
      "               From <sha1> <date>",
      "               From: <author>",
      "               Date: <author date>",
      "               Subject: [PATCH] <title line>",
      "",
      "               <full commit message>",
      "",
      "       ·   raw",
      "",
      "           The raw format shows the entire commit exactly as stored in the",
      "           commit object. Notably, the SHA-1s are displayed in full,",
      "           regardless of whether --abbrev or --no-abbrev are used, and parents",
      "           information show the true parent commits, without taking grafts nor",
      "           history simplification into account.",
      "",
      "       ·   format:<string>",
      "",
      "           The format:<string> format allows you to specify which information",
      "           you want to show. It works a little bit like printf format, with",
      "           the notable exception that you get a newline with %n instead of \\n.",
      "",
      "           E.g, format:\"The author of %h was %an, %ar%nThe title was >>%s<<%n\"",
      "           would show something like this:",
      "",
      "               The author of fe6e0ee was Junio C Hamano, 23 hours ago",
      "               The title was >>t4119: test autocomputing -p<n> for traditional diff input.<<",
      "",
      "           The placeholders are:",
      "",
      "           ·   %H: commit hash",
      "",
      "           ·   %h: abbreviated commit hash",
      "",
      "           ·   %T: tree hash",
      "",
      "           ·   %t: abbreviated tree hash",
      "",
      "           ·   %P: parent hashes",
      "",
      "           ·   %p: abbreviated parent hashes",
      "",
      "           ·   %an: author name",
      "",
      "           ·   %aN: author name (respecting .mailmap, see git-shortlog(1) or",
      "               git-blame(1))",
      "",
      "           ·   %ae: author email",
      "",
      "           ·   %aE: author email (respecting .mailmap, see git-shortlog(1) or",
      "               git-blame(1))",
      "",
      "           ·   %ad: author date (format respects --date= option)",
      "",
      "           ·   %aD: author date, RFC2822 style",
      "",
      "           ·   %ar: author date, relative",
      "",
      "           ·   %at: author date, UNIX timestamp",
      "",
      "           ·   %ai: author date, ISO 8601 format",
      "",
      "           ·   %cn: committer name",
      "",
      "           ·   %cN: committer name (respecting .mailmap, see git-shortlog(1)",
      "               or git-blame(1))",
      "",
      "           ·   %ce: committer email",
      "",
      "           ·   %cE: committer email (respecting .mailmap, see git-shortlog(1)",
      "               or git-blame(1))",
      "",
      "           ·   %cd: committer date",
      "",
      "           ·   %cD: committer date, RFC2822 style",
      "",
      "           ·   %cr: committer date, relative",
      "",
      "           ·   %ct: committer date, UNIX timestamp",
      "",
      "           ·   %ci: committer date, ISO 8601 format",
      "",
      "           ·   %d: ref names, like the --decorate option of git-log(1)",
      "",
      "           ·   %e: encoding",
      "",
      "           ·   %s: subject",
      "",
      "           ·   %f: sanitized subject line, suitable for a filename",
      "",
      "           ·   %b: body",
      "",
      "           ·   %B: raw body (unwrapped subject and body)",
      "",
      "           ·   %N: commit notes",
      "",
      "           ·   %GG: raw verification message from GPG for a signed commit",
      "",
      "           ·   %G?: show \"G\" for a Good signature, \"B\" for a Bad signature,",
      "               \"U\" for a good, untrusted signature and \"N\" for no signature",
      "",
      "           ·   %GS: show the name of the signer for a signed commit",
      "",
      "           ·   %GK: show the key used to sign a signed commit",
      "",
      "           ·   %gD: reflog selector, e.g., refs/stash@{1}",
      "",
      "           ·   %gd: shortened reflog selector, e.g., stash@{1}",
      "",
      "           ·   %gn: reflog identity name",
      "",
      "           ·   %gN: reflog identity name (respecting .mailmap, see git-",
      "               shortlog(1) or git-blame(1))",
      "",
      "           ·   %ge: reflog identity email",
      "",
      "           ·   %gE: reflog identity email (respecting .mailmap, see git-",
      "               shortlog(1) or git-blame(1))",
      "",
      "           ·   %gs: reflog subject",
      "",
      "           ·   %Cred: switch color to red",
      "",
      "           ·   %Cgreen: switch color to green",
      "",
      "           ·   %Cblue: switch color to blue",
      "",
      "           ·   %Creset: reset color",
      "",
      "           ·   %C(...): color specification, as described in color.branch.*",
      "               config option; adding auto, at the beginning will emit color",
      "               only when colors are enabled for log output (by color.diff,",
      "               color.ui, or --color, and respecting the auto settings of the",
      "               former if we are going to a terminal).  auto alone (i.e.",
      "               %C(auto)) will turn on auto coloring on the next placeholders",
      "               until the color is switched again.",
      "",
      "           ·   %m: left, right or boundary mark",
      "",
      "           ·   %n: newline",
      "",
      "           ·   %%: a raw %",
      "",
      "           ·   %x00: print a byte from a hex code",
      "",
      "           ·   %w([<w>[,<i1>[,<i2>]]]): switch line wrapping, like the -w",
      "               option of git-shortlog(1).",
      "",
      "           ·   %<(<N>[,trunc|ltrunc|mtrunc]): make the next placeholder take",
      "               at least N columns, padding spaces on the right if necessary.",
      "               Optionally truncate at the beginning (ltrunc), the middle",
      "               (mtrunc) or the end (trunc) if the output is longer than N",
      "               columns. Note that truncating only works correctly with N >= 2.",
      "",
      "           ·   %<|(<N>): make the next placeholder take at least until Nth",
      "               columns, padding spaces on the right if necessary",
      "",
      "           ·   %>(<N>), %>|(<N>): similar to %<(<N>), %<|(<N>) respectively,",
      "               but padding spaces on the left",
      "",
      "           ·   %>>(<N>), %>>|(<N>): similar to %>(<N>), %>|(<N>) respectively,",
      "               except that if the next placeholder takes more spaces than",
      "               given and there are spaces on its left, use those spaces",
      "",
      "           ·   %><(<N>), %><|(<N>): similar to % <(<N>), %<|(<N>)",
      "               respectively, but padding both sides (i.e. the text is",
      "               centered)",
      "",
      "           Note",
      "           Some placeholders may depend on other options given to the revision",
      "           traversal engine. For example, the %g* reflog options will insert",
      "           an empty string unless we are traversing reflog entries (e.g., by",
      "           git log -g). The %d placeholder will use the \"short\" decoration",
      "           format if --decorate was not already provided on the command line.",
      "",
      "       If you add a + (plus sign) after % of a placeholder, a line-feed is",
      "       inserted immediately before the expansion if and only if the",
      "       placeholder expands to a non-empty string.",
      "",
      "       If you add a - (minus sign) after % of a placeholder, line-feeds that",
      "       immediately precede the expansion are deleted if and only if the",
      "       placeholder expands to an empty string.",
      "",
      "       If you add a ` ` (space) after % of a placeholder, a space is inserted",
      "       immediately before the expansion if and only if the placeholder expands",
      "       to a non-empty string.",
      "",
      "       ·   tformat:",
      "",
      "           The tformat: format works exactly like format:, except that it",
      "           provides \"terminator\" semantics instead of \"separator\" semantics.",
      "           In other words, each commit has the message terminator character",
      "           (usually a newline) appended, rather than a separator placed",
      "           between entries. This means that the final entry of a single-line",
      "           format will be properly terminated with a new line, just as the",
      "           \"oneline\" format does. For example:",
      "",
      "               $ git log -2 --pretty=format:%h 4da45bef \\",
      "                 | perl -pe '$_ .= \" -- NO NEWLINE\\n\" unless /\\n/'",
      "               4da45be",
      "               7134973 -- NO NEWLINE",
      "",
      "               $ git log -2 --pretty=tformat:%h 4da45bef \\",
      "                 | perl -pe '$_ .= \" -- NO NEWLINE\\n\" unless /\\n/'",
      "               4da45be",
      "               7134973",
      "",
      "           In addition, any unrecognized string that has a % in it is",
      "           interpreted as if it has tformat: in front of it. For example,",
      "           these two are equivalent:",
      "",
      "               $ git log -2 --pretty=tformat:%h 4da45bef",
      "               $ git log -2 --pretty=%h 4da45bef",
      "",
      "",
      "COMMON DIFF OPTIONS",
      "       -p, -u, --patch",
      "           Generate patch (see section on generating patches).",
      "",
      "       -s, --no-patch",
      "           Suppress diff output. Useful for commands like git show that show",
      "           the patch by default, or to cancel the effect of --patch.",
      "",
      "       -U<n>, --unified=<n>",
      "           Generate diffs with <n> lines of context instead of the usual",
      "           three. Implies -p.",
      "",
      "       --raw",
      "           Generate the raw format.",
      "",
      "       --patch-with-raw",
      "           Synonym for -p --raw.",
      "",
      "       --minimal",
      "           Spend extra time to make sure the smallest possible diff is",
      "           produced.",
      "",
      "       --patience",
      "           Generate a diff using the \"patience diff\" algorithm.",
      "",
      "       --histogram",
      "           Generate a diff using the \"histogram diff\" algorithm.",
      "",
      "       --diff-algorithm={patience|minimal|histogram|myers}",
      "           Choose a diff algorithm. The variants are as follows:",
      "",
      "           default, myers",
      "               The basic greedy diff algorithm. Currently, this is the",
      "               default.",
      "",
      "           minimal",
      "               Spend extra time to make sure the smallest possible diff is",
      "               produced.",
      "",
      "           patience",
      "               Use \"patience diff\" algorithm when generating patches.",
      "",
      "           histogram",
      "               This algorithm extends the patience algorithm to \"support",
      "               low-occurrence common elements\".",
      "",
      "           For instance, if you configured diff.algorithm variable to a",
      "           non-default value and want to use the default one, then you have to",
      "           use --diff-algorithm=default option.",
      "",
      "       --stat[=<width>[,<name-width>[,<count>]]]",
      "           Generate a diffstat. By default, as much space as necessary will be",
      "           used for the filename part, and the rest for the graph part.",
      "           Maximum width defaults to terminal width, or 80 columns if not",
      "           connected to a terminal, and can be overridden by <width>. The",
      "           width of the filename part can be limited by giving another width",
      "           <name-width> after a comma. The width of the graph part can be",
      "           limited by using --stat-graph-width=<width> (affects all commands",
      "           generating a stat graph) or by setting diff.statGraphWidth=<width>",
      "           (does not affect git format-patch). By giving a third parameter",
      "           <count>, you can limit the output to the first <count> lines,",
      "           followed by ...  if there are more.",
      "",
      "           These parameters can also be set individually with",
      "           --stat-width=<width>, --stat-name-width=<name-width> and",
      "           --stat-count=<count>.",
      "",
      "       --numstat",
      "           Similar to --stat, but shows number of added and deleted lines in",
      "           decimal notation and pathname without abbreviation, to make it more",
      "           machine friendly. For binary files, outputs two - instead of saying",
      "           0 0.",
      "",
      "       --shortstat",
      "           Output only the last line of the --stat format containing total",
      "           number of modified files, as well as number of added and deleted",
      "           lines.",
      "",
      "       --dirstat[=<param1,param2,...>]",
      "           Output the distribution of relative amount of changes for each",
      "           sub-directory. The behavior of --dirstat can be customized by",
      "           passing it a comma separated list of parameters. The defaults are",
      "           controlled by the diff.dirstat configuration variable (see git-",
      "           config(1)). The following parameters are available:",
      "",
      "           changes",
      "               Compute the dirstat numbers by counting the lines that have",
      "               been removed from the source, or added to the destination. This",
      "               ignores the amount of pure code movements within a file. In",
      "               other words, rearranging lines in a file is not counted as much",
      "               as other changes. This is the default behavior when no",
      "               parameter is given.",
      "",
      "           lines",
      "               Compute the dirstat numbers by doing the regular line-based",
      "               diff analysis, and summing the removed/added line counts. (For",
      "               binary files, count 64-byte chunks instead, since binary files",
      "               have no natural concept of lines). This is a more expensive",
      "               --dirstat behavior than the changes behavior, but it does count",
      "               rearranged lines within a file as much as other changes. The",
      "               resulting output is consistent with what you get from the other",
      "               --*stat options.",
      "",
      "           files",
      "               Compute the dirstat numbers by counting the number of files",
      "               changed. Each changed file counts equally in the dirstat",
      "               analysis. This is the computationally cheapest --dirstat",
      "               behavior, since it does not have to look at the file contents",
      "               at all.",
      "",
      "           cumulative",
      "               Count changes in a child directory for the parent directory as",
      "               well. Note that when using cumulative, the sum of the",
      "               percentages reported may exceed 100%. The default",
      "               (non-cumulative) behavior can be specified with the",
      "               noncumulative parameter.",
      "",
      "           <limit>",
      "               An integer parameter specifies a cut-off percent (3% by",
      "               default). Directories contributing less than this percentage of",
      "               the changes are not shown in the output.",
      "",
      "           Example: The following will count changed files, while ignoring",
      "           directories with less than 10% of the total amount of changed",
      "           files, and accumulating child directory counts in the parent",
      "           directories: --dirstat=files,10,cumulative.",
      "",
      "       --summary",
      "           Output a condensed summary of extended header information such as",
      "           creations, renames and mode changes.",
      "",
      "       --patch-with-stat",
      "           Synonym for -p --stat.",
      "",
      "       -z",
      "           Separate the commits with NULs instead of with new newlines.",
      "",
      "           Also, when --raw or --numstat has been given, do not munge",
      "           pathnames and use NULs as output field terminators.",
      "",
      "           Without this option, each pathname output will have TAB, LF, double",
      "           quotes, and backslash characters replaced with \\t, \\n, \\\", and \\\\,",
      "           respectively, and the pathname will be enclosed in double quotes if",
      "           any of those replacements occurred.",
      "",
      "       --name-only",
      "           Show only names of changed files.",
      "",
      "       --name-status",
      "           Show only names and status of changed files. See the description of",
      "           the --diff-filter option on what the status letters mean.",
      "",
      "       --submodule[=<format>]",
      "           Specify how differences in submodules are shown. When --submodule",
      "           or --submodule=log is given, the log format is used. This format",
      "           lists the commits in the range like git-submodule(1)summary does.",
      "           Omitting the --submodule option or specifying --submodule=short,",
      "           uses the short format. This format just shows the names of the",
      "           commits at the beginning and end of the range. Can be tweaked via",
      "           the diff.submodule configuration variable.",
      "",
      "       --color[=<when>]",
      "           Show colored diff.  --color (i.e. without =<when>) is the same as",
      "           --color=always.  <when> can be one of always, never, or auto.",
      "",
      "       --no-color",
      "           Turn off colored diff. It is the same as --color=never.",
      "",
      "       --word-diff[=<mode>]",
      "           Show a word diff, using the <mode> to delimit changed words. By",
      "           default, words are delimited by whitespace; see --word-diff-regex",
      "           below. The <mode> defaults to plain, and must be one of:",
      "",
      "           color",
      "               Highlight changed words using only colors. Implies --color.",
      "",
      "           plain",
      "               Show words as [-removed-] and {+added+}. Makes no attempts to",
      "               escape the delimiters if they appear in the input, so the",
      "               output may be ambiguous.",
      "",
      "           porcelain",
      "               Use a special line-based format intended for script",
      "               consumption. Added/removed/unchanged runs are printed in the",
      "               usual unified diff format, starting with a +/-/` ` character at",
      "               the beginning of the line and extending to the end of the line.",
      "               Newlines in the input are represented by a tilde ~ on a line of",
      "               its own.",
      "",
      "           none",
      "               Disable word diff again.",
      "",
      "           Note that despite the name of the first mode, color is used to",
      "           highlight the changed parts in all modes if enabled.",
      "",
      "       --word-diff-regex=<regex>",
      "           Use <regex> to decide what a word is, instead of considering runs",
      "           of non-whitespace to be a word. Also implies --word-diff unless it",
      "           was already enabled.",
      "",
      "           Every non-overlapping match of the <regex> is considered a word.",
      "           Anything between these matches is considered whitespace and",
      "           ignored(!) for the purposes of finding differences. You may want to",
      "           append |[^[:space:]] to your regular expression to make sure that",
      "           it matches all non-whitespace characters. A match that contains a",
      "           newline is silently truncated(!) at the newline.",
      "",
      "           The regex can also be set via a diff driver or configuration",
      "           option, see gitattributes(1) or git-config(1). Giving it explicitly",
      "           overrides any diff driver or configuration setting. Diff drivers",
      "           override configuration settings.",
      "",
      "       --color-words[=<regex>]",
      "           Equivalent to --word-diff=color plus (if a regex was specified)",
      "           --word-diff-regex=<regex>.",
      "",
      "       --no-renames",
      "           Turn off rename detection, even when the configuration file gives",
      "           the default to do so.",
      "",
      "       --check",
      "           Warn if changes introduce whitespace errors. What are considered",
      "           whitespace errors is controlled by core.whitespace configuration.",
      "           By default, trailing whitespaces (including lines that solely",
      "           consist of whitespaces) and a space character that is immediately",
      "           followed by a tab character inside the initial indent of the line",
      "           are considered whitespace errors. Exits with non-zero status if",
      "           problems are found. Not compatible with --exit-code.",
      "",
      "       --full-index",
      "           Instead of the first handful of characters, show the full pre- and",
      "           post-image blob object names on the \"index\" line when generating",
      "           patch format output.",
      "",
      "       --binary",
      "           In addition to --full-index, output a binary diff that can be",
      "           applied with git-apply.",
      "",
      "       --abbrev[=<n>]",
      "           Instead of showing the full 40-byte hexadecimal object name in",
      "           diff-raw format output and diff-tree header lines, show only a",
      "           partial prefix. This is independent of the --full-index option",
      "           above, which controls the diff-patch output format. Non default",
      "           number of digits can be specified with --abbrev=<n>.",
      "",
      "       -B[<n>][/<m>], --break-rewrites[=[<n>][/<m>]]",
      "           Break complete rewrite changes into pairs of delete and create.",
      "           This serves two purposes:",
      "",
      "           It affects the way a change that amounts to a total rewrite of a",
      "           file not as a series of deletion and insertion mixed together with",
      "           a very few lines that happen to match textually as the context, but",
      "           as a single deletion of everything old followed by a single",
      "           insertion of everything new, and the number m controls this aspect",
      "           of the -B option (defaults to 60%).  -B/70% specifies that less",
      "           than 30% of the original should remain in the result for Git to",
      "           consider it a total rewrite (i.e. otherwise the resulting patch",
      "           will be a series of deletion and insertion mixed together with",
      "           context lines).",
      "",
      "           When used with -M, a totally-rewritten file is also considered as",
      "           the source of a rename (usually -M only considers a file that",
      "           disappeared as the source of a rename), and the number n controls",
      "           this aspect of the -B option (defaults to 50%).  -B20% specifies",
      "           that a change with addition and deletion compared to 20% or more of",
      "           the file’s size are eligible for being picked up as a possible",
      "           source of a rename to another file.",
      "",
      "       -M[<n>], --find-renames[=<n>]",
      "           If generating diffs, detect and report renames for each commit. For",
      "           following files across renames while traversing history, see",
      "           --follow. If n is specified, it is a threshold on the similarity",
      "           index (i.e. amount of addition/deletions compared to the file’s",
      "           size). For example, -M90% means Git should consider a delete/add",
      "           pair to be a rename if more than 90% of the file hasn’t changed.",
      "           Without a % sign, the number is to be read as a fraction, with a",
      "           decimal point before it. I.e., -M5 becomes 0.5, and is thus the",
      "           same as -M50%. Similarly, -M05 is the same as -M5%. To limit",
      "           detection to exact renames, use -M100%. The default similarity",
      "           index is 50%.",
      "",
      "       -C[<n>], --find-copies[=<n>]",
      "           Detect copies as well as renames. See also --find-copies-harder. If",
      "           n is specified, it has the same meaning as for -M<n>.",
      "",
      "       --find-copies-harder",
      "           For performance reasons, by default, -C option finds copies only if",
      "           the original file of the copy was modified in the same changeset.",
      "           This flag makes the command inspect unmodified files as candidates",
      "           for the source of copy. This is a very expensive operation for",
      "           large projects, so use it with caution. Giving more than one -C",
      "           option has the same effect.",
      "",
      "       -D, --irreversible-delete",
      "           Omit the preimage for deletes, i.e. print only the header but not",
      "           the diff between the preimage and /dev/null. The resulting patch is",
      "           not meant to be applied with patch nor git apply; this is solely",
      "           for people who want to just concentrate on reviewing the text after",
      "           the change. In addition, the output obviously lack enough",
      "           information to apply such a patch in reverse, even manually, hence",
      "           the name of the option.",
      "",
      "           When used together with -B, omit also the preimage in the deletion",
      "           part of a delete/create pair.",
      "",
      "       -l<num>",
      "           The -M and -C options require O(n^2) processing time where n is the",
      "           number of potential rename/copy targets. This option prevents",
      "           rename/copy detection from running if the number of rename/copy",
      "           targets exceeds the specified number.",
      "",
      "       --diff-filter=[(A|C|D|M|R|T|U|X|B)...[*]]",
      "           Select only files that are Added (A), Copied (C), Deleted (D),",
      "           Modified (M), Renamed (R), have their type (i.e. regular file,",
      "           symlink, submodule, ...) changed (T), are Unmerged (U), are Unknown",
      "           (X), or have had their pairing Broken (B). Any combination of the",
      "           filter characters (including none) can be used. When *",
      "           (All-or-none) is added to the combination, all paths are selected",
      "           if there is any file that matches other criteria in the comparison;",
      "           if there is no file that matches other criteria, nothing is",
      "           selected.",
      "",
      "       -S<string>",
      "           Look for differences that change the number of occurrences of the",
      "           specified string (i.e. addition/deletion) in a file. Intended for",
      "           the scripter’s use.",
      "",
      "           It is useful when you’re looking for an exact block of code (like a",
      "           struct), and want to know the history of that block since it first",
      "           came into being: use the feature iteratively to feed the",
      "           interesting block in the preimage back into -S, and keep going",
      "           until you get the very first version of the block.",
      "",
      "       -G<regex>",
      "           Look for differences whose patch text contains added/removed lines",
      "           that match <regex>.",
      "",
      "           To illustrate the difference between -S<regex> --pickaxe-regex and",
      "           -G<regex>, consider a commit with the following diff in the same",
      "           file:",
      "",
      "               +    return !regexec(regexp, two->ptr, 1, &regmatch, 0);",
      "               ...",
      "               -    hit = !regexec(regexp, mf2.ptr, 1, &regmatch, 0);",
      "",
      "           While git log -G\"regexec\\(regexp\" will show this commit, git log",
      "           -S\"regexec\\(regexp\" --pickaxe-regex will not (because the number of",
      "           occurrences of that string did not change).",
      "",
      "           See the pickaxe entry in gitdiffcore(7) for more information.",
      "",
      "       --pickaxe-all",
      "           When -S or -G finds a change, show all the changes in that",
      "           changeset, not just the files that contain the change in <string>.",
      "",
      "       --pickaxe-regex",
      "           Treat the <string> given to -S as an extended POSIX regular",
      "           expression to match.",
      "",
      "       -O<orderfile>",
      "           Output the patch in the order specified in the <orderfile>, which",
      "           has one shell glob pattern per line. This overrides the",
      "           diff.orderfile configuration variable (see git-config(1)). To",
      "           cancel diff.orderfile, use -O/dev/null.",
      "",
      "       -R",
      "           Swap two inputs; that is, show differences from index or on-disk",
      "           file to tree contents.",
      "",
      "       --relative[=<path>]",
      "           When run from a subdirectory of the project, it can be told to",
      "           exclude changes outside the directory and show pathnames relative",
      "           to it with this option. When you are not in a subdirectory (e.g. in",
      "           a bare repository), you can name which subdirectory to make the",
      "           output relative to by giving a <path> as an argument.",
      "",
      "       -a, --text",
      "           Treat all files as text.",
      "",
      "       --ignore-space-at-eol",
      "           Ignore changes in whitespace at EOL.",
      "",
      "       -b, --ignore-space-change",
      "           Ignore changes in amount of whitespace. This ignores whitespace at",
      "           line end, and considers all other sequences of one or more",
      "           whitespace characters to be equivalent.",
      "",
      "       -w, --ignore-all-space",
      "           Ignore whitespace when comparing lines. This ignores differences",
      "           even if one line has whitespace where the other line has none.",
      "",
      "       --ignore-blank-lines",
      "           Ignore changes whose lines are all blank.",
      "",
      "       --inter-hunk-context=<lines>",
      "           Show the context between diff hunks, up to the specified number of",
      "           lines, thereby fusing hunks that are close to each other.",
      "",
      "       -W, --function-context",
      "           Show whole surrounding functions of changes.",
      "",
      "       --ext-diff",
      "           Allow an external diff helper to be executed. If you set an",
      "           external diff driver with gitattributes(5), you need to use this",
      "           option with git-log(1) and friends.",
      "",
      "       --no-ext-diff",
      "           Disallow external diff drivers.",
      "",
      "       --textconv, --no-textconv",
      "           Allow (or disallow) external text conversion filters to be run when",
      "           comparing binary files. See gitattributes(5) for details. Because",
      "           textconv filters are typically a one-way conversion, the resulting",
      "           diff is suitable for human consumption, but cannot be applied. For",
      "           this reason, textconv filters are enabled by default only for git-",
      "           diff(1) and git-log(1), but not for git-format-patch(1) or diff",
      "           plumbing commands.",
      "",
      "       --ignore-submodules[=<when>]",
      "           Ignore changes to submodules in the diff generation. <when> can be",
      "           either \"none\", \"untracked\", \"dirty\" or \"all\", which is the default.",
      "           Using \"none\" will consider the submodule modified when it either",
      "           contains untracked or modified files or its HEAD differs from the",
      "           commit recorded in the superproject and can be used to override any",
      "           settings of the ignore option in git-config(1) or gitmodules(5).",
      "           When \"untracked\" is used submodules are not considered dirty when",
      "           they only contain untracked content (but they are still scanned for",
      "           modified content). Using \"dirty\" ignores all changes to the work",
      "           tree of submodules, only changes to the commits stored in the",
      "           superproject are shown (this was the behavior until 1.7.0). Using",
      "           \"all\" hides all changes to submodules.",
      "",
      "       --src-prefix=<prefix>",
      "           Show the given source prefix instead of \"a/\".",
      "",
      "       --dst-prefix=<prefix>",
      "           Show the given destination prefix instead of \"b/\".",
      "",
      "       --no-prefix",
      "           Do not show any source or destination prefix.",
      "",
      "       For more detailed explanation on these common options, see also",
      "       gitdiffcore(7).",
      "",
      "GENERATING PATCHES WITH -P",
      "       When \"git-diff-index\", \"git-diff-tree\", or \"git-diff-files\" are run",
      "       with a -p option, \"git diff\" without the --raw option, or \"git log\"",
      "       with the \"-p\" option, they do not produce the output described above;",
      "       instead they produce a patch file. You can customize the creation of",
      "       such patches via the GIT_EXTERNAL_DIFF and the GIT_DIFF_OPTS",
      "       environment variables.",
      "",
      "       What the -p option produces is slightly different from the traditional",
      "       diff format:",
      "",
      "        1. It is preceded with a \"git diff\" header that looks like this:",
      "",
      "               diff --git a/file1 b/file2",
      "",
      "           The a/ and b/ filenames are the same unless rename/copy is",
      "           involved. Especially, even for a creation or a deletion, /dev/null",
      "           is not used in place of the a/ or b/ filenames.",
      "",
      "           When rename/copy is involved, file1 and file2 show the name of the",
      "           source file of the rename/copy and the name of the file that",
      "           rename/copy produces, respectively.",
      "",
      "        2. It is followed by one or more extended header lines:",
      "",
      "               old mode <mode>",
      "               new mode <mode>",
      "               deleted file mode <mode>",
      "               new file mode <mode>",
      "               copy from <path>",
      "               copy to <path>",
      "               rename from <path>",
      "               rename to <path>",
      "               similarity index <number>",
      "               dissimilarity index <number>",
      "               index <hash>..<hash> <mode>",
      "",
      "           File modes are printed as 6-digit octal numbers including the file",
      "           type and file permission bits.",
      "",
      "           Path names in extended headers do not include the a/ and b/",
      "           prefixes.",
      "",
      "           The similarity index is the percentage of unchanged lines, and the",
      "           dissimilarity index is the percentage of changed lines. It is a",
      "           rounded down integer, followed by a percent sign. The similarity",
      "           index value of 100% is thus reserved for two equal files, while",
      "           100% dissimilarity means that no line from the old file made it",
      "           into the new one.",
      "",
      "           The index line includes the SHA-1 checksum before and after the",
      "           change. The <mode> is included if the file mode does not change;",
      "           otherwise, separate lines indicate the old and the new mode.",
      "",
      "        3. TAB, LF, double quote and backslash characters in pathnames are",
      "           represented as \\t, \\n, \\\" and \\\\, respectively. If there is need",
      "           for such substitution then the whole pathname is put in double",
      "           quotes.",
      "",
      "        4. All the file1 files in the output refer to files before the commit,",
      "           and all the file2 files refer to files after the commit. It is",
      "           incorrect to apply each change to each file sequentially. For",
      "           example, this patch will swap a and b:",
      "",
      "               diff --git a/a b/b",
      "               rename from a",
      "               rename to b",
      "               diff --git a/b b/a",
      "               rename from b",
      "               rename to a",
      "",
      "COMBINED DIFF FORMAT",
      "       Any diff-generating command can take the ‘-c` or --cc option to produce",
      "       a combined diff when showing a merge. This is the default format when",
      "       showing merges with git-diff(1) or git-show(1). Note also that you can",
      "       give the `-m’ option to any of these commands to force generation of",
      "       diffs with individual parents of a merge.",
      "",
      "       A combined diff format looks like this:",
      "",
      "           diff --combined describe.c",
      "           index fabadb8,cc95eb0..4866510",
      "           --- a/describe.c",
      "           +++ b/describe.c",
      "           @@@ -98,20 -98,12 +98,20 @@@",
      "                   return (a_date > b_date) ? -1 : (a_date == b_date) ? 0 : 1;",
      "             }",
      "",
      "           - static void describe(char *arg)",
      "            -static void describe(struct commit *cmit, int last_one)",
      "           ++static void describe(char *arg, int last_one)",
      "             {",
      "            +      unsigned char sha1[20];",
      "            +      struct commit *cmit;",
      "                   struct commit_list *list;",
      "                   static int initialized = 0;",
      "                   struct commit_name *n;",
      "",
      "            +      if (get_sha1(arg, sha1) < 0)",
      "            +              usage(describe_usage);",
      "            +      cmit = lookup_commit_reference(sha1);",
      "            +      if (!cmit)",
      "            +              usage(describe_usage);",
      "            +",
      "                   if (!initialized) {",
      "                           initialized = 1;",
      "                           for_each_ref(get_name);",
      "",
      "",
      "",
      "        1. It is preceded with a \"git diff\" header, that looks like this (when",
      "           -c option is used):",
      "",
      "               diff --combined file",
      "",
      "           or like this (when --cc option is used):",
      "",
      "               diff --cc file",
      "",
      "        2. It is followed by one or more extended header lines (this example",
      "           shows a merge with two parents):",
      "",
      "               index <hash>,<hash>..<hash>",
      "               mode <mode>,<mode>..<mode>",
      "               new file mode <mode>",
      "               deleted file mode <mode>,<mode>",
      "",
      "           The mode <mode>,<mode>..<mode> line appears only if at least one of",
      "           the <mode> is different from the rest. Extended headers with",
      "           information about detected contents movement (renames and copying",
      "           detection) are designed to work with diff of two <tree-ish> and are",
      "           not used by combined diff format.",
      "",
      "        3. It is followed by two-line from-file/to-file header",
      "",
      "               --- a/file",
      "               +++ b/file",
      "",
      "           Similar to two-line header for traditional unified diff format,",
      "           /dev/null is used to signal created or deleted files.",
      "",
      "        4. Chunk header format is modified to prevent people from accidentally",
      "           feeding it to patch -p1. Combined diff format was created for",
      "           review of merge commit changes, and was not meant for apply. The",
      "           change is similar to the change in the extended index header:",
      "",
      "               @@@ <from-file-range> <from-file-range> <to-file-range> @@@",
      "",
      "           There are (number of parents + 1) @ characters in the chunk header",
      "           for combined diff format.",
      "",
      "       Unlike the traditional unified diff format, which shows two files A and",
      "       B with a single column that has - (minus — appears in A but removed in",
      "       B), + (plus — missing in A but added to B), or \" \" (space — unchanged)",
      "       prefix, this format compares two or more files file1, file2,... with",
      "       one file X, and shows how X differs from each of fileN. One column for",
      "       each of fileN is prepended to the output line to note how X’s line is",
      "       different from it.",
      "",
      "       A - character in the column N means that the line appears in fileN but",
      "       it does not appear in the result. A + character in the column N means",
      "       that the line appears in the result, and fileN does not have that line",
      "       (in other words, the line was added, from the point of view of that",
      "       parent).",
      "",
      "       In the above example output, the function signature was changed from",
      "       both files (hence two - removals from both file1 and file2, plus ++ to",
      "       mean one line that was added does not appear in either file1 nor",
      "       file2). Also eight other lines are the same from file1 but do not",
      "       appear in file2 (hence prefixed with +).",
      "",
      "       When shown by git diff-tree -c, it compares the parents of a merge",
      "       commit with the merge result (i.e. file1..fileN are the parents). When",
      "       shown by git diff-files -c, it compares the two unresolved merge",
      "       parents with the working tree file (i.e. file1 is stage 2 aka \"our",
      "       version\", file2 is stage 3 aka \"their version\").",
      "",
      "EXAMPLES",
      "       git log --no-merges",
      "           Show the whole commit history, but skip any merges",
      "",
      "       git log v2.6.12.. include/scsi drivers/scsi",
      "           Show all commits since version v2.6.12 that changed any file in the",
      "           include/scsi or drivers/scsi subdirectories",
      "",
      "       git log --since=\"2 weeks ago\" -- gitk",
      "           Show the changes during the last two weeks to the file gitk. The",
      "           “--” is necessary to avoid confusion with the branch named gitk",
      "",
      "       git log --name-status release..test",
      "           Show the commits that are in the \"test\" branch but not yet in the",
      "           \"release\" branch, along with the list of paths each commit",
      "           modifies.",
      "",
      "       git log --follow builtin/rev-list.c",
      "           Shows the commits that changed builtin/rev-list.c, including those",
      "           commits that occurred before the file was given its present name.",
      "",
      "       git log --branches --not --remotes=origin",
      "           Shows all commits that are in any of local branches but not in any",
      "           of remote-tracking branches for origin (what you have that origin",
      "           doesn’t).",
      "",
      "       git log master --not --remotes=*/master",
      "           Shows all commits that are in local master but not in any remote",
      "           repository master branches.",
      "",
      "       git log -p -m --first-parent",
      "           Shows the history including change diffs, but only from the “main",
      "           branch” perspective, skipping commits that come from merged",
      "           branches, and showing full diffs of changes introduced by the",
      "           merges. This makes sense only when following a strict policy of",
      "           merging all topic branches when staying on a single integration",
      "           branch.",
      "",
      "       git log -L '/int main/',/^}/:main.c",
      "           Shows how the function main() in the file main.c evolved over time.",
      "",
      "       git log -3",
      "           Limits the number of commits to show to 3.",
      "",
      "DISCUSSION",
      "       At the core level, Git is character encoding agnostic.",
      "",
      "       ·   The pathnames recorded in the index and in the tree objects are",
      "           treated as uninterpreted sequences of non-NUL bytes. What",
      "           readdir(2) returns are what are recorded and compared with the data",
      "           Git keeps track of, which in turn are expected to be what lstat(2)",
      "           and creat(2) accepts. There is no such thing as pathname encoding",
      "           translation.",
      "",
      "       ·   The contents of the blob objects are uninterpreted sequences of",
      "           bytes. There is no encoding translation at the core level.",
      "",
      "       ·   The commit log messages are uninterpreted sequences of non-NUL",
      "           bytes.",
      "",
      "       Although we encourage that the commit log messages are encoded in",
      "       UTF-8, both the core and Git Porcelain are designed not to force UTF-8",
      "       on projects. If all participants of a particular project find it more",
      "       convenient to use legacy encodings, Git does not forbid it. However,",
      "       there are a few things to keep in mind.",
      "",
      "        1. git commit and git commit-tree issues a warning if the commit log",
      "           message given to it does not look like a valid UTF-8 string, unless",
      "           you explicitly say your project uses a legacy encoding. The way to",
      "           say this is to have i18n.commitencoding in .git/config file, like",
      "           this:",
      "",
      "               [i18n]",
      "                       commitencoding = ISO-8859-1",
      "",
      "           Commit objects created with the above setting record the value of",
      "           i18n.commitencoding in its encoding header. This is to help other",
      "           people who look at them later. Lack of this header implies that the",
      "           commit log message is encoded in UTF-8.",
      "",
      "        2. git log, git show, git blame and friends look at the encoding",
      "           header of a commit object, and try to re-code the log message into",
      "           UTF-8 unless otherwise specified. You can specify the desired",
      "           output encoding with i18n.logoutputencoding in .git/config file,",
      "           like this:",
      "",
      "               [i18n]",
      "                       logoutputencoding = ISO-8859-1",
      "",
      "           If you do not have this configuration variable, the value of",
      "           i18n.commitencoding is used instead.",
      "",
      "       Note that we deliberately chose not to re-code the commit log message",
      "       when a commit is made to force UTF-8 at the commit object level,",
      "       because re-coding to UTF-8 is not necessarily a reversible operation.",
      "",
      "CONFIGURATION",
      "       See git-config(1) for core variables and git-diff(1) for settings",
      "       related to diff generation.",
      "",
      "       format.pretty",
      "           Default for the --format option. (See Pretty Formats above.)",
      "           Defaults to medium.",
      "",
      "       i18n.logOutputEncoding",
      "           Encoding to use when displaying logs. (See Discussion above.)",
      "           Defaults to the value of i18n.commitEncoding if set, and UTF-8",
      "           otherwise.",
      "",
      "       log.date",
      "           Default format for human-readable dates. (Compare the --date",
      "           option.) Defaults to \"default\", which means to write dates like Sat",
      "           May 8 19:35:34 2010 -0500.",
      "",
      "       log.showroot",
      "           If false, git log and related commands will not treat the initial",
      "           commit as a big creation event. Any root commits in git log -p",
      "           output would be shown without a diff attached. The default is true.",
      "",
      "       mailmap.*",
      "           See git-shortlog(1).",
      "",
      "       notes.displayRef",
      "           Which refs, in addition to the default set by core.notesRef or",
      "           GIT_NOTES_REF, to read notes from when showing commit messages with",
      "           the log family of commands. See git-notes(1).",
      "",
      "           May be an unabbreviated ref name or a glob and may be specified",
      "           multiple times. A warning will be issued for refs that do not",
      "           exist, but a glob that does not match any refs is silently ignored.",
      "",
      "           This setting can be disabled by the --no-notes option, overridden",
      "           by the GIT_NOTES_DISPLAY_REF environment variable, and overridden",
      "           by the --notes=<ref> option.",
      "",
      "GIT",
      "       Part of the git(1) suite",
      "",
      "",
      "",
      "Git 1.9.1                         03/21/2016                        GIT-LOG(1)"
   };
   TStrStrVectPair gitPair("git-log", strVect);
   m_gitCmdMap.insert(gitPair);
}
#endif
